<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2022.1.2 (Build 574_0_22407U)" ts="2025-05-13 17:03:41">
<Project name="DP" LastModified="2025-05-13 17:01:45.7676717">
  <Items>
    <ProjectItem name="LEADNorth" type="PKG"></ProjectItem>
  </Items>
</Project>


<Class name="LEADNorth.CDAProfiler.CCDProcessor">
<TimeChanged>67338,60305.8003174</TimeChanged>
<TimeCreated>67080,58088.1780856</TimeCreated>

<Method name="ProcessCCDDirectory">
<Description>
Processes all .xml CCD files in a directory by invoking the CCD processor.
Returns an error if the directory is invalid or no XML files are found.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>directory:%String,profileID:%String,sections:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Check if the provided directory exists
    If ##class(%File).DirectoryExists(directory)'=1 {
        Write "ERROR: Directory does not exist: ", directory, !
        Quit $$$ERROR($$$GeneralError, "Directory does not exist: "_directory)
    }

    // Get initial file list to count XML files
    Set resultSet = ##class(%ResultSet).%New("%File:FileSet")
    Set sc = resultSet.Execute(directory, "*.xml")
    If $$$ISERR(sc) {
        Write "ERROR: Failed to retrieve file list from directory: ", directory, !
        Quit sc
    }

    // Count files to validate presence
    Set fileCount = 0
    While resultSet.%Next() {
        Set fileCount = fileCount + 1
    }

    If fileCount = 0 {
        Write "INFO: No XML files found in directory: ", directory, !
        Quit $$$OK
    }

    // Reopen the file list for actual processing
    Set resultSet = ##class(%ResultSet).%New("%File:FileSet")
    Set sc = resultSet.Execute(directory, "*.xml")
    If $$$ISERR(sc) {
        Write "ERROR: Failed to reopen file list: ", directory, !
        Quit sc
    }

    Set currentIndex = 0

    While resultSet.%Next() {
        Set currentIndex = currentIndex + 1
        Set fileName = resultSet.Data("Name")
        Set fullPath = ##class(%File).NormalizeFilename(fileName, directory)

        // Check if file still exists
        If ##class(%File).Exists(fullPath)'=1 {
            Write "WARNING: File not found (skipped): ", fullPath, !
            Continue
        }

        // Attempt to process the file
        Try {
            Set sc = ..ProcessCCD(fullPath, profileID, sections)
            If $$$ISOK(sc) {
                Write "PROGRESS: Processed ", currentIndex, " of ", fileCount, ": ", fileName, !
            } Else {
                Write "ERROR: Failed to process file: ", fullPath, !
                Do $System.Status.DisplayError(sc)
            }
        } Catch ex {
            Write "EXCEPTION: Error while processing file: ", fullPath, !
            Do $System.Status.DisplayError(ex.AsStatus())
        }
    }

    Write "INFO: All eligible files in directory processed.", !
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="ProcessCCD">
<ClassMethod>1</ClassMethod>
<FormalSpec>ccdFilePath:%String,profileID:%String,sections:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status = $$$OK

    // Process Metadata first
    Set docXml = ..FileToStream(ccdFilePath, "MetadataXSLT")
    If docXml = "" {
        Write "XSLT transformation failed. No XML output generated.", !
        Quit $$$ERROR($$$GeneralError, "XSLT transformation failed.")
    }

    Set documentIDnumber = ""
    Set docStatus = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertDocumentMetadata(docXml, .documentIDnumber, profileID)
    If $$$ISERR(docStatus) {
        Write "Error saving document metadata", !
        Quit docStatus
    }

    // Selectively process based on 'sections'
    If sections["allergy" {
	    //write "HELLO"
        Set allergyXml = ..FileToStream(ccdFilePath, "AllergyXSLT")
        If allergyXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for allergies.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertAllergyData(allergyXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["medications" {
        Set medicationsXml = ..FileToStream(ccdFilePath, "MedicationsXSLT")
        If medicationsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for medications.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertMedicationData(medicationsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["problems" {
        Set problemsXml = ..FileToStream(ccdFilePath, "ProblemsXSLT")
        If problemsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for problems.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertProblemsData(problemsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["procedures" {
        Set proceduresXml = ..FileToStream(ccdFilePath, "ProceduresXSLT")
        If proceduresXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for procedures.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertProceduresData(proceduresXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["results" {
        Set resultsXml = ..FileToStream(ccdFilePath, "ResultsXSLT")
        If resultsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for results.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertResultsData(resultsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["vitalSigns" {
        Set vitalSignsXml = ..FileToStream(ccdFilePath, "VitalSignsXSLT")
        If vitalSignsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for vital signs.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertVitalSignsData(vitalSignsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["immunizations" {
        Set immunizationsXml = ..FileToStream(ccdFilePath, "ImmunizationsXSLT")
        If immunizationsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for immunizations.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertImmunizationData(immunizationsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["planOfCare" {
        Set planOfCareXml = ..FileToStream(ccdFilePath, "PlanOfCareXSLT")
        If planOfCareXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for plan of care.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPlanOfCareData(planOfCareXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["socialHistory" {
        Set socialHistoryXml = ..FileToStream(ccdFilePath, "SocialHistoryXSLT")
        If socialHistoryXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for social history.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertSocialHistoryData(socialHistoryXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["functionalStatus" {
        Set functionalStatusXml = ..FileToStream(ccdFilePath, "FunctionalStatusXSLT")
        If functionalStatusXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for functional status.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertFunctionalStatusData(functionalStatusXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["familyHistory" {
        Set familyHistoryXml = ..FileToStream(ccdFilePath, "FamilyHistoryXSLT")
        If familyHistoryXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for family history.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertFamilyHistoryData(familyHistoryXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["advanceDirective" {
        Set advanceDirectiveXml = ..FileToStream(ccdFilePath, "AdvanceDirectiveXSLT")
        If advanceDirectiveXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for advance directives.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertAdvanceDirectiveData(advanceDirectiveXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["encounters" {
        Set encounterXml = ..FileToStream(ccdFilePath, "EncounterXSLT")
        If encounterXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for encounters.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertEncounterData(encounterXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["payer" {
        Set payerXml = ..FileToStream(ccdFilePath, "PayerXSLT")
        If payerXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for payers.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPayerData(payerXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["patient" {
        Set patientXml = ..FileToStream(ccdFilePath, "PatientXSLT")
        If patientXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for patient.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPatientData(patientXml, profileID, documentIDnumber)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["goals" {
        Set goalsXml = ..FileToStream(ccdFilePath, "GoalsXSLT")
        If goalsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for goals.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertGoalsData(goalsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["implants" {
        Set implantsXml = ..FileToStream(ccdFilePath, "ImplantsXSLT")
        If implantsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for implants.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertImplantsData(implantsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["encompassingEncounter" {
        Set encompassingXml = ..FileToStream(ccdFilePath, "EncompassingEncounterXSLT")
        If encompassingXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for encompassing encounters.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertEncompassingEncounterData(encompassingXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["diagnosis" {
        Set diagnosisXml = ..FileToStream(ccdFilePath, "DiagnosisXSLT")
        If diagnosisXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for diagnosis.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertDiagnosisData(diagnosisXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    Quit status
]]></Implementation>
</Method>

<Method name="FileToStream">
<Description>
Converts the contents of a file to a character stream and applies an XSLT transformation.
Returns the transformed output stream or an error stream if the operation fails.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>filePath:%String,xDataName:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
    // Create a new in-memory character stream
    Set inputStream = ##class(%Stream.GlobalCharacter).%New()

    // Open the file
    Set file = ##class(%Stream.FileCharacter).%New()
    Set sc = file.LinkToFile(filePath)
    If $$$ISERR(sc) {
        Do $System.Status.DisplayError(sc)
        Quit inputStream  // Return an empty stream to maintain type safety
    }

    // Read file contents into the memory stream
    While 'file.AtEnd {
        Set line = file.ReadLine()
        Do inputStream.Write(line)
        Do inputStream.Write($Char(13,10))
    }

    Do inputStream.Rewind()

    // Apply the XSLT transformation
    Set resultStream = ..ApplyXSLT(inputStream, xDataName)
    Quit resultStream
]]></Implementation>
</Method>

<Method name="ApplyXSLT">
<Description>
Applies an XSLT transformation to the input stream using the specified XData block.
Returns the transformed output as a new character stream.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStream:%Stream,xDataName:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim tCompiledStyleSheet As %XML.XSLT.CompiledStyleSheet
    #dim outputStream = ##class(%Stream.GlobalCharacter).%New()

    Do {
        // Open the compiled XData block
        Set tXSL = ##class(%Dictionary.CompiledXData).%OpenId("LEADNorth.CDAProfiler.XSLT.CDAParser||"_xDataName).Data
        If '$IsObject(tXSL) {
            Set tSC = %objlasterror
            Quit
        }

        // Compile the XSLT stylesheet
        Set tSC = ##class(%XML.XSLT.CompiledStyleSheet).CreateFromStream(tXSL, .tCompiledStyleSheet)
        If $$$ISERR(tSC) Quit

        // Apply transformation
        Set tSC = ##class(%XML.XSLT.Transformer).TransformStreamWithCompiledXSL(pStream, tCompiledStyleSheet, .outputStream)
        If $$$ISERR(tSC) Quit
    } While (0)

    If $$$ISERR(tSC) {
        Do DisplayError^%apiOBJ(tSC)
        Quit ##class(%Stream.GlobalCharacter).%New()  // Return empty stream on error
    }

    Quit outputStream
]]></Implementation>
</Method>

<Method name="ProcessLatestCCDs">
<ClassMethod>1</ClassMethod>
<FormalSpec>num:%Integer,profileID:%String,filterDocuments:%String,sections:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Validate input
    If num <= 0 {
        Write "ERROR: Invalid number of documents requested.", !
        Quit $$$ERROR($$$GeneralError, "Invalid number of documents requested")
    }

    Set tSC = $$$OK
    Set index = 0

    // Build the SQL query to get the IDs
    If filterDocuments'="" {
	    Set sqltext = "SELECT TOP ? ID FROM HS_IHE_XDSb_Repository.Documents WHERE ID [ '"_filterDocuments_"' ORDER BY ID ASC"
    } Else {
	    Set sqltext = "SELECT TOP ? ID FROM HS_IHE_XDSb_Repository.Documents ORDER BY ID ASC"
    }

    // Prepare and execute the SQL statement
    Set stmt = ##class(%SQL.Statement).%New()
    Set qStatus = stmt.%Prepare(sqltext)
    If $$$ISERR(qStatus) {
        Do $System.Status.DisplayError(qStatus)
        Quit qStatus
    }
    Set rset = stmt.%Execute(num)

    // Loop through the result set
    While rset.%Next() {
        Set docID = rset.ID
        // Get the document object for the current ID
        Set tSC = ##class(HS.IHE.XDSb.Repository.Documents).DocumentObjectForID(docID, .msg)
        If $$$ISERR(tSC) {
            Do $System.Status.DisplayError(tSC)
            Continue
        }
        // Process the CCD stream
        Set sc = ..ProcessCCDStream(msg.Document, profileID, sections)
        If $$$ISERR(sc) {
            Write "ERROR: Failed to process document ID: ", docID, !
            Do $System.Status.DisplayError(sc)
        }
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="ProcessCCDStream">
<ClassMethod>1</ClassMethod>
<FormalSpec>ccdStream:%Stream.GlobalCharacter,profileID:%String,sections:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set status = $$$OK

    // Process Metadata first
    Set docXml = ..ApplyXSLT(ccdStream, "MetadataXSLT")
    If docXml = "" {
        Write "XSLT transformation failed for Document Metadata. No XML output generated.", !
        Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for Document Metadata.")
    }

    Set documentIDnumber = ""
    Set docStatus = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertDocumentMetadata(docXml, .documentIDnumber, profileID)
    If $$$ISERR(docStatus) {
        Write "Error saving document metadata", !
        Quit docStatus
    }

    // Selectively process sections
    If sections["allergy" {
        Set allergyXml = ..ApplyXSLT(ccdStream, "AllergyXSLT")
        If allergyXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for allergies.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertAllergyData(allergyXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["medications" {
        Set medicationsXml = ..ApplyXSLT(ccdStream, "MedicationsXSLT")
        If medicationsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for medications.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertMedicationData(medicationsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["problems" {
        Set problemsXml = ..ApplyXSLT(ccdStream, "ProblemsXSLT")
        If problemsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for problems.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertProblemsData(problemsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["procedures" {
        Set proceduresXml = ..ApplyXSLT(ccdStream, "ProceduresXSLT")
        If proceduresXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for procedures.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertProceduresData(proceduresXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["results" {
        Set resultsXml = ..ApplyXSLT(ccdStream, "ResultsXSLT")
        If resultsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for results.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertResultsData(resultsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["vitalSigns" {
        Set vitalSignsXml = ..ApplyXSLT(ccdStream, "VitalSignsXSLT")
        If vitalSignsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for vital signs.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertVitalSignsData(vitalSignsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["immunizations" {
        Set immunizationsXml = ..ApplyXSLT(ccdStream, "ImmunizationsXSLT")
        If immunizationsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for immunizations.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertImmunizationData(immunizationsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["planOfCare" {
        Set planOfCareXml = ..ApplyXSLT(ccdStream, "PlanOfCareXSLT")
        If planOfCareXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for plan of care.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPlanOfCareData(planOfCareXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["socialHistory" {
        Set socialHistoryXml = ..ApplyXSLT(ccdStream, "SocialHistoryXSLT")
        If socialHistoryXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for social history.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertSocialHistoryData(socialHistoryXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["functionalStatus" {
        Set functionalStatusXml = ..ApplyXSLT(ccdStream, "FunctionalStatusXSLT")
        If functionalStatusXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for functional status.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertFunctionalStatusData(functionalStatusXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["familyHistory" {
        Set familyHistoryXml = ..ApplyXSLT(ccdStream, "FamilyHistoryXSLT")
        If familyHistoryXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for family history.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertFamilyHistoryData(familyHistoryXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["advanceDirective" {
        Set advanceDirectiveXml = ..ApplyXSLT(ccdStream, "AdvanceDirectiveXSLT")
        If advanceDirectiveXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for advance directives.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertAdvanceDirectiveData(advanceDirectiveXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["encounters" {
        Set encounterXml = ..ApplyXSLT(ccdStream, "EncounterXSLT")
        If encounterXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for encounters.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertEncounterData(encounterXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["payer" {
        Set payerXml = ..ApplyXSLT(ccdStream, "PayerXSLT")
        If payerXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for payers.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPayerData(payerXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["patient" {
        Set patientXml = ..ApplyXSLT(ccdStream, "PatientXSLT")
        If patientXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for patient.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertPatientData(patientXml, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["goals" {
        Set goalsXml = ..ApplyXSLT(ccdStream, "GoalsXSLT")
        If goalsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for goals.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertGoalsData(goalsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["implants" {
        Set implantsXml = ..ApplyXSLT(ccdStream, "ImplantsXSLT")
        If implantsXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for implants.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertImplantsData(implantsXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["encompassingEncounter" {
        Set encompassingXml = ..ApplyXSLT(ccdStream, "EncompassingEncounterXSLT")
        If encompassingXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for encompassing encounters.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertEncompassingEncounterData(encompassingXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    If sections["diagnosis" {
        Set diagnosisXml = ..ApplyXSLT(ccdStream, "DiagnosisXSLT")
        If diagnosisXml = "" Quit $$$ERROR($$$GeneralError, "XSLT transformation failed for diagnoses.")
        Set sc = ##class(LEADNorth.CDAProfiler.Utils.DBInsert).InsertDiagnosisData(diagnosisXml, documentIDnumber, profileID)
        If $$$ISERR(sc) Set status = sc
    }

    Quit status
]]></Implementation>
</Method>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDAdvanceDirective">
<Super>%Persistent</Super>
<TimeChanged>67290,36670.4781655</TimeChanged>
<TimeCreated>67081,42215.8478046</TimeCreated>

<Property name="AdvanceDirectiveID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="DirectiveType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DateSigned">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="DirectiveID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthDB04.CCDAdvanceD725BD</DataLocation>
<DefaultData>CCDAdvanceDirectiveDefaultData</DefaultData>
<IdLocation>^LEADNorthDB04.CCDAdvanceD725BD</IdLocation>
<IndexLocation>^LEADNorthDB04.CCDAdvanceD725BI</IndexLocation>
<StreamLocation>^LEADNorthDB04.CCDAdvanceD725BS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="CCDAdvanceDirectiveDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AdvanceDirectiveID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>DirectiveType</Value>
</Value>
<Value name="5">
<Value>DateSigned</Value>
</Value>
<Value name="6">
<Value>StatusCode</Value>
</Value>
<Value name="7">
<Value>DirectiveID</Value>
</Value>
<Value name="8">
<Value>ProfileID</Value>
</Value>
<Value name="9">
<Value>SDAMapping</Value>
</Value>
<Value name="10">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="AdvanceDirectiveID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="DateSigned">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>10</AverageFieldSize>
</Property>
<Property name="DirectiveID">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<Property name="DirectiveType">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>16.5</AverageFieldSize>
</Property>
<Property name="DocumentID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9.5</AverageFieldSize>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDAllergy">
<Super>%Persistent</Super>
<TimeChanged>67290,36666.2979692</TimeChanged>
<TimeCreated>67081,41491.7166602</TimeCreated>

<Property name="AllergyID">
<Type>%String</Type>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="AllergyCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AllergyCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AllergyCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AllergyDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CategoryCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CategoryCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CategoryCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CategoryDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReactionCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReactionCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReactionCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReactionDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SeverityCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SeverityCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SeverityCodeName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="SeverityDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Provider">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ActIdExtension">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ActIdRoot">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ActClassCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ActMoodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ActStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ObservationCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ObservationEffectiveTimeLow">
<Type>%String</Type>
</Property>

<Property name="ObservationEffectiveTimeHigh">
<Type>%String</Type>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="StatusCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReferenceAllergyId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReferenceReactionId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReferenceSeverityId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReferenceStatusId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RepresentedOrganization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.LEADNDB04.CCDAllergyD</DataLocation>
<DefaultData>CCDAllergyDefaultData</DefaultData>
<IdLocation>^LEADNorth.LEADNDB04.CCDAllergyD</IdLocation>
<IndexLocation>^LEADNorth.LEADNDB04.CCDAllergyI</IndexLocation>
<StreamLocation>^LEADNorth.LEADNDB04.CCDAllergyS</StreamLocation>
<ExtentSize>38</ExtentSize>
<Data name="CCDAllergyDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AllergyID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>AllergyCode</Value>
</Value>
<Value name="5">
<Value>AllergyCodeSystem</Value>
</Value>
<Value name="6">
<Value>AllergyCodeSystemName</Value>
</Value>
<Value name="7">
<Value>AllergyDisplayName</Value>
</Value>
<Value name="8">
<Value>CategoryCode</Value>
</Value>
<Value name="9">
<Value>CategoryCodeSystem</Value>
</Value>
<Value name="10">
<Value>CategoryCodeSystemName</Value>
</Value>
<Value name="11">
<Value>CategoryDisplayName</Value>
</Value>
<Value name="12">
<Value>ReactionCode</Value>
</Value>
<Value name="13">
<Value>ReactionCodeSystem</Value>
</Value>
<Value name="14">
<Value>ReactionCodeSystemName</Value>
</Value>
<Value name="15">
<Value>ReactionDisplayName</Value>
</Value>
<Value name="16">
<Value>SeverityCode</Value>
</Value>
<Value name="17">
<Value>SeverityCodeSystem</Value>
</Value>
<Value name="18">
<Value>SeverityCodeName</Value>
</Value>
<Value name="19">
<Value>SeverityDisplayName</Value>
</Value>
<Value name="20">
<Value>Provider</Value>
</Value>
<Value name="21">
<Value>ActIdExtension</Value>
</Value>
<Value name="22">
<Value>ActIdRoot</Value>
</Value>
<Value name="23">
<Value>ActClassCode</Value>
</Value>
<Value name="24">
<Value>ActMoodCode</Value>
</Value>
<Value name="25">
<Value>ActStatusCode</Value>
</Value>
<Value name="26">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="27">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="28">
<Value>ObservationCode</Value>
</Value>
<Value name="29">
<Value>ObservationCodeSystem</Value>
</Value>
<Value name="30">
<Value>ObservationDisplayName</Value>
</Value>
<Value name="31">
<Value>ObservationStatusCode</Value>
</Value>
<Value name="32">
<Value>ObservationEffectiveTimeLow</Value>
</Value>
<Value name="33">
<Value>ObservationEffectiveTimeHigh</Value>
</Value>
<Value name="34">
<Value>StatusCode</Value>
</Value>
<Value name="35">
<Value>StatusCodeSystem</Value>
</Value>
<Value name="36">
<Value>StatusCodeSystemName</Value>
</Value>
<Value name="37">
<Value>StatusDisplayName</Value>
</Value>
<Value name="38">
<Value>ReferenceAllergyId</Value>
</Value>
<Value name="39">
<Value>ReferenceReactionId</Value>
</Value>
<Value name="40">
<Value>ReferenceSeverityId</Value>
</Value>
<Value name="41">
<Value>ReferenceStatusId</Value>
</Value>
<Value name="42">
<Value>RepresentedOrganization</Value>
</Value>
<Value name="43">
<Value>ProfileID</Value>
</Value>
<Value name="44">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","3","6","9","12","15","18","21","24","26","28","30","32","34","36","38"),$lb(0,0,0,0,1,1,0,1,1,1,0,1,1,1,1),$lb(822083584,822083584,855638016,855638016,905969664,905969664,956301312,956301312,825360384,838860800,889192448,889192448,939524096,825753600,842072064,822083584,872415232,872415232,905969664,905969664,939524096,842530816,858783744,805306368,838860800,838860800,872415232,872415232,905969664,905969664,939524096,859308032))</Histogram>
</Property>
<Property name="ActClassCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541147988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541147988))</Histogram>
</Property>
<Property name="ActIdExtension">
<Selectivity>8.3333%</Selectivity>
<OutlierSelectivity>.5:</OutlierSelectivity>
<AverageFieldSize>6.92</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," 1"," 1"," 1792940973199390.1"," 613618700107"," 613618700107"," 6136187001071"," 624373800001"," 624373800001"," 624373800001"),$lb(2,2,2,2,2,2,1,3,2,1,14,13,2,14,14),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,0,926495289,825702706,909194038,0,0,0,822083584,825439793,842281783,0,0,0,0,540422708))</Histogram>
</Property>
<Property name="ActIdRoot">
<Selectivity>8.2707%</Selectivity>
<OutlierSelectivity>.421053:"36e3e930-7b14-11db-9fe1-0800200c9a66"</OutlierSelectivity>
<AverageFieldSize>33.76</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 1.2.840.113619.21.1.4778906300703140889.3.1"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.22812.11.99930.3.4.10"," 1.3.6.1.4.1.22812.11.99930.3.4.10"," 1.3.6.1.4.1.22812.3.99930.3.4.10"," 1.3.6.1.4.1.22812.3.99930.3.4.10"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 36E3E930-7B14-11DB-9FE1-0800200C9A66"," 8726AA93-451C-4596-A709-99C806E9D08B"),$lb(1,3,13,35,19,34,1,38,38,38,38,38,38,38,1),$lb(536870912,0,825111086,841889844,858666542,825636145,842151985,0,0,825306681,858667321,0,0,825111342,859194675,0,0,0,0,0,0,0,0,0,0,0,0,0,0,859194675,943141430,540555058))</Histogram>
</Property>
<Property name="ActMoodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541414990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541414990))</Histogram>
</Property>
<Property name="ActStatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(8,8,8,8,8,8,8,8,1,11,11,11,11,11,11),$lb(541147988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1094931529,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="AllergyCode">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>5.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," 1191"," 1191"," 1191"," 2670"," 2670"," 2670"," 314422"," 314422"," 7980"," 7982"," 7982"),$lb(2,2,2,2,1,6,6,1,6,6,1,8,1,4,6),$lb(536870912,0,0,0,0,0,0,0,0,0,825309489,0,0,0,0,825309489,842413872,0,0,0,0,842413872,858862644,0,0,858862644,926496816,805306368,838860800,0,0,540490040))</Histogram>
</Property>
<Property name="AllergyCodeSystem">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>17.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.96"),$lb(2,2,2,1,24,24,24,24,24,24,24,24,24,24,21),$lb(536870912,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,943194112,959840256,540159537))</Histogram>
</Property>
<Property name="AllergyCodeSystemName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>6.34</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," RXNORM"," SNOMED CT"),$lb(2,2,2,1,8,8,8,8,8,8,8,8,8,8,1),$lb(536870912,0,0,0,0,0,0,0,1381518927,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1381518927,1397641037,542330447))</Histogram>
</Property>
<Property name="AllergyDisplayName">
<Selectivity>12.5000%</Selectivity>
<AverageFieldSize>11.5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," ALLERGENIC EXTRACT, PENICILLIN"," ALLERGENIC EXTRACT, PENICILLIN"," ASPIRIN"," ASPIRIN"," ASPIRIN"," CODEINE"," CODEINE"," CODEINE"," PENICILLIN G BENZATHINE"," PENICILLIN G BENZATHINE"," SUBSTANCE"),$lb(2,2,2,2,1,32,2,9,9,1,9,9,1,25,1),$lb(536870912,0,0,0,0,0,0,0,0,0,1095519301,0,0,1280066898,1397770578,0,0,0,0,1095979081,1129268293,0,0,0,0,1129268293,1346719305,0,0,1346719305,1398096467,542332226))</Histogram>
</Property>
<Property name="AllergyID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="CategoryCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 282100009"," 282100009"," 282100009"," 282100009"," 282100009"," 282100009"," 416098002"," 416098002"," 416098002"," 416098002"," 416098002"," 416098002"," 416098002"," 419199007"," 419199007"," 419199007"),$lb(11,11,11,11,11,1,11,11,11,11,11,11,3,11,11),$lb(540162098,0,0,0,0,0,0,0,0,0,0,842543665,875640368,0,0,0,0,0,0,0,0,0,0,0,0,909130040,959527225,0,0,0,0,540291385))</Histogram>
</Property>
<Property name="CategoryCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>24</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(24,24,24,24,24,24,24,24,24,24,24,24,24,24,24),$lb(540159537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="CategoryCodeSystemName">
<Selectivity>13.1579%</Selectivity>
<OutlierSelectivity>.868421:"SNOMED CT"</OutlierSelectivity>
<AverageFieldSize>9.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"),$lb(2,1,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,1397641037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542330447))</Histogram>
</Property>
<Property name="CategoryDisplayName">
<Selectivity>16.6667%</Selectivity>
<AverageFieldSize>19.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," ADVERSE REACTION TO SUBSTANCE"," ADVERSE REACTION TO SUBSTANCE"," ADVERSE REACTION TO SUBSTANCE"," ADVERSE REACTION TO SUBSTANCE"," ADVERSE REACTION TO SUBSTANCE"," ALLERGY TO SUBSTANCE (DISORDER)"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"),$lb(2,1,31,31,31,31,2,1,14,14,14,14,14,14,14),$lb(536870912,0,0,0,1094997573,0,0,0,0,0,0,0,0,1146504530,1280066898,1095519301,1146246471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541348437))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>5.2632%</Selectivity>
<AverageFieldSize>3.53</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","3","4","5","7","8","10","11","13","15","17","20","21","21","22"),$lb(0,0,0,0,0,0,0,1,1,1,1,0,1,2,1),$lb(822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,889192448,889192448,922746880,922746880,939524096,939524096,825229312,805306368,822083584,822083584,855638016,855638016,889192448,889192448,922746880,825688064,842006528,805306368,822083584,0,0,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>5.16</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," 20100103"," 20100103"," 20100103"," 20100103"," 20100103"," 20100103"," 20100103"," 20100103"),$lb(2,2,2,2,2,2,2,1,10,10,10,10,10,10,10),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540160049))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>4.3233%</Selectivity>
<OutlierSelectivity>.394737:20090902</OutlierSelectivity>
<AverageFieldSize>11.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 19980110"," 20010110000000"," 20090902"," 20090902"," 20090902"," 20090902"," 20090902"," 20110110"," 20120806"," 20121002100051"," 20140212130251"," 20140212130357"," 20141003103026-0500"," 20161024000000-0400"),$lb(2,1,1,4,10,10,10,10,3,4,5,4,12,5,4),$lb(536870912,0,0,0,825833784,825833784,842018865,825241905,959461680,0,0,0,0,0,0,0,0,809054265,825307185,825241905,842020912,808988726,825241650,842084400,875573809,842346752,859125504,808595762,825241651,875638832,909193266,540160049))</Histogram>
</Property>
<Property name="ObservationCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 416098002"," 416098002"," 416098002"," 416098002"," 416098002"," 416098002"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"),$lb(11,11,11,11,11,1,11,11,11,11,11,11,11,11,11),$lb(540291382,0,0,0,0,0,0,0,0,0,0,875640368,1095979845,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541152083))</Histogram>
</Property>
<Property name="ObservationCodeSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>23.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(23,23,23,23,23,23,23,19,24,24,24,24,24,24,24),$lb(540159537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,892220416,908998966,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ObservationDisplayName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>7.21</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"," DRUG ALLERGY"),$lb(2,2,2,2,2,2,2,1,14,14,14,14,14,14,14),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1146246471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541348437))</Histogram>
</Property>
<Property name="ObservationEffectiveTimeHigh">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationEffectiveTimeLow">
<Selectivity>4.6559%</Selectivity>
<OutlierSelectivity>.394737:20110215</OutlierSelectivity>
<AverageFieldSize>11.32</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 19980110"," 20010110000000"," 20110110"," 20110215"," 20110215"," 20110215"," 20110215"," 20110215"," 20110215"," 20120806100051"," 20140212130114"," 20140212130333"," 20140212130431"," 20161024000000-0400"),$lb(2,1,1,3,6,10,10,10,10,10,4,4,12,12,4),$lb(536870912,0,0,0,825833784,825833784,842018865,808529969,825307185,825307136,842085632,0,0,0,0,0,0,0,0,0,0,825242161,842020912,842020912,875573809,825308160,858993408,858993408,875770112,875573809,909193266,540160049))</Histogram>
</Property>
<Property name="ObservationStatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="Provider">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ReactionCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>4.84</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"),$lb(2,2,2,2,2,2,2,2,2,1,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095979845,0,0,0,0,0,0,0,0,0,0,541152083))</Histogram>
</Property>
<Property name="ReactionCodeSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"),$lb(2,2,2,2,2,2,2,2,2,1,23,23,23,23,23),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ReactionCodeSystemName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ReactionDisplayName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ReferenceAllergyId">
<Selectivity>2.6316%</Selectivity>
<OutlierSelectivity>.947368:</OutlierSelectivity>
<AverageFieldSize>2.47</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," #ALLERGY2"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,591481932,539181388))</Histogram>
</Property>
<Property name="ReferenceReactionId">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ReferenceSeverityId">
<Selectivity>5.0000%</Selectivity>
<AverageFieldSize>11.42</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," #ID0EBAAARACA"," #ID0EBAABNACA"," #ID0EBACBLACA"," #ID0EBACCMACA"," #REACTION1"," #REACTION1"," #REACTION2"," #REACTION2"," #REACTION2"," #REACTION3"," #REACTION3"," #REACTION3"," #REACTION4166639"),$lb(2,2,1,9,8,9,2,12,10,12,12,10,12,12,10),$lb(536870912,0,0,0,0,0,592004144,1095909699,1112424771,1094864449,1128418369,1112293699,1129136451,1229205573,1380270403,0,0,822083584,838860800,0,0,0,0,838860800,855638016,0,0,0,0,855638016,875640374,539185733))</Histogram>
</Property>
<Property name="ReferenceStatusId">
<Selectivity>5.2632%</Selectivity>
<OutlierSelectivity>.947368:"completed"</OutlierSelectivity>
<AverageFieldSize>10.53</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(1,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(536870912,0,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="RepresentedOrganization">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="SeverityCode">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>6.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," 371924009"," 371924009"," 371924009"," 371924009"," 371924009"," 371924009"," 371924009"," 399166001"," 6736007"),$lb(2,2,2,2,2,2,1,11,11,11,11,11,11,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,859255097,0,0,0,0,0,0,0,0,0,0,0,0,925972786,960049462,859388209,909587254,540423987))</Histogram>
</Property>
<Property name="SeverityCodeName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6.5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"),$lb(2,2,2,2,2,2,1,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,1397641037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542330447))</Histogram>
</Property>
<Property name="SeverityCodeSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>13</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(2,2,2,2,2,2,1,24,24,24,24,24,24,24,24),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="SeverityDisplayName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>9.53</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"," MODERATE TO SEVERE"),$lb(2,2,2,2,2,2,2,1,20,20,20,20,20,20,20),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1297040453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541937476))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(8,8,8,8,8,8,8,8,1,11,11,11,11,11,11),$lb(541147988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1094931529,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="StatusCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StatusCodeSystemName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StatusDisplayName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-8</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDDiagnosis">
<Super>%Persistent</Super>
<TimeChanged>67290,35957.9784843</TimeChanged>
<TimeCreated>67184,42397.237357</TimeCreated>

<Property name="DiagnosisID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisTypeCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisTypeCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisTypeCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisTypeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisEffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisEffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisCodeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DiagnosisEncounterNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.LEADB04.CCDDiagnosisD</DataLocation>
<DefaultData>CCDDiagnosisDefaultData</DefaultData>
<IdLocation>^LEADNorth.LEADB04.CCDDiagnosisD</IdLocation>
<IndexLocation>^LEADNorth.LEADB04.CCDDiagnosisI</IndexLocation>
<StreamLocation>^LEADNorth.LEADB04.CCDDiagnosisS</StreamLocation>
<ExtentSize>19</ExtentSize>
<Data name="CCDDiagnosisDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DiagnosisID</Value>
</Value>
<Value name="3">
<Value>DiagnosisTypeCode</Value>
</Value>
<Value name="4">
<Value>DiagnosisTypeCodeSystem</Value>
</Value>
<Value name="5">
<Value>DiagnosisTypeCodeSystemName</Value>
</Value>
<Value name="6">
<Value>DiagnosisTypeDisplayName</Value>
</Value>
<Value name="7">
<Value>DiagnosisEffectiveTimeLow</Value>
</Value>
<Value name="8">
<Value>DiagnosisEffectiveTimeHigh</Value>
</Value>
<Value name="9">
<Value>DiagnosisCode</Value>
</Value>
<Value name="10">
<Value>DiagnosisCodeSystem</Value>
</Value>
<Value name="11">
<Value>DiagnosisCodeSystemName</Value>
</Value>
<Value name="12">
<Value>DiagnosisCodeDisplayName</Value>
</Value>
<Value name="13">
<Value>DiagnosisStatusCode</Value>
</Value>
<Value name="14">
<Value>DiagnosisEncounterNumber</Value>
</Value>
<Value name="15">
<Value>DocumentID</Value>
</Value>
<Value name="16">
<Value>ProfileID</Value>
</Value>
<Value name="17">
<Value>NullValues</Value>
</Value>
<Value name="18">
<Value>SDAMapping</Value>
</Value>
<Value name="19">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","9","10","11","12","13","14","15","16","17","18","19"),$lb(0,0,0,0,0,0,1,1,1,1,1,1,1,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,956301312,956301312,825229312,805306368,822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,825819136))</Histogram>
</Property>
<Property name="DiagnosisCode">
<Selectivity>7.5188%</Selectivity>
<OutlierSelectivity>.473684:</OutlierSelectivity>
<AverageFieldSize>6.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 194828000"," 195967001"," 195967001"," 203523006"," 233604007"," 233604007"," 233604007"," 26929004"," 385093006"," 59621000"),$lb(2,2,2,2,2,1,3,11,1,2,11,11,2,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825832504,876098104,892941879,0,0,825832761,842019637,808662322,858994224,0,0,0,0,858994224,909718073,842414386,859321648,859321648,892941874,540358966))</Histogram>
</Property>
<Property name="DiagnosisCodeDisplayName">
<Selectivity>7.5188%</Selectivity>
<OutlierSelectivity>.473684:</OutlierSelectivity>
<AverageFieldSize>9.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," ALZHEIMER DISEASE"," ANGINA"," ASTHMA"," ASTHMA"," COMMUNITY ACQUIRED PNEUMONIA"," COMMUNITY ACQUIRED PNEUMONIA"," COSTOCHONDRITIS"," ESSENTIAL HYPERTENSION"," PNEUMONIA"," PNEUMONIA"),$lb(2,2,2,2,2,1,2,2,8,1,30,3,1,1,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1095522888,1280985157,1313294670,1313294670,1398032461,0,0,1095980104,1129270605,0,0,1296913742,1398034243,1129272148,1163088709,1163088709,1347306837,0,0,542133829))</Histogram>
</Property>
<Property name="DiagnosisCodeSystem">
<Selectivity>10.5263%</Selectivity>
<OutlierSelectivity>.894737:"2.16.840.1.113883.6.96"</OutlierSelectivity>
<AverageFieldSize>21.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(2,1,24,24,24,24,24,24,24,24,24,24,24,24,24),$lb(536870912,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="DiagnosisCodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6.74</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"),$lb(2,2,2,2,2,1,11,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1397641037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542330447))</Histogram>
</Property>
<Property name="DiagnosisEffectiveTimeHigh">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="DiagnosisEffectiveTimeLow">
<Selectivity>7.0175%</Selectivity>
<OutlierSelectivity>.368421:"202306190000-0600"</OutlierSelectivity>
<AverageFieldSize>18.05</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 20110312090051"," 20110925100051"," 20120806100051"," 20121002100051"," 20130130100051"," 20130130100051"," 20130130100051"," 20130711000000.000-0500"," 20130717000000.000-0500"," 202306190000-0600"," 202306190000-0600"," 202306190000-0600"," 202306190000-0600"," 202306190000-0600"," 202306190000-0600"," 202306190000-0600"),$lb(6,4,5,4,16,16,6,8,3,19,19,19,19,19,19),$lb(540160049,858862128,959591729,825243954,842020912,808988726,825241650,842084400,858796339,0,0,0,0,825438257,925970736,825241648,925904944,825438263,842215478,0,0,0,0,0,0,0,0,0,0,0,0,540160050))</Histogram>
</Property>
<Property name="DiagnosisEncounterNumber">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>22.37</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.1.13.99999.2"," 2.16.840.1.113883.1.13.99999.2"," 5283815"," 5283815"," 52838151"," 52838151"," 52838151"," 52838152"," 52838152"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"," A9D97787-EFBA-4658-B0A6-C33A39A5D340"),$lb(32,1,9,8,10,10,8,10,1,38,38,38,38,38,38),$lb(540159537,0,0,841888054,892483635,0,0,0,822083584,0,0,0,0,822083584,838860800,0,0,892483635,1094272057,0,0,0,0,0,0,0,0,0,0,0,0,541145412))</Histogram>
</Property>
<Property name="DiagnosisID">
<Selectivity>6.3158%</Selectivity>
<OutlierSelectivity>.368421:"1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"</OutlierSelectivity>
<AverageFieldSize>37.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 1.3.6.1.4.1.22812.11.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.11.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1.2.1"," 18B8FAC5-A75A-4ED1-8433-7F4D459C0073"," 4061A4A6-F8D6-4870-B6D5-05E1F3DAB302"," 4FA53FF5-3DE8-47C8-B7C9-1CD201949E76"," 7A3AAF94-00F0-4E1D-8F13-A0CCD08C0640"," A0190413-F3E1-4A17-9A62-90153E610A5D"," B6DAC1F6-DD4E-4AAC-A7CE-1F6EC1EEB827"," B975A197-6908-49F1-876B-D88DA5C0E941"," C5927558-7898-4161-8AAD-A2C94B3339BD"," F2C50FAB-B95D-4002-B33E-50D6E5B66AE1"),$lb(38,19,37,37,37,37,2,1,2,1,1,1,2,1,1),$lb(540094003,0,0,825306681,858667321,0,0,0,0,0,0,0,0,775106102,943863878,825770552,875574833,808857921,1178678579,877019445,927019841,927019841,1093677369,1093677369,1110852673,910442819,959919425,1111045941,1127561522,1127561522,1177699125,541471299))</Histogram>
</Property>
<Property name="DiagnosisStatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="DiagnosisTypeCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"," 29308-4"),$lb(9,9,9,9,9,9,9,9,9,9,9,9,9,9,9),$lb(540162355,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540162355))</Histogram>
</Property>
<Property name="DiagnosisTypeCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>23</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"),$lb(23,23,23,23,23,23,23,23,23,23,23,23,23,23,23),$lb(540159537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="DiagnosisTypeCodeSystemName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"),$lb(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),$lb(541871945,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541871945))</Histogram>
</Property>
<Property name="DiagnosisTypeDisplayName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>19.95</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DIAGNOSIS"," DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"," ENCOUNTER DIAGNOSIS"),$lb(11,1,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(541346113,0,0,1145651527,1162756943,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541412931))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>3.47</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","1","3","3","4","4","5","12","12","12","12","12","12","12","22","22"),$lb(1,0,1,0,1,0,0,2,2,2,2,2,2,0,2),$lb(822083584,0,0,822083584,855638016,0,0,855638016,872415232,0,0,872415232,889192448,889192448,825360384,0,0,0,0,0,0,0,0,0,0,0,0,825360384,842137600,0,0,842137600))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDDocument">
<Super>%Persistent</Super>
<TimeChanged>67334,40182.562862</TimeChanged>
<TimeCreated>67081,41600.7792051</TimeCreated>

<Property name="DocumentID">
<Type>%Integer</Type>
<Required>1</Required>
<Identity>1</Identity>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="PatientID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentDate">
<Type>%Date</Type>
</Property>

<Property name="SectionsPresent">
<Description>
Property used to track which of the profiled sections are present</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="AllSections">
<Description>
Property used to track all sections that are present</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="SectionsWithEncounterNumbers">
<Description>
Property to determine which sections have encounter numbers</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="32000"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CreatedAt">
<Type>%TimeStamp</Type>
<InitialExpression>$zdatetime($horolog,3,1)</InitialExpression>
<ReadOnly>1</ReadOnly>
</Property>

<Method name="GetUniqueSections">
<Description>
do ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).GetUniqueSections("YK")</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProfileID:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    If pProfileID = "" {
        Quit "ProfileID cannot be null"
    }

    Set sql = "SELECT AllSections FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = ?"
    Set stmt = ##class(%SQL.Statement).%New()
    Set sc = stmt.%Prepare(sql)
    If sc '= $$$OK {
        Quit "SQL prepare failed: "_$SYSTEM.Status.GetErrorText(sc)
    }

    Set rs = stmt.%Execute(pProfileID)
    If rs.%SQLCODE '= 0 {
        Quit "SQL execute failed: "_rs.%Message
    }

    Kill seen, display
    While rs.%Next() {
        Set raw = rs.%Get("AllSections")
        Continue:raw=""

        For i=1:1:$L(raw, ",") {
            Set part = $ZStrip($P(raw, ",", i), "<>W")
            Continue:part=""

            Set base   = $ZStrip($P(part, "(", 1), "<>W")
            Continue:base=""
            Set norm   = $ZConvert(base, "L")
            Continue:norm=""

            Set status = $Piece($Piece(part, "(", 2), ")", 1)

            If '$D(seen(norm)) {
                If $ZConvert(status, "L")="has data" {
                    Set seen(norm)=1
                    Set display(norm)=base_"(has data)"
                } Else  {
                    Set seen(norm)=0
                    Set display(norm)=base_"(no data)"
                }
            } Else {
                // upgrade a 'no data' to 'has data' if it appears later
                If 'seen(norm), $ZConvert(status, "L")="has data" {
                    Set seen(norm)=1
                    Set display(norm)=base_"(has data)"
                }
            }
        }
    }

    Set out = ""
    Set key = ""
    For  {
        Set key = $Order(display(key))
        Quit:key=""
        Set out = out_", "_display(key)
    }
    If $Extract(out,1)="," Set out=$Extract(out,2,*)
    Quit out
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.LEADDB04.CCDDocumentD</DataLocation>
<DefaultData>CCDDocumentDefaultData</DefaultData>
<IdLocation>^LEADNorth.LEADDB04.CCDDocumentD</IdLocation>
<IndexLocation>^LEADNorth.LEADDB04.CCDDocumentI</IndexLocation>
<StreamLocation>^LEADNorth.LEADDB04.CCDDocumentS</StreamLocation>
<ExtentSize>22</ExtentSize>
<Data name="CCDDocumentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProfileID</Value>
</Value>
<Value name="3">
<Value>PatientID</Value>
</Value>
<Value name="4">
<Value>DocumentType</Value>
</Value>
<Value name="5">
<Value>DocumentDate</Value>
</Value>
<Value name="6">
<Value>XPath</Value>
</Value>
<Value name="7">
<Value>CreatedAt</Value>
</Value>
<Value name="8">
<Value>SectionsPresent</Value>
</Value>
<Value name="9">
<Value>AllSections</Value>
</Value>
<Value name="10">
<Value>SectionsWithEncounterNumbers</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","10","12","14","15","16","17","18","19","20","21","22"),$lb(0,0,0,0,0,1,1,1,1,1,1,1,0,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,825229312,805306368,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,825819136,842006528,805306368,822083584,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="CreatedAt">
<Selectivity>11.1111%</Selectivity>
<AverageFieldSize>21</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb("2025-02-10 11:11:00","2025-02-10 11:11:01","2025-02-10 11:11:02","2025-02-10 11:11:03","2025-02-10 11:11:04","2025-02-10 11:11:07","2025-02-10 11:11:08","2025-02-10 11:11:09","2025-02-10 11:11:09","2025-02-10 11:11:09","2025-02-10 11:11:09","2025-02-10 11:11:10","2025-02-10 11:11:10","2025-02-10 11:11:10","2025-02-10 11:11:10","2025-02-10 11:11:10"),$lb(18,18,18,18,18,18,18,20,20,20,17,20,20,20,20),$lb(842019381,805306368,822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,922746880,922746880,939524096,939524096,956301312,0,0,0,0,0,0,809041920,825229312,0,0,0,0,0,0,0,0,842019381))</Histogram>
</Property>
<Property name="DocumentDate">
<Selectivity>11.1111%</Selectivity>
<AverageFieldSize>4.09</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(59988,59988,59988,59988,62027,62852,62852,63020,63230,63230,63230,63230,63230,63475,66508,66644),$lb(5,5,5,0,2,5,1,2,5,5,5,5,2,1,2),$lb(892942648,0,0,0,0,0,0,892942648,909258802,808597248,943010304,0,0,842544434,858796592,808595456,842215424,0,0,0,0,0,0,0,0,842215424,876033280,859060021,909455416,892352512,909390848,909522484))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="DocumentType">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="PatientID">
<Selectivity>5.6818%</Selectivity>
<OutlierSelectivity>.318182:12345</OutlierSelectivity>
<AverageFieldSize>5.45</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 106"," 107624055"," 107624104"," 107624139"," 110107073916280"," 110107073916280"," 12345"," 12345"," 12345"," 12345"," 12345"," 12345"," 230420"," 9473"," 98765432"," 9999"),$lb(3,7,8,2,17,2,7,7,7,7,7,1,1,2,2),$lb(540094518,905969664,926298676,808793344,825242624,808714240,859373568,808924722,825241904,0,0,825241904,842216501,0,0,0,0,0,0,0,0,0,0,825373492,842215476,842215476,959723315,876032768,943142453,943142453,960051456,540621113))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDEncompassingEncounter">
<Super>%Persistent</Super>
<TimeChanged>67290,35944.9347453</TimeChanged>
<TimeCreated>67178,59925.4675848</TimeCreated>

<Property name="EncounterID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="EncounterTypeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDateTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EndDateTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DischargeDisposition">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationTelecom">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthDB04.CCDEncompas5806D</DataLocation>
<DefaultData>CCDEncompassingEncounterDefaultData</DefaultData>
<IdLocation>^LEADNorthDB04.CCDEncompas5806D</IdLocation>
<IndexLocation>^LEADNorthDB04.CCDEncompas5806I</IndexLocation>
<StreamLocation>^LEADNorthDB04.CCDEncompas5806S</StreamLocation>
<ExtentSize>18</ExtentSize>
<Data name="CCDEncompassingEncounterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EncounterID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>EncounterTypeDisplayName</Value>
</Value>
<Value name="5">
<Value>EncounterTypeCode</Value>
</Value>
<Value name="6">
<Value>EncounterTypeCodeSystem</Value>
</Value>
<Value name="7">
<Value>EncounterTypeCodeSystemName</Value>
</Value>
<Value name="8">
<Value>StartDateTime</Value>
</Value>
<Value name="9">
<Value>EndDateTime</Value>
</Value>
<Value name="10">
<Value>DischargeDisposition</Value>
</Value>
<Value name="11">
<Value>LocationID</Value>
</Value>
<Value name="12">
<Value>LocationName</Value>
</Value>
<Value name="13">
<Value>LocationAddress</Value>
</Value>
<Value name="14">
<Value>LocationTelecom</Value>
</Value>
<Value name="15">
<Value>AuthorTime</Value>
</Value>
<Value name="16">
<Value>ProfileID</Value>
</Value>
<Value name="17">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","7","8","9","10","11","12","13","14","15","16","17","18"),$lb(0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,922746880,922746880,939524096,939524096,956301312,956301312,825229312,805306368,822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,825753600))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="DischargeDisposition">
<Selectivity>5.5556%</Selectivity>
<OutlierSelectivity>.944444:</OutlierSelectivity>
<AverageFieldSize>2.94</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ROUTINE DISCHARGE"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1380930900,542265173))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>5.5556%</Selectivity>
<AverageFieldSize>3.56</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","7","8","9","10","11","13","14","15","16","17","20","21","22"),$lb(0,0,0,0,0,0,1,1,1,1,1,1,0,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,922746880,922746880,939524096,939524096,956301312,956301312,825229312,805306368,822083584,822083584,855638016,855638016,872415232,872415232,889192448,889192448,905969664,905969664,922746880,825688064,842006528,805306368,822083584,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="EncounterID">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>14.78</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 162"," 20130307_100^INTERNAL MEDICINE"," 20130307_100^INTERNAL MEDICINE"," 20130307_100^INTERNAL MEDICINE"," 5283815"," 5283815"," 5283815"," 5283815"," 5283815"," 9937012"," 9937012"," 9937012"," 9937012"," 9937012"," 9937012"),$lb(1,1,32,32,1,9,9,9,9,1,9,9,9,9,9),$lb(536870912,0,825635328,825635328,842019123,0,0,0,0,842019123,892483635,0,0,0,0,0,0,0,0,892483635,960049975,0,0,0,0,0,0,0,0,0,0,540621107))</Histogram>
</Property>
<Property name="EncounterTypeCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 99213"," 99213"," 99213"," 99213"," 99213"),$lb(2,2,2,2,2,2,2,2,2,2,1,7,7,7,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,960049713,0,0,0,0,0,0,0,0,540621106))</Histogram>
</Property>
<Property name="EncounterTypeCodeSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"),$lb(2,2,2,2,2,2,2,2,2,2,1,24,24,24,24),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="EncounterTypeCodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," CPT-4"," CPT-4"," CPT-4"," CPT-4"," CPT-4"),$lb(2,2,2,2,2,2,2,2,2,2,1,7,7,7,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1129337901,0,0,0,0,0,0,0,0,541282388))</Histogram>
</Property>
<Property name="EncounterTypeDisplayName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.94</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," EVALUATION AND MANAGEMENT"," EVALUATION AND MANAGEMENT"," EVALUATION AND MANAGEMENT"," EVALUATION AND MANAGEMENT"," EVALUATION AND MANAGEMENT"),$lb(2,2,2,2,2,2,2,2,2,2,1,27,27,27,27),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1163280716,0,0,0,0,0,0,0,0,541414977))</Histogram>
</Property>
<Property name="EndDateTime">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>9.5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 20050329"," 20050329"," 20050329"," 20050329"," 20050329"," 20110714090051-0400"," 20130130080051-0500"," 20130130080051-0500"," 20130130080051-0500"," 20130130080051-0500"),$lb(2,2,2,2,2,1,10,10,10,10,3,4,21,21,21),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,842018869,0,0,0,0,0,0,0,0,808792115,825307191,825243441,858796339,0,0,0,0,0,0,540160049))</Histogram>
</Property>
<Property name="LocationAddress">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>21.44</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," MA"_$c(10,9,9,9,9,9,9,9)_" CHESTNUT HILL"_$c(10,9,9,9,9,9,9,9)_"02467"_$c(10,9,9,9,9,9,9,9)_"850 BOYLSTON ST SUITE 530"," MA"_$c(10,9,9,9,9,9,9,9)_" CHESTNUT HILL"_$c(10,9,9,9,9,9,9,9)_"02467"_$c(10,9,9,9,9,9,9,9)_"850 BOYLSTON ST SUITE 530"," MA"_$c(10,9,9,9,9,9,9,9)_" CHESTNUT HILL"_$c(10,9,9,9,9,9,9,9)_"02467"_$c(10,9,9,9,9,9,9,9)_"850 BOYLSTON ST SUITE 530"," MA"_$c(10,9,9,9,9,9,9,9)_" CHESTNUT HILL"_$c(10,9,9,9,9,9,9,9)_"02467"_$c(10,9,9,9,9,9,9,9)_"850 BOYLSTON ST SUITE 530"," MA"_$c(10,9,9,9,9,9,9,9)_" CHESTNUT HILL"_$c(10,9,9,9,9,9,9,9)_"02467"_$c(10,9,9,9,9,9,9,9)_"850 BOYLSTON ST SUITE 530"),$lb(2,2,2,2,2,2,2,2,2,2,1,120,120,120,120),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1296108041,0,0,0,0,0,0,0,0,541933834))</Histogram>
</Property>
<Property name="LocationID">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>7.83</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 100^INTERNAL MEDICINE"," 100^INTERNAL MEDICINE"," 100^INTERNAL MEDICINE"," 100^INTERNAL MEDICINE"," 100^INTERNAL MEDICINE"),$lb(2,2,2,2,2,2,2,2,2,2,1,23,23,23,23),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825241694,0,0,0,0,0,0,0,0,540094512))</Histogram>
</Property>
<Property name="LocationName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>12.83</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," BPG AT 850 BOYLSTON - INTERNAL MEDICINE"," BPG AT 850 BOYLSTON - INTERNAL MEDICINE"," BPG AT 850 BOYLSTON - INTERNAL MEDICINE"," BPG AT 850 BOYLSTON - INTERNAL MEDICINE"," BPG AT 850 BOYLSTON - INTERNAL MEDICINE"),$lb(2,2,2,2,2,2,2,2,2,2,1,41,41,41,41),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1112557344,0,0,0,0,0,0,0,0,541216839))</Histogram>
</Property>
<Property name="LocationTelecom">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="StartDateTime">
<Selectivity>16.6667%</Selectivity>
<AverageFieldSize>9.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," 20050329"," 20050329"," 20050329"," 20050329"," 20050329"," 20120806090051"," 20120815090051"," 20120815090051"," 20130130090051"," 20130130090051"," 20130710214400.000-0500"),$lb(2,2,2,2,1,10,10,10,10,3,7,16,4,16,6),$lb(536870912,0,0,0,0,0,0,0,0,0,842018869,0,0,0,0,0,0,0,0,808792115,825372728,808857657,825569337,0,0,842020913,858796339,0,0,825438256,925970482,540160049))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDEncounter">
<Super>%Persistent</Super>
<TimeChanged>67290,35937.679597</TimeChanged>
<TimeCreated>67081,42244.8926006</TimeCreated>

<Property name="EncounterNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="EncounterTypeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterTypeCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReasonForVisit">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="VisitDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDateTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EndDateTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DischargeDisposition">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FacilityName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FacilityIDAAName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FacilityIDExtension">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FacilityIDRoot">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerTelecom">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationTelecom">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.LEADB04.CCDEncounterD</DataLocation>
<DefaultData>CCDEncounterDefaultData</DefaultData>
<IdLocation>^LEADNorth.LEADB04.CCDEncounterD</IdLocation>
<IndexLocation>^LEADNorth.LEADB04.CCDEncounterI</IndexLocation>
<StreamLocation>^LEADNorth.LEADB04.CCDEncounterS</StreamLocation>
<ExtentSize>38</ExtentSize>
<Data name="CCDEncounterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>EncounterNumber</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>EncounterTypeDisplayName</Value>
</Value>
<Value name="5">
<Value>EncounterTypeCode</Value>
</Value>
<Value name="6">
<Value>EncounterTypeCodeSystem</Value>
</Value>
<Value name="7">
<Value>EncounterTypeCodeSystemName</Value>
</Value>
<Value name="8">
<Value>ReasonForVisit</Value>
</Value>
<Value name="9">
<Value>VisitDescription</Value>
</Value>
<Value name="10">
<Value>StatusCode</Value>
</Value>
<Value name="11">
<Value>StartDateTime</Value>
</Value>
<Value name="12">
<Value>EndDateTime</Value>
</Value>
<Value name="13">
<Value>DischargeDisposition</Value>
</Value>
<Value name="14">
<Value>FacilityName</Value>
</Value>
<Value name="15">
<Value>FacilityIDAAName</Value>
</Value>
<Value name="16">
<Value>FacilityIDExtension</Value>
</Value>
<Value name="17">
<Value>FacilityIDRoot</Value>
</Value>
<Value name="18">
<Value>PerformerID</Value>
</Value>
<Value name="19">
<Value>PerformerAddress</Value>
</Value>
<Value name="20">
<Value>PerformerTelecom</Value>
</Value>
<Value name="21">
<Value>PerformerName</Value>
</Value>
<Value name="22">
<Value>AuthorTime</Value>
</Value>
<Value name="23">
<Value>LocationID</Value>
</Value>
<Value name="24">
<Value>LocationAddress</Value>
</Value>
<Value name="25">
<Value>LocationTelecom</Value>
</Value>
<Value name="26">
<Value>LocationName</Value>
</Value>
<Value name="27">
<Value>ProfileID</Value>
</Value>
<Value name="28">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","3","6","9","12","15","18","21","24","26","28","30","32","34","36","38"),$lb(0,0,0,0,1,1,0,1,1,1,0,1,1,1,1),$lb(822083584,822083584,855638016,855638016,905969664,905969664,956301312,956301312,825360384,838860800,889192448,889192448,939524096,825753600,842072064,822083584,872415232,872415232,905969664,905969664,939524096,842530816,858783744,805306368,838860800,838860800,872415232,872415232,905969664,905969664,939524096,859308032))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>2.7632%</Selectivity>
<OutlierSelectivity>.447368:</OutlierSelectivity>
<AverageFieldSize>9.74</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 20161024155432"," 20170218153434"," 20180820110026"," 20190922182949"," 20200605093647"," 20200706083747"," 20210620152944"," 20220301084707"," 20220731235226"," 20230202225026"),$lb(2,2,2,2,2,1,4,4,4,3,6,4,4,6,4),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,842019126,909193266,925905457,925905457,942684210,942684210,959461682,825831481,842018870,909129008,925906480,808466224,825243186,825243186,842019632,858796336,926101810,842020659,858796592,540160050))</Histogram>
</Property>
<Property name="DischargeDisposition">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>3.7281%</Selectivity>
<OutlierSelectivity>.552632:8</OutlierSelectivity>
<AverageFieldSize>3.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","3","4","8","8","8","8","8","8","8","8","12","14","16","22"),$lb(0,0,0,0,1,1,1,1,1,1,1,0,1,1,0),$lb(822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,939524096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,939524096,825360384,838860800,872415232,872415232,905969664,825622528,842137600,842137600))</Histogram>
</Property>
<Property name="EncounterNumber">
<Selectivity>3.7037%</Selectivity>
<AverageFieldSize>13.84</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 162"," 1800192342822480"," 1836583877388010"," 1884796102839520"," 1906969007029730"," 1939822056212640"," 1966447553594250"," 1974930746033130"," 5283815"," 5283815"," 5283815"," 52838151"," 52838152"," 79DAECF1-FF9D-4321-896C-45D3515ED3FC"),$lb(2,1,2,3,3,2,3,3,3,1,9,9,8,8,1),$lb(536870912,0,0,0,825635328,909246464,942682161,808464697,859190584,859190584,942946105,943207479,959460921,808859958,859387954,859387954,909521972,909521972,926169395,825833268,892483635,0,0,0,0,0,822083584,822083584,838860800,892483635,926499905,540490052))</Histogram>
</Property>
<Property name="EncounterTypeCode">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>7.39</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 371531000"," 371531000"," 99213"," 99213"," 99213"," 99214"," 99214"," 99231"," 99231"," 99231"," 99231"," 99231"," 99243"," 99396"," 99396"),$lb(1,11,1,7,7,5,7,4,7,7,7,7,4,3,7),$lb(536870912,0,859255093,0,0,859255093,960049713,0,0,0,0,855638016,872415232,0,0,825491456,858849280,0,0,0,0,0,0,0,0,858849280,875757568,842281728,859387392,0,0,540621107))</Histogram>
</Property>
<Property name="EncounterTypeCodeSystem">
<Selectivity>7.8947%</Selectivity>
<OutlierSelectivity>.842105:"2.16.840.1.113883.6.12"</OutlierSelectivity>
<AverageFieldSize>23.42</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(1,24,24,24,24,24,24,24,24,24,24,24,21,24,24),$lb(536870912,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825360384,959840256,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="EncounterTypeCodeSystemName">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>4.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," C4"," C4"," C4"," C4"," C4"," C4"," C4"," CPT"," CPT"," CPT"," CPT"," CPT"," SNOMED"," SNOMED"," SNOMED"),$lb(1,4,4,4,4,4,4,2,5,5,5,5,1,8,8),$lb(536870912,0,1127481344,0,0,0,0,0,0,0,0,0,0,0,0,872415232,1347682304,0,0,0,0,0,0,0,0,1129337856,1397641037,0,0,0,0,542330447))</Histogram>
</Property>
<Property name="EncounterTypeDisplayName">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>18.32</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" (99204) OFFICE  VISIT, NEW - LEVEL 4"," 99213 EP DET LOW COMP"," 99213 EP DET LOW COMP"," 99213 EP DET LOW COMP"," 99214 EP COMP MED COMP"," 99214 EP COMP MED COMP"," 99244 CONSULT, LEVEL IV"," ENCOUNTER REPORT"," ENDOCRINOLOGY CONSULT"," EPSV 40-64 YRS *WW (99396)"," INPATIENT"," UNK"," UNK"," UNK"," UNK"," UNK"),$lb(1,23,23,5,24,4,1,3,2,1,1,5,5,5,5),$lb(539507001,674838834,960049713,0,0,0,0,857752912,874530128,0,0,825499717,875831363,960049716,1162756943,1129272654,1146045266,1313099587,1347638816,1162892118,1229869121,1229869121,1431194368,0,0,0,0,0,0,0,0,542461515))</Histogram>
</Property>
<Property name="EndDateTime">
<Selectivity>2.7512%</Selectivity>
<OutlierSelectivity>.394737:</OutlierSelectivity>
<AverageFieldSize>13.24</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 20161024155441-0400"," 20170403105703-0400"," 20180820110340-0400"," 20190922182957-0400"," 20200605093703-0400"," 20200706083831-0400"," 20210620152951-0400"," 20220301084723-0500"," 20220731235258-0400"," 20230202225330-0500"),$lb(2,2,2,2,2,1,4,4,4,3,6,4,4,6,4),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,842019126,909193266,925905968,925905968,942684210,942684210,959461682,825831481,842018870,909129008,925906480,808466224,825243186,825243186,842019632,858796336,926101810,842020659,858796592,540160050))</Histogram>
</Property>
<Property name="FacilityIDAAName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>24.66</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"),$lb(2,2,2,2,2,1,43,43,43,43,43,43,43,43,43),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825111086,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540094002))</Histogram>
</Property>
<Property name="FacilityIDExtension">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>10.84</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 1446375423000620"," 1621504483007010"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"),$lb(2,2,2,2,2,1,2,2,18,18,18,18,18,18,18),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825504822,875836979,909259061,909259061,942813235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540096562))</Histogram>
</Property>
<Property name="FacilityIDRoot">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>24.66</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"," 1.2.840.113619.21.1.4778906300703140889.1"),$lb(2,2,2,2,2,1,43,43,43,43,43,43,43,43,43),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825111086,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540094002))</Histogram>
</Property>
<Property name="FacilityName">
<Selectivity>7.2368%</Selectivity>
<OutlierSelectivity>.421053:"CENTER FOR PRIMARY CARE - RINEHART"</OutlierSelectivity>
<AverageFieldSize>27.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," CENTER FOR PRIMARY CARE - AIKEN"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," COMMUNITY GENERAL HOSPITAL"," GET WELL CLINIC"," GET WELL CLINIC"," LOCAL COMMUNITY HOSPITAL"," LOCAL COMMUNITY HOSPITAL"," LOCAL COMMUNITY HOSPITAL ORGANIZATION"),$lb(2,2,1,27,36,36,36,36,36,2,1,17,1,26,25),$lb(536870912,0,0,0,0,0,1128615508,1095322437,1380535877,0,0,0,0,0,0,0,0,0,0,1162761285,1330466133,1129270605,1195725856,0,0,1195725856,1280262977,0,0,0,542069319,541871939))</Histogram>
</Property>
<Property name="LocationAddress">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>25.97</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 110B SPRINGHALL DRIVE"_$c(10,9,9,9,9,9,9,9,9,9,9)_"SMALLVILLE"_$c(10,9,9,9,9,9,9,9,9,9,9)_"SC"_$c(10,9,9,9,9,9,9,9,9,9,9)_"29445"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 410 HITCHCOCK PARKWAYAIKENSC29801US"," 410 HITCHCOCK PARKWAYAIKENSC29801US"),$lb(2,2,2,2,2,1,2,37,37,37,37,37,37,1,37),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825307202,825246240,858857554,0,0,0,0,0,0,0,0,0,0,0,0,825438496,875638816,0,0,540291376))</Histogram>
</Property>
<Property name="LocationID">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>10.84</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 1446375423000620"," 1621504483007010"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"," 1820329214511820"),$lb(2,2,2,2,2,1,2,2,18,18,18,18,18,18,18),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,825504822,875836979,909259061,909259061,942813235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540096562))</Histogram>
</Property>
<Property name="LocationName">
<Selectivity>7.2368%</Selectivity>
<OutlierSelectivity>.421053:"CENTER FOR PRIMARY CARE - RINEHART"</OutlierSelectivity>
<AverageFieldSize>27.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," CENTER FOR PRIMARY CARE - AIKEN"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," CENTER FOR PRIMARY CARE - RINEHART"," COMMUNITY GENERAL HOSPITAL"," GET WELL CLINIC"," GET WELL CLINIC"," LOCAL COMMUNITY HOSPITAL"," LOCAL COMMUNITY HOSPITAL"," LOCAL COMMUNITY HOSPITAL ORGANIZATION"),$lb(2,2,1,27,36,36,36,36,36,2,1,17,1,26,25),$lb(536870912,0,0,0,0,0,1128615508,1095322437,1380535877,0,0,0,0,0,0,0,0,0,0,1162761285,1330466133,1129270605,1195725856,0,0,1195725856,1280262977,0,0,0,542069319,541871939))</Histogram>
</Property>
<Property name="LocationTelecom">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>13.32</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," TEL:+1-803-279-6800"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-335-2200"," TEL:+1-803-649-6941"," TEL:+1-803-649-6941"),$lb(2,2,2,2,2,1,12,21,21,21,21,21,21,12,21),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1413827642,842479917,858993965,0,0,0,0,0,0,0,0,0,0,0,0,858993965,909392173,0,0,542393676))</Histogram>
</Property>
<Property name="PerformerAddress">
<Selectivity>7.8947%</Selectivity>
<OutlierSelectivity>.526316:"131 Rinehart WayAikenSC29803-1703US"</OutlierSelectivity>
<AverageFieldSize>48.32</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 1006 HEALTHCARE DRIVE"_$c(10,9,9,9,9,9,9,9,9,9,9)_"PORTLAND"_$c(10,9,9,9,9,9,9,9,9,9,9)_"OR"_$c(10,9,9,9,9,9,9,9,9,9,9)_"97005"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," GET WELL CLINIC"_$c(10,9,9,9,9,9,9,9,9,9,9)_"1002 HEALTHCARE DR."_$c(10,9,9,9,9,9,9,9,9,9,9)_"PORTLAND"_$c(10,9,9,9,9,9,9,9,9,9,9)_"OR"_$c(10,9,9,9,9,9,9,9,9,9,9)_"97005"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," GET WELL CLINIC"_$c(10,9,9,9,9,9,9,9,9,9,9)_"1002 HEALTHCARE DR."_$c(10,9,9,9,9,9,9,9,9,9,9)_"PORTLAND"_$c(10,9,9,9,9,9,9,9,9,9,9)_"OR"_$c(10,9,9,9,9,9,9,9,9,9,9)_"97005"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," LOCAL COMMUNITY HOSPITAL"_$c(10,9,9,9,9,9,9,9,9,9,9)_"1034 HEALTHCARE DR."_$c(10,9,9,9,9,9,9,9,9,9,9)_"PORTLAND"_$c(10,9,9,9,9,9,9,9,9,9,9)_"OR"_$c(10,9,9,9,9,9,9,9,9,9,9)_"97005"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," LOCAL COMMUNITY HOSPITAL"_$c(10,9,9,9,9,9,9,9,9,9,9)_"1034 HEALTHCARE DR."_$c(10,9,9,9,9,9,9,9,9,9,9)_"PORTLAND"_$c(10,9,9,9,9,9,9,9,9,9,9)_"OR"_$c(10,9,9,9,9,9,9,9,9,9,9)_"97005"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"),$lb(2,2,1,2,37,37,37,37,37,37,37,1,203,1,212),$lb(536870912,0,0,0,0,0,825241654,808465952,858857554,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825438496,1195725856,0,0,1195725856,1280262977,0,0,541871939))</Histogram>
</Property>
<Property name="PerformerID">
<Selectivity>8.7719%</Selectivity>
<OutlierSelectivity>.473684:1563795232001410</OutlierSelectivity>
<AverageFieldSize>13.74</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 1111111111"," 1111111111"," 1111111111"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1756637090189700"," 1912138983"),$lb(2,2,1,12,12,2,18,18,18,18,18,18,18,2,2),$lb(536870912,0,0,0,0,0,825307441,0,0,0,0,825307441,892744503,0,0,0,0,0,0,0,0,0,0,0,0,0,0,892744503,926234166,926234166,959525425,540096817))</Histogram>
</Property>
<Property name="PerformerName">
<Selectivity>4.7847%</Selectivity>
<OutlierSelectivity>.473684:"RobynF.Fallaw MD"</OutlierSelectivity>
<AverageFieldSize>23.95</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," ADMIT"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"AARON"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"DR"," DALE"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"OWENS"," MARIA CAROLINACUNHA PINHEIROMACHADO MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," ROBYNF.FALLAW MD"," SEVEN"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"HENRY"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"DR"," SEVEN"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"HENRY"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"L"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"DR"," STAGE"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"STANLEY"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"DR"," STAGE"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"STANLEY"_$c(10,9,9,9,9,9,9,9,9,9,9,9)_"DR"),$lb(2,1,1,1,1,18,18,18,18,18,18,1,75,2,80),$lb(536870912,0,0,0,1094995273,1094995273,1145130053,1145130053,1296126537,1296126537,1380926041,0,0,0,0,0,0,0,0,0,0,0,0,1380926041,1397052997,0,0,1163281742,1413564229,0,0,542331969))</Histogram>
</Property>
<Property name="PerformerTelecom">
<Selectivity>6.5789%</Selectivity>
<OutlierSelectivity>.473684:"tel:+1-803-279-6800"</OutlierSelectivity>
<AverageFieldSize>18.24</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," TEL:+1-(555)555-1002"," TEL:+1-(555)555-1006"," TEL:+1-(555)555-1034"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-279-6800"," TEL:+1-803-335-2200"," TEL:+1-803-349-8028"),$lb(2,2,1,20,19,8,21,21,21,21,21,21,21,12,13),$lb(536870912,0,0,0,0,0,1413827642,838860800,905969664,808845312,859045888,674575669,942682925,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842479917,858993965,859122994,876162360,542393676))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="ReasonForVisit">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StartDateTime">
<Selectivity>3.7037%</Selectivity>
<AverageFieldSize>16.79</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 20111101090051"," 20120806090051"," 20130130090051"," 20161024000000-0400"," 20170214000000-0500"," 20180820000000-0400"," 20190911000000-0400"," 20200605000000-0400"," 20200706000000-0400"," 20210520000000-0400"," 20220111000000-0500"," 20220711000000-0400"," 20230117000000-0500"),$lb(2,2,1,4,4,4,4,4,4,3,6,4,4,6,4),$lb(536870912,0,0,0,0,0,842019121,825307440,842020912,842020912,858796339,858796339,909193266,909193266,925905457,925905457,942684210,942684210,959461681,825831481,842018870,909129008,925906480,808466224,825242930,825242930,842019121,825307440,925970736,842020657,858796337,540160050))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6.97</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(2,2,2,2,2,1,11,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="VisitDescription">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-12</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDFamilyHistory">
<Super>%Persistent</Super>
<TimeChanged>67290,36663.6829304</TimeChanged>
<TimeCreated>67081,42184.6464751</TimeCreated>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="RelativePerson">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OnsetAge">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RelativeCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RelativeCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationIDOid">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthDB04.CCDFamilyHi189AD</DataLocation>
<DefaultData>CCDFamilyHistoryDefaultData</DefaultData>
<IdLocation>^LEADNorthDB04.CCDFamilyHi189AD</IdLocation>
<IndexLocation>^LEADNorthDB04.CCDFamilyHi189AI</IndexLocation>
<StreamLocation>^LEADNorthDB04.CCDFamilyHi189AS</StreamLocation>
<ExtentSize>3</ExtentSize>
<Data name="CCDFamilyHistoryDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentID</Value>
</Value>
<Value name="3">
<Value>RelativePerson</Value>
</Value>
<Value name="4">
<Value>OnsetAge</Value>
</Value>
<Value name="5">
<Value>StatusCode</Value>
</Value>
<Value name="6">
<Value>ObservationCode</Value>
</Value>
<Value name="7">
<Value>ObservationSystem</Value>
</Value>
<Value name="8">
<Value>RelativeCode</Value>
</Value>
<Value name="9">
<Value>RelativeCodeSystem</Value>
</Value>
<Value name="10">
<Value>ObservationDisplayName</Value>
</Value>
<Value name="11">
<Value>ObservationID</Value>
</Value>
<Value name="12">
<Value>ObservationIDOid</Value>
</Value>
<Value name="13">
<Value>XPath</Value>
</Value>
<Value name="14">
<Value>ProfileID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="DocumentID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="ObservationCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>10.67</AverageFieldSize>
</Property>
<Property name="ObservationDisplayName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>10.67</AverageFieldSize>
</Property>
<Property name="ObservationID">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<Property name="ObservationIDOid">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>25</AverageFieldSize>
</Property>
<Property name="ObservationSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>24</AverageFieldSize>
</Property>
<Property name="OnsetAge">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>10</AverageFieldSize>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="RelativeCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>10.33</AverageFieldSize>
</Property>
<Property name="RelativeCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>24</AverageFieldSize>
</Property>
<Property name="RelativePerson">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>8.33</AverageFieldSize>
</Property>
<Property name="StatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDFunctionalStatus">
<Super>%Persistent</Super>
<TimeChanged>67290,36659.8016351</TimeChanged>
<TimeCreated>67081,42147.204136</TimeCreated>

<Property name="FunctionalStatusID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="xDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthDB04.CCDFunction6E73D</DataLocation>
<DefaultData>CCDFunctionalStatusDefaultData</DefaultData>
<IdLocation>^LEADNorthDB04.CCDFunction6E73D</IdLocation>
<IndexLocation>^LEADNorthDB04.CCDFunction6E73I</IndexLocation>
<StreamLocation>^LEADNorthDB04.CCDFunction6E73S</StreamLocation>
<ExtentSize>22</ExtentSize>
<Data name="CCDFunctionalStatusDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FunctionalStatusID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>Status</Value>
</Value>
<Value name="5">
<Value>xDate</Value>
</Value>
<Value name="6">
<Value>Description</Value>
</Value>
<Value name="7">
<Value>StatusCode</Value>
</Value>
<Value name="8">
<Value>ObservationCode</Value>
</Value>
<Value name="9">
<Value>ObservationSystem</Value>
</Value>
<Value name="10">
<Value>EffectiveTime</Value>
</Value>
<Value name="11">
<Value>ProfileID</Value>
</Value>
<Value name="12">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","10","12","14","15","16","17","18","19","20","21","22"),$lb(0,0,0,0,0,1,1,1,1,1,1,1,0,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,825229312,805306368,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,825819136,842006528,805306368,822083584,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="Description">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>14.36</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," COGNITIVE FUNCTION FINDING"," DEPENDENT"," HGB"),$lb(2,2,2,2,2,1,28,28,28,28,28,28,28,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1129269070,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1129269070,1145393221,1145393221,1212629504,541607746))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>4.5455%</Selectivity>
<AverageFieldSize>3.59</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","10","12","14","15","16","17","18","19","20","21","22"),$lb(0,0,0,0,0,1,1,1,1,1,1,1,0,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,825229312,805306368,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,825819136,842006528,805306368,822083584,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="EffectiveTime">
<Selectivity>4.5455%</Selectivity>
<OutlierSelectivity>.909091:</OutlierSelectivity>
<AverageFieldSize>2.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," 200003231430"," 20230815"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,1,3),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842018864,808464435,842215480,540160050))</Histogram>
</Property>
<Property name="FunctionalStatusID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationCode">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>6.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 373930000"," 373930000"," 373930000"," 373930000"," 373930000"," 373930000"," 373930000"," 373930000"," 373930000"," 410519009"),$lb(2,2,2,2,2,1,11,11,11,11,11,11,11,11,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,859255609,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,859255609,875638837,540291376))</Histogram>
</Property>
<Property name="ObservationSystem">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>13.95</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(2,2,2,2,2,1,24,24,24,24,24,24,24,24,24),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"," TESTING99"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(542393683,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542393683))</Histogram>
</Property>
<Property name="Status">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>2.55</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"),$lb(2,2,2,2,2,1,3,3,3,3,3,3,3,3,3),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540082176))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(2,2,2,2,2,1,11,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="xDate">
<Selectivity>4.5455%</Selectivity>
<OutlierSelectivity>.909091:</OutlierSelectivity>
<AverageFieldSize>2.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," 200003231430"," 20230815"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,1,3),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842018864,808464435,842215480,540160050))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDGoals">
<Super>%Persistent</Super>
<TimeChanged>67290,35914.478502</TimeChanged>
<TimeCreated>67178,59527.9728602</TimeCreated>

<Property name="GoalID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="GoalDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GoalCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GoalCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GoalCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GoalStatus">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EndDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.LEADNorDB04.CCDGoalsD</DataLocation>
<DefaultData>CCDGoalsDefaultData</DefaultData>
<IdLocation>^LEADNorth.LEADNorDB04.CCDGoalsD</IdLocation>
<IndexLocation>^LEADNorth.LEADNorDB04.CCDGoalsI</IndexLocation>
<StreamLocation>^LEADNorth.LEADNorDB04.CCDGoalsS</StreamLocation>
<Data name="CCDGoalsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>GoalID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>GoalDescription</Value>
</Value>
<Value name="5">
<Value>GoalCode</Value>
</Value>
<Value name="6">
<Value>GoalCodeSystem</Value>
</Value>
<Value name="7">
<Value>GoalCodeSystemName</Value>
</Value>
<Value name="8">
<Value>GoalStatus</Value>
</Value>
<Value name="9">
<Value>StartDate</Value>
</Value>
<Value name="10">
<Value>EndDate</Value>
</Value>
<Value name="11">
<Value>AuthorTime</Value>
</Value>
<Value name="12">
<Value>AuthorName</Value>
</Value>
<Value name="13">
<Value>ProfileID</Value>
</Value>
<Value name="14">
<Value>XPath</Value>
</Value>
<Value name="15">
<Value>SDAMapping</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDImmunization">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.25901</TimeChanged>
<TimeCreated>67081,42042.2214135</TimeCreated>

<Property name="ImmunizationID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="Route">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Dose">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DoseUnit">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Vaccine">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="VaccineCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="VaccineCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="VaccineCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LotNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EndDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerCity">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerState">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerPostalCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="NullFlavor">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthF8FE.CCDImmunizaAE0ED</DataLocation>
<DefaultData>CCDImmunizationDefaultData</DefaultData>
<IdLocation>^LEADNorthF8FE.CCDImmunizaAE0ED</IdLocation>
<IndexLocation>^LEADNorthF8FE.CCDImmunizaAE0EI</IndexLocation>
<StreamLocation>^LEADNorthF8FE.CCDImmunizaAE0ES</StreamLocation>
<ExtentSize>27</ExtentSize>
<Data name="CCDImmunizationDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ImmunizationID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>Route</Value>
</Value>
<Value name="5">
<Value>Dose</Value>
</Value>
<Value name="6">
<Value>DoseUnit</Value>
</Value>
<Value name="7">
<Value>Vaccine</Value>
</Value>
<Value name="8">
<Value>VaccineCode</Value>
</Value>
<Value name="9">
<Value>VaccineCodeSystem</Value>
</Value>
<Value name="10">
<Value>VaccineCodeSystemName</Value>
</Value>
<Value name="11">
<Value>LotNumber</Value>
</Value>
<Value name="12">
<Value>StartDate</Value>
</Value>
<Value name="13">
<Value>EndDate</Value>
</Value>
<Value name="14">
<Value>PerformerID</Value>
</Value>
<Value name="15">
<Value>PerformerAddress</Value>
</Value>
<Value name="16">
<Value>PerformerCity</Value>
</Value>
<Value name="17">
<Value>PerformerState</Value>
</Value>
<Value name="18">
<Value>PerformerPostalCode</Value>
</Value>
<Value name="19">
<Value>StatusCode</Value>
</Value>
<Value name="20">
<Value>NullFlavor</Value>
</Value>
<Value name="21">
<Value>XPath</Value>
</Value>
<Value name="22">
<Value>ProfileID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","10","12","14","16","18","20","22","24","25","26","27"),$lb(0,0,0,0,0,1,1,1,1,0,1,1,1,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,825229312,805306368,838860800,838860800,872415232,872415232,905969664,905969664,939524096,825753600,842006528,805306368,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,842465280))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>6.6667%</Selectivity>
<AverageFieldSize>3.52</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","7","7","8","8","10","10","11","11","13","15","16","17","22"),$lb(0,0,0,1,0,1,0,2,1,2,1,1,1,1,0),$lb(822083584,822083584,838860800,838860800,872415232,872415232,922746880,0,0,922746880,939524096,0,0,939524096,825229312,0,0,805306368,822083584,0,0,822083584,855638016,855638016,889192448,889192448,905969664,905969664,922746880,825688064,842137600,842137600))</Histogram>
</Property>
<Property name="Dose">
<Selectivity>6.1728%</Selectivity>
<OutlierSelectivity>.814815:</OutlierSelectivity>
<AverageFieldSize>2.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," 0.25"," 0.3"," 0.3"," 0.5"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,3,5,3),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,808333877,842334208,855638016,0,0,855638016,889192448,540028469))</Histogram>
</Property>
<Property name="DoseUnit">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>2.37</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," ML"," ML"," ML"," ML"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,4,4,4),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1296826368,0,0,0,0,0,0,541936640))</Histogram>
</Property>
<Property name="EndDate">
<Selectivity>3.7037%</Selectivity>
<OutlierSelectivity>.851852:</OutlierSelectivity>
<AverageFieldSize>3.19</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," 20210920"," 20211010"," 20220101"," 20220515"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,5,4,6),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019377,809054768,825241904,825307185,842019120,825241856,892417280,540160050))</Histogram>
</Property>
<Property name="ImmunizationID">
<Selectivity>6.6667%</Selectivity>
<OutlierSelectivity>.666667:</OutlierSelectivity>
<AverageFieldSize>5.11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 637382500009"," 637382500009"," IMM001"," IMM002"," IMM003"," IMM004"),$lb(2,2,2,2,2,2,2,2,2,1,14,1,6,6,6),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,909326131,0,0,909326131,1229802800,822083584,838860800,838860800,855638016,855638016,872415232,541674829))</Histogram>
</Property>
<Property name="LotNumber">
<Selectivity>3.7037%</Selectivity>
<OutlierSelectivity>.851852:</OutlierSelectivity>
<AverageFieldSize>3.3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," COV654321"," FLU12345"," HEP321654"," TET789012"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,1,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1129272886,1129272886,1179407665,1179407665,1212502067,1212502067,1413829687,542393684))</Histogram>
</Property>
<Property name="NullFlavor">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="PerformerAddress">
<Selectivity>4.2328%</Selectivity>
<OutlierSelectivity>.703704:</OutlierSelectivity>
<AverageFieldSize>6.33</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 1004 HEALTHCARE DR."," 4444 HOSPITAL WAY"," 456 HEALTH ST"," 789 CARE RD"," 987 MEDICAL ST"," GET WELL CLINIC"),$lb(2,2,2,2,2,2,2,2,2,1,1,2,1,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825241652,825241652,875836468,875836448,892739656,875902496,926431520,926431520,959985440,959985440,1195725856,541541716))</Histogram>
</Property>
<Property name="PerformerCity">
<Selectivity>5.9259%</Selectivity>
<OutlierSelectivity>.703704:</OutlierSelectivity>
<AverageFieldSize>4.41</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," AIKEN"," COLUMBIA"," PORTLAND"," PORTLAND"," PORTLAND"," PORTLAND"),$lb(2,2,2,2,2,2,2,2,2,1,1,1,10,10,10),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095322437,1095322437,1129270357,1129270357,1347375700,0,0,0,0,0,0,542134098))</Histogram>
</Property>
<Property name="PerformerID">
<Selectivity>6.6667%</Selectivity>
<OutlierSelectivity>.666667:</OutlierSelectivity>
<AverageFieldSize>4.07</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 192837465"," 3333"," 3333"," 3333"," 876543219"," 987654321"),$lb(2,2,2,2,2,2,2,2,2,1,1,6,6,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825831992,825831992,858993459,0,0,0,0,858993459,943142453,943142453,959985462,540620855))</Histogram>
</Property>
<Property name="PerformerPostalCode">
<Selectivity>4.9383%</Selectivity>
<OutlierSelectivity>.703704:</OutlierSelectivity>
<AverageFieldSize>3.52</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 29201"," 29601"," 97005"," 97005"," 97005"," 97005-"),$lb(2,2,2,2,2,2,2,2,2,1,3,1,7,7,6),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842609200,842019072,909127936,842610224,959918128,0,0,0,0,0,754974720,540620592))</Histogram>
</Property>
<Property name="PerformerState">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>2.59</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," OR"," OR"," SC"," SC"," SC"," SC"),$lb(2,2,2,2,2,2,2,2,2,1,4,1,4,4,4),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1330774016,0,0,1330774016,1396899840,0,0,0,0,0,0,542327552))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="Route">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>17.04</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," INTRAMUSCULAR"," INTRAMUSCULAR"," INTRAMUSCULAR"," INTRAMUSCULAR"," INTRAMUSCULAR"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"," INTRAMUSCULAR INJECTION"),$lb(2,2,1,15,15,15,15,14,25,25,25,25,25,25,25),$lb(536870912,0,0,0,0,0,1229870162,0,0,0,0,0,0,0,0,0,541675082,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541675092))</Histogram>
</Property>
<Property name="StartDate">
<Selectivity>4.1667%</Selectivity>
<OutlierSelectivity>.333333:19981215</OutlierSelectivity>
<AverageFieldSize>11.44</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 19981215"," 19981215"," 19981215"," 19981215"," 19981215"," 199911"," 199911"," 20120330"," 20120815"," 20130710220200.000-0500"," 20140212130251"," 20140212130357"," 20210920"," 20211010"," 20220101"," 20220515"),$lb(10,10,10,10,4,8,1,6,4,4,12,3,5,4,6),$lb(540096825,0,0,0,0,0,0,0,0,942748209,959525120,0,0,825833785,842019122,858992640,942748928,842020913,858797873,858797873,875573809,842346752,859125504,825503794,842084409,809054768,825241904,825307185,842019120,825241856,892417280,540160050))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="Vaccine">
<Selectivity>7.4074%</Selectivity>
<OutlierSelectivity>.407407:"Influenza virus vaccine"</OutlierSelectivity>
<AverageFieldSize>24.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," COVID-19 VACCINE"," INFLUENZA VACCINE"," INFLUENZA VIRUS VACCINE"," INFLUENZA VIRUS VACCINE"," INFLUENZA VIRUS VACCINE"," INFLUENZA VIRUS VACCINE"," INFLUENZA VIRUS VACCINE"," INFLUENZA VIRUS VACCINE, INACTIVATED"," PNEUMOCOCCAL POLYSACCHARIDE VACCINE"," TETANUS AND DIPHTHERIA TOXOIDS - PRESERVATIVE FREE"," TETANUS AND DIPHTHERIA TOXOIDS - PRESERVATIVE FREE"," TETANUS AND DIPHTHERIA TOXOIDS - PRESERVATIVE FREE"," TETANUS VACCINE"),$lb(2,2,1,1,12,25,25,25,25,24,1,1,52,52,9),$lb(536870912,0,0,0,0,0,1129272905,1129272905,1229866572,1094927177,1230132563,0,0,0,0,0,0,0,0,0,740313422,1229866572,1347306837,1347306837,1413829697,0,0,0,0,1095648288,1447117635,542393684))</Histogram>
</Property>
<Property name="VaccineCode">
<Selectivity>7.9365%</Selectivity>
<OutlierSelectivity>.444444:88</OutlierSelectivity>
<AverageFieldSize>4.33</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 103"," 103"," 321654"," 33"," 654321"," 88"," 88"," 88"," 88"," 88"," 88"," 88"," 88"),$lb(2,2,1,5,1,2,1,1,4,4,4,4,4,4,4),$lb(536870912,0,0,0,0,0,825242368,0,0,825242368,858927414,842085941,855638016,858980352,909456435,909456435,943194112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540555264))</Histogram>
</Property>
<Property name="VaccineCodeSystem">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>20.37</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 2.16.840.1.113883.12.292"," 2.16.840.1.113883.12.292"," 2.16.840.1.113883.12.292"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.59"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"," 2.16.840.1.113883.6.88"),$lb(2,2,1,26,26,19,24,24,24,24,24,21,24,24,24),$lb(536870912,0,0,0,0,0,841888054,0,0,0,0,825372210,908997945,0,0,0,0,0,0,0,0,0,0,892928000,943194112,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="VaccineCodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"," CVX"),$lb(2,2,2,2,1,5,5,5,5,5,5,5,5,5,5),$lb(536870912,0,0,0,0,0,0,0,0,0,1129732096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541283928))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDImplants">
<Super>%Persistent</Super>
<TimeChanged>67326,53370.1637552</TimeChanged>
<TimeCreated>67178,59647.7539688</TimeCreated>

<Property name="ImplantID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="DeviceName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DeviceCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DeviceCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DeviceCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ManufacturerModelName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SerialNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ImplantStatus">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ImplantDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RemovalDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAPF8FE.CCDImplantsD</DataLocation>
<DefaultData>CCDImplantsDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAPF8FE.CCDImplantsD</IdLocation>
<IndexLocation>^LEADNorth.CDAPF8FE.CCDImplantsI</IndexLocation>
<StreamLocation>^LEADNorth.CDAPF8FE.CCDImplantsS</StreamLocation>
<Data name="CCDImplantsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ImplantID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>DeviceName</Value>
</Value>
<Value name="5">
<Value>DeviceCode</Value>
</Value>
<Value name="6">
<Value>DeviceCodeSystem</Value>
</Value>
<Value name="7">
<Value>DeviceCodeSystemName</Value>
</Value>
<Value name="8">
<Value>ManufacturerModelName</Value>
</Value>
<Value name="9">
<Value>SerialNumber</Value>
</Value>
<Value name="10">
<Value>ImplantStatus</Value>
</Value>
<Value name="11">
<Value>ImplantDate</Value>
</Value>
<Value name="12">
<Value>RemovalDate</Value>
</Value>
<Value name="13">
<Value>AuthorTime</Value>
</Value>
<Value name="14">
<Value>ProfileID</Value>
</Value>
<Value name="15">
<Value>XPath</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDMedication">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.2681706</TimeChanged>
<TimeCreated>67081,41547.2585324</TimeCreated>

<Property name="MedicationID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="DrugName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GenericName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Dose">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DoseUnits">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Frequency">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Route">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Site">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AdministrationUnit">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EndDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Provider">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="NDC">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RxNormCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GPI">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDF8FE.CCDMedicationD</DataLocation>
<DefaultData>CCDMedicationDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDF8FE.CCDMedicationD</IdLocation>
<IndexLocation>^LEADNorth.CDF8FE.CCDMedicationI</IndexLocation>
<StreamLocation>^LEADNorth.CDF8FE.CCDMedicationS</StreamLocation>
<ExtentSize>65</ExtentSize>
<Data name="CCDMedicationDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MedicationID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>DrugName</Value>
</Value>
<Value name="5">
<Value>GenericName</Value>
</Value>
<Value name="6">
<Value>Dose</Value>
</Value>
<Value name="7">
<Value>DoseUnits</Value>
</Value>
<Value name="8">
<Value>Frequency</Value>
</Value>
<Value name="9">
<Value>Route</Value>
</Value>
<Value name="10">
<Value>Site</Value>
</Value>
<Value name="11">
<Value>AdministrationUnit</Value>
</Value>
<Value name="12">
<Value>StartDate</Value>
</Value>
<Value name="13">
<Value>EndDate</Value>
</Value>
<Value name="14">
<Value>Provider</Value>
</Value>
<Value name="15">
<Value>NDC</Value>
</Value>
<Value name="16">
<Value>RxNormCode</Value>
</Value>
<Value name="17">
<Value>GPI</Value>
</Value>
<Value name="18">
<Value>Status</Value>
</Value>
<Value name="19">
<Value>NullValues</Value>
</Value>
<Value name="20">
<Value>SDAMapping</Value>
</Value>
<Value name="21">
<Value>XPath</Value>
</Value>
<Value name="22">
<Value>ProfileID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","5","10","15","20","25","29","33","37","41","45","49","53","57","61","65"),$lb(0,0,1,0,1,1,0,1,0,1,1,0,1,0,1),$lb(822083584,822083584,889192448,889192448,825229312,805306368,889192448,825556992,842006528,805306368,889192448,889192448,956301312,842596352,858980352,855638016,922746880,859242496,875626496,822083584,889192448,889192448,956301312,876150784,892534784,855638016,922746880,892796928,909180928,822083584,889192448,909443072))</Histogram>
</Property>
<Property name="AdministrationUnit">
<Selectivity>4.1026%</Selectivity>
<OutlierSelectivity>.753846:</OutlierSelectivity>
<AverageFieldSize>4.2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," AEROSOL, METERED"," INHALANT"," TABLET"," TABLET"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,1,1,8),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095062095,1095062095,1229867073,1229867073,1413562956,0,0,542392642))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>2.9808%</Selectivity>
<OutlierSelectivity>.523077:8</OutlierSelectivity>
<AverageFieldSize>3.28</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","8","8","8","8","8","8","8","8","13","17","19","21","22"),$lb(0,0,0,1,1,1,1,1,1,1,0,1,1,0,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,939524096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,939524096,825425920,855638016,922746880,922746880,956301312,825819136,842072064,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="Dose">
<Selectivity>3.7762%</Selectivity>
<OutlierSelectivity>.584615:</OutlierSelectivity>
<AverageFieldSize>2.78</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," 1"," 1"," 1"," 15.0"," 2"," 20"," 75.0"),$lb(2,2,2,2,2,2,2,2,1,3,3,2,1,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,0,0,0,892219392,825568816,838860800,0,805306368,842006528,926232112,540489006))</Histogram>
</Property>
<Property name="DoseUnits">
<Selectivity>3.9560%</Selectivity>
<OutlierSelectivity>.723077:</OutlierSelectivity>
<AverageFieldSize>3.03</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 1"," 1"," MG/3ML"," UNITS"," {TABLET}"),$lb(2,2,2,2,2,2,2,2,2,2,1,3,1,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,822083584,1296510771,1296510771,1431193940,1431193940,2069119298,544953409))</Histogram>
</Property>
<Property name="DrugName">
<Selectivity>2.3701%</Selectivity>
<OutlierSelectivity>.123077:</OutlierSelectivity>
<AverageFieldSize>21.46</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," ????"," ALBUTEROL 0.09 MG/ACTUAT INHALANT SOLUTION"," ATORVASTATIN 40 MG ORAL TABLET"," CEFTRIAXONE 2 GRAMS IV"," CLOTRIMAZOLE-BETAMETHASONE"," DICLOFENAC EPOLAMINE"," FAMOTIDINE"," HYDROCHLOROTHIAZIDE"," INSULIN GLARGINE 100 UNT/ML INJECTABLE SOLUTION"," LISINOPRIL"," MULTIPLE VITAMINS-MINERALS"," OLOPATADINE"," PROVENTIL 0.09 MG/ACTUAT METERED DOSE"," TURMERIC CAPSULE"),$lb(2,1,1,2,1,2,1,1,1,1,1,1,1,1,1),$lb(536870912,0,0,0,1061109567,1061109567,1095516757,1279415636,1414484566,1096044370,1128613460,1162237010,1280267346,1129074516,1145652044,1145652044,1178684751,1178684751,1213809746,1213809746,1229869909,1229869909,1279873865,1279873865,1297435732,1297435732,1330401104,1330401104,1347571542,1347571542,1414877773,542397778))</Histogram>
</Property>
<Property name="EndDate">
<Selectivity>3.0769%</Selectivity>
<OutlierSelectivity>.692308:</OutlierSelectivity>
<AverageFieldSize>6.83</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 20120301"," 20181019000000-0400"," 20200601000000-0400"," 20200706000000-0400"," 20230117000000-0500"),$lb(2,2,2,2,2,2,2,2,2,2,1,4,3,6,4),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019122,842019632,942747697,825766192,842018870,909127984,925906480,808466224,858796337,540160050))</Histogram>
</Property>
<Property name="Frequency">
<Selectivity>6.5385%</Selectivity>
<OutlierSelectivity>.738462:</OutlierSelectivity>
<AverageFieldSize>2.4</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 12"," 24"," 24"," 6"," 8"),$lb(2,2,2,2,2,2,2,2,2,2,1,1,4,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825360384,825360384,842268672,0,0,842268672,905969664,905969664,939524096,540540928))</Histogram>
</Property>
<Property name="GPI">
<Selectivity>3.3846%</Selectivity>
<OutlierSelectivity>.492308:</OutlierSelectivity>
<AverageFieldSize>8.92</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," 22100045000320"," 24000035008705"," 37600040000305"," 42200032301810"," 75100050100305"," 78310000000300"," 7910990310"," 90159902053710"," 9560635600"),$lb(2,2,2,2,2,2,1,2,1,1,1,2,2,1,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,842150192,842084400,875573296,842281008,859256368,859256368,875704880,875704880,926232880,892416048,942879024,942879024,959524921,926495024,959459637,808531257,892743734,540620086))</Histogram>
</Property>
<Property name="GenericName">
<Selectivity>3.0769%</Selectivity>
<OutlierSelectivity>.907692:</OutlierSelectivity>
<AverageFieldSize>5.55</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," NOVOLOG"," PROVENTIL 0.09 MG/ACTUAT INHALANT SOLUTION"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1313822287,1313822287,1347571542,542134863))</Histogram>
</Property>
<Property name="MedicationID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="NDC">
<Selectivity>2.4814%</Selectivity>
<OutlierSelectivity>.230769:</OutlierSelectivity>
<AverageFieldSize>6.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," 1152108"," 1797907"," 198145"," 243670"," 284810"," 310273"," 310798"," 314076"," 329498"," 617311"," 828348"," 860978"),$lb(2,2,2,1,2,2,1,2,1,4,3,2,1,1,2),$lb(536870912,0,0,0,0,0,0,0,825308466,825569841,926496569,926496569,959983924,825833521,842281782,875771447,942946353,842544184,858861618,842478336,926496768,808925496,875575094,825503799,842609721,858929460,909195059,909195059,942815283,842543924,909130039,540554800))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="Provider">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="Route">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>7.08</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," EXT"," INTRAVENOUS"," ORAL"," ORAL"," ORAL"," ORAL"," ORAL"," ORAL"," ORAL"," RESPIRATORY (INHALATION)"," RESPIRATORY (INHALATION)"," TRANS"),$lb(2,2,2,1,1,1,6,6,6,6,6,6,1,26,1),$lb(536870912,0,0,0,0,0,0,0,1163416576,1163416576,1229870162,1229870162,1330790732,0,0,0,0,0,0,0,0,0,0,0,0,1330790732,1380275024,0,0,1380275024,1414676814,542396993))</Histogram>
</Property>
<Property name="RxNormCode">
<Selectivity>2.4814%</Selectivity>
<OutlierSelectivity>.230769:</OutlierSelectivity>
<AverageFieldSize>6.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," 1152108"," 1797907"," 198145"," 243670"," 284810"," 310273"," 310798"," 314076"," 329498"," 617311"," 828348"," 860978"),$lb(2,2,2,1,2,2,1,2,1,4,3,2,1,1,2),$lb(536870912,0,0,0,0,0,0,0,825308466,825569841,926496569,926496569,959983924,825833521,842281782,875771447,942946353,842544184,858861618,842478336,926496768,808925496,875575094,825503799,842609721,858929460,909195059,909195059,942815283,842543924,909130039,540554800))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="Site">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StartDate">
<Selectivity>3.0303%</Selectivity>
<AverageFieldSize>18.49</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 20080808215400.000-0500"," 20090109215300.000-0600"," 20110301"," 20120219"," 20130130"," 20140212130251"," 20161024000000-0400"," 20161024000000-0400"," 20170214000000-0500"," 20180820000000-0400"," 20180820000000-0400"," 20200601000000-0400"," 20200601000000-0400"," 20210111000000-0500"," 20220301000000-0500"),$lb(1,4,3,4,4,4,4,21,4,4,21,3,21,4,4),$lb(536870912,0,842018872,942684208,959459632,809054257,825307187,825242416,842019377,842019377,858796339,858796339,875573809,875573809,909193266,0,0,909193266,925905457,925905457,942684210,0,0,825765944,842018870,0,0,808465968,825241905,825241905,842019632,540160050))</Histogram>
</Property>
<Property name="Status">
<Selectivity>6.1538%</Selectivity>
<OutlierSelectivity>.876923:"completed"</OutlierSelectivity>
<AverageFieldSize>10.69</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACTIVE"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," ORDERED"),$lb(1,11,11,11,11,11,11,11,11,11,11,11,11,11,1),$lb(541147988,1094931529,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1129270608,1330791493,542069316))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-8</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDPatient">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.5196637</TimeChanged>
<TimeCreated>67081,46573.0506682</TimeCreated>

<Property name="PatientMRN">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DOB">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="GenderCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="GenderDisplay">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="GenderSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Address">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="State">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ZipCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Country">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PhoneNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LanguageCode">
<Type>%String</Type>
</Property>

<Property name="MaritalStatusCode">
<Type>%String</Type>
</Property>

<Property name="MaritalStatusDisplay">
<Type>%String</Type>
</Property>

<Property name="MaritalStatusSystem">
<Type>%String</Type>
</Property>

<Property name="RaceCode">
<Type>%String</Type>
</Property>

<Property name="RaceDisplay">
<Type>%String</Type>
</Property>

<Property name="RaceSystem">
<Type>%String</Type>
</Property>

<Property name="EthnicityCode">
<Type>%String</Type>
</Property>

<Property name="EthnicityDisplay">
<Type>%String</Type>
</Property>

<Property name="EthnicitySystem">
<Type>%String</Type>
</Property>

<Property name="InsurancePolicyNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="InsuranceProvider">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAPrF8FE.CCDPatientD</DataLocation>
<DefaultData>CCDPatientDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAPrF8FE.CCDPatientD</IdLocation>
<IndexLocation>^LEADNorth.CDAPrF8FE.CCDPatientI</IndexLocation>
<StreamLocation>^LEADNorth.CDAPrF8FE.CCDPatientS</StreamLocation>
<ExtentSize>22</ExtentSize>
<Data name="CCDPatientDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientMRN</Value>
</Value>
<Value name="3">
<Value>FirstName</Value>
</Value>
<Value name="4">
<Value>LastName</Value>
</Value>
<Value name="5">
<Value>DOB</Value>
</Value>
<Value name="6">
<Value>GenderCode</Value>
</Value>
<Value name="7">
<Value>GenderDisplay</Value>
</Value>
<Value name="8">
<Value>GenderSystem</Value>
</Value>
<Value name="9">
<Value>Address</Value>
</Value>
<Value name="10">
<Value>City</Value>
</Value>
<Value name="11">
<Value>State</Value>
</Value>
<Value name="12">
<Value>ZipCode</Value>
</Value>
<Value name="13">
<Value>Country</Value>
</Value>
<Value name="14">
<Value>PhoneNumber</Value>
</Value>
<Value name="15">
<Value>Email</Value>
</Value>
<Value name="16">
<Value>LanguageCode</Value>
</Value>
<Value name="17">
<Value>MaritalStatusCode</Value>
</Value>
<Value name="18">
<Value>MaritalStatusDisplay</Value>
</Value>
<Value name="19">
<Value>MaritalStatusSystem</Value>
</Value>
<Value name="20">
<Value>RaceCode</Value>
</Value>
<Value name="21">
<Value>RaceDisplay</Value>
</Value>
<Value name="22">
<Value>RaceSystem</Value>
</Value>
<Value name="23">
<Value>EthnicityCode</Value>
</Value>
<Value name="24">
<Value>EthnicityDisplay</Value>
</Value>
<Value name="25">
<Value>EthnicitySystem</Value>
</Value>
<Value name="26">
<Value>InsurancePolicyNumber</Value>
</Value>
<Value name="27">
<Value>InsuranceProvider</Value>
</Value>
<Value name="28">
<Value>ProfileID</Value>
</Value>
<Value name="29">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","6","8","10","12","14","15","16","17","18","19","20","21","22"),$lb(0,0,0,0,0,1,1,1,1,1,1,1,0,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,905969664,905969664,939524096,939524096,825229312,805306368,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,825819136,842006528,805306368,822083584,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="Address">
<Selectivity>6.1983%</Selectivity>
<OutlierSelectivity>.318182:"17 Daws Rd."</OutlierSelectivity>
<AverageFieldSize>15.73</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 123 MAIN STREET"," 1234 SIX FORKS"," 1234 SIX FORKS"," 1234 SIX FORKS"," 17 DAWS RD."," 17 DAWS RD."," 17 DAWS RD."," 17 DAWS RD."," 2 ELECTRIC AVE"," 2324 MAIN STREET"," 266 YORK STREET"," 345 MAIN STREET"," 456 MAIN STREET"," 4567 RESIDENCE RD"," 567 MAIN STREET"," 8745 W WILLENOW RD"),$lb(4,16,16,2,13,13,13,1,2,2,1,1,4,1,1),$lb(540095027,541933897,874533705,0,0,0,0,842216480,924861505,0,0,0,0,0,0,825696324,840975692,541412421,858928160,858928160,909516889,842413600,859059488,859059488,875902496,541933897,924865093,875902519,892745504,892745504,943141941,540555060))</Histogram>
</Property>
<Property name="City">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>9.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" AIKEN"," BEAVERTON"," BLUE BELL"," BLUE BELL"," BLUE BELL"," BLUE BELL"," BOSTON"," BOSTON"," BOSTON"," MORTON"," PORTLAND"," PORTLAND"," PORTLAND"," PORTLAND"," PORTLAND"," SMALLVILLE"),$lb(1,2,11,11,11,2,8,8,1,1,10,10,10,10,1),$lb(541149515,1095322437,1111834966,1161909829,1280656672,0,0,0,0,0,0,1280656672,1330861135,0,0,0,0,1112494932,1297044052,1297044052,1347375700,0,0,0,0,0,0,0,0,1347375700,1397571916,542330177))</Histogram>
</Property>
<Property name="Country">
<Selectivity>4.5455%</Selectivity>
<OutlierSelectivity>.954545:"US"</OutlierSelectivity>
<AverageFieldSize>4.05</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," US"," USA"),$lb(4,4,4,4,4,4,4,4,4,4,4,4,4,4,3),$lb(542462720,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1090519040,542462785))</Histogram>
</Property>
<Property name="DOB">
<Selectivity>5.2448%</Selectivity>
<OutlierSelectivity>.318182:19541125</OutlierSelectivity>
<AverageFieldSize>10.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 19420621"," 19440101"," 19470407"," 19480202"," 19501015"," 19540202"," 19540323000000.000-0600"," 19541125"," 19541125"," 19541125"," 19541125"," 19541125"," 19541125"," 19621022"," 19621022"," 19801215"),$lb(4,4,4,3,4,6,5,10,10,10,10,10,3,10,3),$lb(540096820,842020402,875573552,875573552,925905968,925905968,942682672,876097586,892350768,808529969,875573808,842019328,858927920,808661555,825307701,0,0,0,0,0,0,0,0,0,0,892612913,909259056,0,0,909259056,942682418,540096824))</Histogram>
</Property>
<Property name="Email">
<Selectivity>4.5455%</Selectivity>
<OutlierSelectivity>.909091:</OutlierSelectivity>
<AverageFieldSize>4.55</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," MAILTO:EMAIL@GMAIL.COM"," MAILTO:ISBELLA.JONES.CCD@GMAIL.COM"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,1,8),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1296124236,1162690889,1230193221,541933897))</Histogram>
</Property>
<Property name="EthnicityCode">
<Selectivity>6.8182%</Selectivity>
<OutlierSelectivity>.863636:"2186-5"</OutlierSelectivity>
<AverageFieldSize>7.45</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"," 2186-5"),$lb(2,1,8,8,8,8,8,8,8,8,8,8,8,8,8),$lb(536870912,0,0,0,842086454,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540160312))</Histogram>
</Property>
<Property name="EthnicityDisplay">
<Selectivity>6.8182%</Selectivity>
<OutlierSelectivity>.863636:"Not Hispanic or Latino"</OutlierSelectivity>
<AverageFieldSize>21.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"," NOT HISPANIC OR LATINO"),$lb(2,1,24,24,24,24,24,24,24,24,24,24,24,24,24),$lb(536870912,0,0,0,1313821728,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542003028))</Histogram>
</Property>
<Property name="EthnicitySystem">
<Selectivity>9.0909%</Selectivity>
<OutlierSelectivity>.909091:"2.16.840.1.113883.6.238"</OutlierSelectivity>
<AverageFieldSize>22.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"),$lb(2,1,25,25,25,25,25,25,25,25,25,25,25,25,25),$lb(536870912,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="FirstName">
<Selectivity>4.9242%</Selectivity>
<OutlierSelectivity>.409091:"Adam"</OutlierSelectivity>
<AverageFieldSize>7.59</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ADAM"," ADAM"," ADAM"," ADAM"," ADAM"," EVE"," FOURTEST"," ISABELLA"," JOHN"," MARY"," MORTICIA"," ONETEST"," STEVE"," THREETEST"," TWOTEST"," VICTORIA"),$lb(6,6,6,6,1,1,1,1,1,2,1,1,1,2,1),$lb(541148225,0,0,0,0,0,0,0,0,1094992205,1163281664,1163281664,1179604306,1179604306,1230192962,1230192962,1246709838,1246709838,1296126553,1095915776,1330795593,1297044052,1330529620,1330529620,1398031702,1398031702,1414025797,1213351237,1464816709,1415008084,1447641940,542525763))</Histogram>
</Property>
<Property name="GenderCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" F"," F"," F"," F"," F"," M"," M"," M"," M"," M"," M"," M"," M"," M"," M"," M"),$lb(3,3,3,3,1,3,3,3,3,3,3,3,3,3,3),$lb(541458432,0,0,0,0,0,0,0,0,1174405120,1291845632,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541917184))</Histogram>
</Property>
<Property name="GenderDisplay">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>5.55</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," FEMALE"," FEMALE"," FEMALE"," MALE"," MALE"," MALE"," MALE"," MALE"," MALE"," MALE"," MALE"," MALE"),$lb(2,2,2,1,8,8,1,6,6,6,6,6,6,6,6),$lb(536870912,0,0,0,0,0,0,0,1178946881,0,0,0,0,1178946881,1296124997,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541933900))</Histogram>
</Property>
<Property name="GenderSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>23</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"," 2.16.840.1.113883.5.1"),$lb(23,23,23,23,23,23,23,23,23,23,23,23,23,23,23),$lb(540159537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="InsurancePolicyNumber">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="InsuranceProvider">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="LanguageCode">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>4.68</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," ENG"," ENG"," ENG"," ENG"," FR-CN"," FR-CN"," FR-CN"," FR-CN"," FR-CN"," FR-CN"," FR-CN"," ITA"),$lb(2,2,2,1,5,5,5,1,7,7,7,7,7,7,1),$lb(536870912,0,0,0,0,0,0,0,1162757888,0,0,0,0,0,0,1162757888,1179790659,0,0,0,0,0,0,0,0,0,0,0,0,1179790659,1230258432,541676609))</Histogram>
</Property>
<Property name="LastName">
<Selectivity>7.3864%</Selectivity>
<OutlierSelectivity>.409091:"Everyman"</OutlierSelectivity>
<AverageFieldSize>10.95</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ADAMS"," BWHCKDRISKTEST"," BWHCKDRISKTEST"," BWHCKDRISKTEST"," EVERYMAN"," EVERYMAN"," EVERYMAN"," EVERYMAN"," EVERYMAN"," EVERYMAN"," EVERYWOMAN"," JONES"," JONES"," WADE"," WILLIAMS"," WILLIAMSON"),$lb(1,16,16,1,10,10,10,10,10,6,1,7,1,2,9),$lb(541148225,1094992205,1113016387,0,0,0,0,1113016387,1163281746,0,0,0,0,0,0,0,0,0,0,1296125440,1464814913,1163281746,1246711365,0,0,1246711365,1463895109,1094993152,1229737033,0,1330511872,542591308))</Histogram>
</Property>
<Property name="MaritalStatusCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>2.41</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," M"," M"," M"," M"," M"," M"," M"," M"," S"),$lb(2,2,2,2,2,2,1,3,3,3,3,3,3,3,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,1291845632,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1291845632,1392508928,542310400))</Histogram>
</Property>
<Property name="MaritalStatusDisplay">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>4.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," MARRIED"," MARRIED"," MARRIED"," MARRIED"," MARRIED"," MARRIED"," MARRIED"," MARRIED"," SINGLE"),$lb(2,2,2,2,2,2,1,9,9,9,9,9,9,9,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,1296126546,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1296126546,1397313095,542329166))</Histogram>
</Property>
<Property name="MaritalStatusSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>10.59</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"," 2.16.840.1.113883.5.2"),$lb(2,2,2,2,2,2,1,23,23,23,23,23,23,23,23),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="PatientMRN">
<Selectivity>5.6818%</Selectivity>
<OutlierSelectivity>.318182:12345</OutlierSelectivity>
<AverageFieldSize>10.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 106"," 107624055"," 107624104"," 107624139"," 110107073916280"," 110107073916280"," 12345"," 12345"," 12345"," 12345"," 12345"," 12345"," 230420"," 9473"," 98765432"," 9999"),$lb(3,7,8,2,17,2,7,7,7,7,7,1,1,2,2),$lb(540094518,905969664,926298676,808793344,825242624,808714240,859373568,808924722,825241904,0,0,825241904,842216501,0,0,0,0,0,0,0,0,0,0,825373492,842215476,842215476,959723315,876032768,943142453,943142453,960051456,540621113))</Histogram>
</Property>
<Property name="PhoneNumber">
<Selectivity>6.1983%</Selectivity>
<OutlierSelectivity>.318182:"tel:(781)555-1212"</OutlierSelectivity>
<AverageFieldSize>19.09</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," TEL:(503) 325-7464"," TEL:(508)555-1212"," TEL:(508)666-1616"," TEL:(781)555-1212"," TEL:(781)555-1212"," TEL:(781)555-1212"," TEL:(781)555-1212"," TEL:+1(444)444-4444"," TEL:+1-(555)555-3333"," TEL:+1-(555)555-3333"," TEL:+1-(555)555-3333"," TEL:+1-(555)555-3333"," TEL:+1-(555)555-3333"," TEL:+1-555-777-3333"," TEL:+13093548275"),$lb(1,8,10,6,19,19,19,5,7,22,22,22,22,8,7),$lb(536870912,0,1413827642,858333235,942224693,892679469,909522477,892352553,926429481,0,0,0,0,0,0,674707505,724641844,674509876,757609781,0,0,0,0,0,0,0,0,674575669,892679469,758461749,858798387,542393676))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="RaceCode">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>7.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 2054-5"," 2054-5"," 2054-5"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"," 2106-3"),$lb(2,1,8,8,2,8,8,8,8,8,8,8,8,8,8),$lb(536870912,0,0,0,842020148,0,0,0,0,808793133,825243181,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540160304))</Histogram>
</Property>
<Property name="RaceDisplay">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>11.77</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," BLACK OR AFRICAN AMERICAN"," BLACK OR AFRICAN AMERICAN"," BLACK OR AFRICAN AMERICAN"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"," WHITE"),$lb(2,1,27,27,1,7,7,7,7,7,7,7,7,7,7),$lb(536870912,0,0,0,1112293699,0,0,0,0,1112293699,1464355156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542591049))</Histogram>
</Property>
<Property name="RaceSystem">
<Selectivity>13.6364%</Selectivity>
<OutlierSelectivity>.863636:"2.16.840.1.113883.6.238"</OutlierSelectivity>
<AverageFieldSize>21.86</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"," 2.16.840.1.113883.6.238"),$lb(2,1,25,25,25,25,25,25,25,25,25,25,25,25,25),$lb(536870912,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="State">
<Selectivity>25.0000%</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" IL"," MA"," MA"," MA"," MA"," MA"," MA"," OR"," OR"," OR"," OR"," OR"," OR"," OR"," SC"," SC"),$lb(1,4,4,4,4,4,1,4,4,4,4,4,4,1,4),$lb(541674496,1229717504,1296105472,0,0,0,0,0,0,0,0,0,0,1296105472,1330774016,0,0,0,0,0,0,0,0,0,0,0,0,1330774016,1396899840,0,0,542327552))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ZipCode">
<Selectivity>12.5000%</Selectivity>
<AverageFieldSize>7.27</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 02109"," 02109"," 02109"," 02368"," 02368"," 02368"," 02368"," 29803"," 61550-"," 97005"," 97005"," 97005"," 97005"," 97005"," 97005-"," 97867"),$lb(7,7,3,7,7,7,1,1,1,7,7,7,7,6,3),$lb(540029489,0,0,0,0,825243904,859191296,0,0,0,0,0,0,808596278,842610736,842610736,909194549,909194549,959918128,0,0,0,0,0,0,0,0,0,754974720,808465709,943077120,540620600))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDPayer">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.5172629</TimeChanged>
<TimeCreated>67081,42275.9063799</TimeCreated>

<Property name="PayerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="PayerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PolicyNumber">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CoveredParty">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PayerCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PayerCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PayerCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PayerStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerIDs">
<Type>%String</Type>
</Property>

<Property name="PerformerAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerTelecom">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="MemberID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationTelecom">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LocationName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ParticipantRoleID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ParticipantRoleCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ParticipantRoleCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ParticipantRoleCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAProfF8FE.CCDPayerD</DataLocation>
<DefaultData>CCDPayerDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAProfF8FE.CCDPayerD</IdLocation>
<IndexLocation>^LEADNorth.CDAProfF8FE.CCDPayerI</IndexLocation>
<StreamLocation>^LEADNorth.CDAProfF8FE.CCDPayerS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="CCDPayerDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PayerID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>PayerName</Value>
</Value>
<Value name="5">
<Value>PolicyNumber</Value>
</Value>
<Value name="6">
<Value>CoveredParty</Value>
</Value>
<Value name="7">
<Value>PayerCode</Value>
</Value>
<Value name="8">
<Value>PayerCodeSystem</Value>
</Value>
<Value name="9">
<Value>PayerCodeSystemName</Value>
</Value>
<Value name="10">
<Value>PayerStatusCode</Value>
</Value>
<Value name="11">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="12">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="13">
<Value>PerformerIDs</Value>
</Value>
<Value name="14">
<Value>PerformerAddress</Value>
</Value>
<Value name="15">
<Value>PerformerTelecom</Value>
</Value>
<Value name="16">
<Value>PerformerName</Value>
</Value>
<Value name="17">
<Value>AuthorTime</Value>
</Value>
<Value name="18">
<Value>MemberID</Value>
</Value>
<Value name="19">
<Value>LocationAddress</Value>
</Value>
<Value name="20">
<Value>LocationTelecom</Value>
</Value>
<Value name="21">
<Value>LocationName</Value>
</Value>
<Value name="22">
<Value>ParticipantRoleID</Value>
</Value>
<Value name="23">
<Value>ParticipantRoleCode</Value>
</Value>
<Value name="24">
<Value>ParticipantRoleCodeSystem</Value>
</Value>
<Value name="25">
<Value>ParticipantRoleCodeSystemName</Value>
</Value>
<Value name="26">
<Value>XPath</Value>
</Value>
<Value name="27">
<Value>ProfileID</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="AuthorTime">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<Property name="CoveredParty">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.5</AverageFieldSize>
</Property>
<Property name="DocumentID">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3.5</AverageFieldSize>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="LocationAddress">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>54</AverageFieldSize>
</Property>
<Property name="LocationName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="LocationTelecom">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
</Property>
<Property name="MemberID">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="ParticipantRoleCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="ParticipantRoleCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>25</AverageFieldSize>
</Property>
<Property name="ParticipantRoleCodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<Property name="ParticipantRoleID">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>38</AverageFieldSize>
</Property>
<Property name="PayerCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
</Property>
<Property name="PayerCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>23</AverageFieldSize>
</Property>
<Property name="PayerCodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>4.5</AverageFieldSize>
</Property>
<Property name="PayerID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="PayerName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>32.5</AverageFieldSize>
</Property>
<Property name="PayerStatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
</Property>
<Property name="PerformerAddress">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.5</AverageFieldSize>
</Property>
<Property name="PerformerIDs">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>2.5</AverageFieldSize>
</Property>
<Property name="PerformerName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="PerformerTelecom">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="PolicyNumber">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDPlanOfCare">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.5638953</TimeChanged>
<TimeCreated>67081,42082.480985</TimeCreated>

<Property name="PlanOfCareID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="EncounterID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EncounterExtension">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PerformerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerOrganization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerCity">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerState">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerPostalCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDF8FE.CCDPlanOfCareD</DataLocation>
<DefaultData>CCDPlanOfCareDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDF8FE.CCDPlanOfCareD</IdLocation>
<IndexLocation>^LEADNorth.CDF8FE.CCDPlanOfCareI</IndexLocation>
<StreamLocation>^LEADNorth.CDF8FE.CCDPlanOfCareS</StreamLocation>
<ExtentSize>17</ExtentSize>
<Data name="CCDPlanOfCareDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PlanOfCareID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>EncounterID</Value>
</Value>
<Value name="5">
<Value>EncounterExtension</Value>
</Value>
<Value name="6">
<Value>DisplayName</Value>
</Value>
<Value name="7">
<Value>StatusCode</Value>
</Value>
<Value name="8">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="9">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="10">
<Value>PerformerID</Value>
</Value>
<Value name="11">
<Value>PerformerOrganization</Value>
</Value>
<Value name="12">
<Value>PerformerAddress</Value>
</Value>
<Value name="13">
<Value>PerformerCity</Value>
</Value>
<Value name="14">
<Value>PerformerState</Value>
</Value>
<Value name="15">
<Value>PerformerPostalCode</Value>
</Value>
<Value name="16">
<Value>AuthorTime</Value>
</Value>
<Value name="17">
<Value>ProfileID</Value>
</Value>
<Value name="18">
<Value>NullValues</Value>
</Value>
<Value name="19">
<Value>SDAMapping</Value>
</Value>
<Value name="20">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","5","6","7","8","9","10","11","12","13","14","15","16","17"),$lb(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,956301312,956301312,825229312,805306368,822083584,822083584,838860800,838860800,855638016,855638016,872415232,872415232,889192448,889192448,905969664,905969664,922746880,825688064))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.647059:</OutlierSelectivity>
<AverageFieldSize>6.94</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 20180313181535"," 20180820110015"," 20200605093537"," 20220711161155"," 20230117163624"," 20230117163740"),$lb(2,2,2,2,2,2,2,2,2,1,6,3,4,4,12),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019128,858862385,942813233,825765944,842018870,808465968,842020657,842020657,858796337,909259776,926167040,540160050))</Histogram>
</Property>
<Property name="DisplayName">
<Selectivity>7.8431%</Selectivity>
<OutlierSelectivity>.764706:</OutlierSelectivity>
<AverageFieldSize>10.12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," CARDIOVASCULAR STRESS TEST, NUCLEAR WITH EXERCISE"," MAMMOGRAM, SCREENING, BOTH BREASTS (OFFICE SCHEDULES)"," ORTHOPEDIC CONSULT"," ORTHOPEDIC CONSULT"),$lb(2,2,2,2,2,2,2,2,2,2,2,1,1,1,20),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1128354372,1128354372,1296125261,1296125261,1330795592,0,0,542069332))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.411765:8</OutlierSelectivity>
<AverageFieldSize>3.35</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("3","4","7","8","8","8","8","8","8","8","10","11","12","18","20","21"),$lb(0,0,0,1,1,1,1,1,1,0,1,1,1,0,1),$lb(855638016,855638016,872415232,872415232,922746880,922746880,939524096,0,0,0,0,0,0,0,0,0,0,0,0,939524096,825229312,805306368,822083584,822083584,838860800,838860800,939524096,825753600,842006528,805306368,822083584,842072064))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.647059:</OutlierSelectivity>
<AverageFieldSize>8.71</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 20180316102739-0400"," 20180904085930-0400"," 20200728170854-0400"," 20220711161156-0400"," 20230713093000-0400"," 20230725161500-0400"),$lb(2,2,2,2,2,2,2,2,2,1,6,3,4,4,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019128,858863153,959460400,825765945,842018871,808466226,842020657,842020657,858797873,825438265,842346806,540160050))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.647059:</OutlierSelectivity>
<AverageFieldSize>8.71</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 20180313000000-0400"," 20180820000000-0400"," 20200605000000-0400"," 20220711000000-0400"," 20230713091500-0400"," 20230725154500-0400"),$lb(2,2,2,2,2,2,2,2,2,1,6,3,4,4,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019128,858862384,942813232,825765944,842018870,808465968,842020657,842020657,858797873,825438265,842346805,540160050))</Histogram>
</Property>
<Property name="EncounterExtension">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.647059:</OutlierSelectivity>
<AverageFieldSize>6.59</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 1836583877387940"," 1850381957861220"," 1906968842979750"," 1973175084689790"," 3260918"," 3260922"),$lb(2,2,2,2,2,2,2,2,2,1,3,2,3,1,6),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825766710,859190584,892351288,943009843,959460921,808859958,926101815,825833267,858928688,825753600,842137600,540226102))</Histogram>
</Property>
<Property name="EncounterID">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>18.24</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 1.2.840.113619.21.1.4778906300703140889.3.12.1"," 1.2.840.113619.21.1.4778906300703140889.3.12.1"," 1.2.840.113619.21.1.4778906300703140889.3.12.3"," 1.2.840.113619.21.1.4778906300703140889.3.12.3"," 1.2.840.113619.21.1.4778906300703140889.3.12.3"," 1.2.840.113619.21.1.4778906300703140889.3.12.3"),$lb(2,2,2,2,2,2,2,2,2,1,48,46,48,48,48),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825111086,0,0,822083584,855638016,0,0,0,0,0,0,540094002))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="PerformerAddress">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>5.12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," 1120 15ST STREET"," 302 UNIVERSITY PARKWAY"," 811 13TH STREET"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,1,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825307696,825307696,858796576,858796576,942747936,540553521))</Histogram>
</Property>
<Property name="PerformerCity">
<Selectivity>8.8235%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>3.12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," AIKEN"," AUGUSTA"," AUGUSTA"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,2,9),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095322437,1229669710,1430738259,0,0,541152583))</Histogram>
</Property>
<Property name="PerformerID">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>4.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," 1741089351252180"," 1773930087003910"," 1787848927861440"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,3,3),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825701425,875638840,926103859,926103859,943142964,540096312))</Histogram>
</Property>
<Property name="PerformerOrganization">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>6.94</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," AIKEN REGIONAL MEDICAL CENTER"," AUGUSTA UNIVERSITY CONCIERGE"," LEGEND ORTHOPEDICS- AUGUSTA"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095322437,1229669710,1430738259,1096107861,1279608645,541869383))</Histogram>
</Property>
<Property name="PerformerPostalCode">
<Selectivity>8.8235%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>2.88</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," 29801"," 30901"," 30901"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,1,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842610736,842610736,858798384,0,0,540225593))</Histogram>
</Property>
<Property name="PerformerState">
<Selectivity>8.8235%</Selectivity>
<OutlierSelectivity>.823529:</OutlierSelectivity>
<AverageFieldSize>2.35</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," GA"," GA"," SC"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,1,4,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1195442176,0,0,1195442176,1396899840,542327552))</Histogram>
</Property>
<Property name="PlanOfCareID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>3.06</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," NEW"," NEW"," NEW"," NEW"," NEW"," NEW"),$lb(2,2,2,2,2,2,2,2,2,1,5,5,5,5,5),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1313167104,0,0,0,0,0,0,0,0,0,0,542000471))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDProblem">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.6919012</TimeChanged>
<TimeCreated>67081,41783.6173747</TimeCreated>

<Property name="ProblemID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="ProblemClassCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="MoodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ProblemTypeCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProblemTypeName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="Author">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAPrF8FE.CCDProblemD</DataLocation>
<DefaultData>CCDProblemDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAPrF8FE.CCDProblemD</IdLocation>
<IndexLocation>^LEADNorth.CDAPrF8FE.CCDProblemI</IndexLocation>
<StreamLocation>^LEADNorth.CDAPrF8FE.CCDProblemS</StreamLocation>
<ExtentSize>85</ExtentSize>
<Data name="CCDProblemDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProblemID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>ProblemClassCode</Value>
</Value>
<Value name="5">
<Value>MoodCode</Value>
</Value>
<Value name="6">
<Value>StatusCode</Value>
</Value>
<Value name="7">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="8">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="9">
<Value>ProblemTypeCode</Value>
</Value>
<Value name="10">
<Value>ProblemTypeName</Value>
</Value>
<Value name="11">
<Value>ValueCode</Value>
</Value>
<Value name="12">
<Value>ValueDisplayName</Value>
</Value>
<Value name="13">
<Value>CodeSystem</Value>
</Value>
<Value name="14">
<Value>CodeSystemName</Value>
</Value>
<Value name="15">
<Value>AuthorTime</Value>
</Value>
<Value name="16">
<Value>Author</Value>
</Value>
<Value name="17">
<Value>ProfileID</Value>
</Value>
<Value name="18">
<Value>NullValues</Value>
</Value>
<Value name="19">
<Value>SDAMapping</Value>
</Value>
<Value name="20">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","6","12","18","24","30","36","42","48","54","60","65","70","75","80","85"),$lb(0,0,1,0,0,1,0,1,0,0,1,0,1,0,1),$lb(822083584,822083584,905969664,905969664,825360384,838860800,939524096,825753600,842268672,842268672,858783744,805306368,905969664,859176960,875692032,838860800,939524096,876085248,892600320,892600320,909115392,805306368,889192448,909443072,925892608,805306368,889192448,926220288,942669824,805306368,889192448,942997504))</Histogram>
</Property>
<Property name="Author">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>1.9195%</Selectivity>
<OutlierSelectivity>.270588:</OutlierSelectivity>
<AverageFieldSize>13.35</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," 20070103000000-0500"," 20110925010000-0400"," 20130130000000-0500"," 20161024155423"," 20180820105829"," 20180904101809"," 20200605093443"," 20200706083734"," 20210808165136"," 20220111160232"," 20220711160940"," 20230202224818"),$lb(2,2,2,1,3,4,4,4,6,3,6,4,4,6,4),$lb(536870912,0,0,0,0,0,0,0,842018871,808923185,825307193,825243954,858796339,858796339,909193266,909193266,942684210,942813233,959460401,825765945,842018870,909129008,925906480,808466224,825243696,825243696,842019121,825307441,925970737,842020657,858796592,540160050))</Histogram>
</Property>
<Property name="CodeSystem">
<Selectivity>5.8824%</Selectivity>
<OutlierSelectivity>.941176:"2.16.840.1.113883.6.96"</OutlierSelectivity>
<AverageFieldSize>23.94</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.5.4"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(19,24,24,24,24,24,24,24,24,24,24,24,24,24,24),$lb(540159537,892220416,908998966,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="CodeSystemName">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>8.56</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"),$lb(2,2,2,1,11,11,11,11,11,11,11,11,11,11,11),$lb(536870912,0,0,0,0,0,0,0,1397641037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542330447))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>2.7682%</Selectivity>
<OutlierSelectivity>.529412:8</OutlierSelectivity>
<AverageFieldSize>3.29</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","4","8","8","8","8","8","8","8","8","12","13","19","21","22"),$lb(0,0,0,1,1,1,1,1,1,1,0,1,1,0,1),$lb(822083584,822083584,838860800,838860800,872415232,872415232,939524096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,939524096,825360384,838860800,855638016,855638016,956301312,825819136,842072064,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>4.7059%</Selectivity>
<OutlierSelectivity>.952941:</OutlierSelectivity>
<AverageFieldSize>2.38</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," 20110103"),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019121,540160049))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>2.7843%</Selectivity>
<OutlierSelectivity>.164706:</OutlierSelectivity>
<AverageFieldSize>14.76</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 199803"," 20090709"," 20140212130251"," 20161024000000-0400"," 20170403000000-0400"," 20180820000000-0400"," 20200605000000-0400"," 20200605000000-0400"," 20200605000000-0400"," 20210111000000-0500"," 20220111000000-0500"," 20230619"," 20230619"),$lb(2,2,1,1,3,4,4,4,3,21,21,4,4,4,10),$lb(536870912,0,0,0,0,0,825833784,825833784,842018873,809054263,825503794,875573809,909193266,909193266,925905968,925905968,942684210,825765944,842018870,0,0,0,0,808465968,825241905,825241905,842019121,842019121,858797617,0,0,540160050))</Histogram>
</Property>
<Property name="MoodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541414990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541414990))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProblemClassCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"," ACT"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541147988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541147988))</Histogram>
</Property>
<Property name="ProblemID">
<Selectivity>2.2409%</Selectivity>
<OutlierSelectivity>.529412:"1.2.840.113619.21.1.4778906300703140889.3.4"</OutlierSelectivity>
<AverageFieldSize>38.84</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.2.840.113619.21.1.4778906300703140889.3.4"," 1.3.6.1.4.1.22812.11.99930.3.4.1"," 1.3.6.1.4.1.22812.3.99930.3.4.1"," 36C67DA6-6F25-4568-87DD-DFAD72F47131"," 629CD12F-AE3C-44EE-804C-4478D4B45D56"," AE54637A-A4A6-475E-940E-3A93B19842FC"," E8B099BF-9556-4997-90CE-739B8E6C8049"," EC8A6FF8-ED4B-4F7E-82C3-E98E58B45DE7"),$lb(1,45,45,45,45,45,45,45,3,19,1,1,1,1,2),$lb(536870912,0,825111086,0,0,0,0,0,0,0,0,0,0,0,0,0,0,841889844,858666542,825306681,858667321,825111342,859194166,859194166,909261123,909261123,1095054644,1095054644,1161314864,943861817,1127760182,541410104))</Histogram>
</Property>
<Property name="ProblemTypeCode">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>10.66</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 282291009"," 282291009"," 282291009"," 282291009"," 282291009"," 282291009"," 282291009"," 282291009"," 409586006"," 55607006"," 55607006"," 55607006"," 55607006"," 64572001"," 64572001"," ASSERTION"),$lb(11,11,11,11,11,11,11,1,1,10,10,10,1,10,1),$lb(540162098,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842543666,875575605,875575605,892679728,0,0,0,0,0,0,892679728,909391159,0,0,909391159,1095979845,541152083))</Histogram>
</Property>
<Property name="ProblemTypeName">
<Selectivity>20.0000%</Selectivity>
<AverageFieldSize>9.87</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," COMPLAINT"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DIAGNOSIS"," DISORDER"," PROBLEM"," PROBLEM"," PROBLEM"," PROBLEM"," PROBLEM"),$lb(1,1,11,11,11,11,11,11,11,3,1,9,9,9,9),$lb(536870912,0,1129270608,1129270608,1145651527,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095192143,1397707332,1145656143,1347571522,0,0,0,0,0,0,0,0,542134863))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>9.27</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," ACTIVE"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(8,8,8,8,8,8,8,8,1,11,11,11,11,11,11),$lb(541147988,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1094931529,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="ValueCode">
<Selectivity>2.0513%</Selectivity>
<OutlierSelectivity>.2:</OutlierSelectivity>
<AverageFieldSize>8.51</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 102594003"," 194828000"," 195967001"," 233604007"," 24623002"," 371622005"," 38341003"," 43339004"," 47933007"," 5880005"," 80394007"," I82.461"," Z68.21"),$lb(2,2,1,2,3,1,2,1,2,1,2,1,1,1,1),$lb(536870912,0,0,0,0,0,825242165,808596793,959723570,876098104,892941879,825832761,842216246,858994224,875967027,842282546,859255094,925972018,942879793,859321140,875770675,858993465,926495539,876034355,892876848,892876848,942682937,942682937,1228419630,1228419630,1513502766,542783032))</Histogram>
</Property>
<Property name="ValueDisplayName">
<Selectivity>1.9048%</Selectivity>
<OutlierSelectivity>.2:</OutlierSelectivity>
<AverageFieldSize>17.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," ABRASION OF TRUNK"," ANGINA (DISORDER)"," ASTHMA"," CRAMP IN LOWER LIMB"," FOOT PAIN"," HYPERGLYCEMIA"," HYPERTENSIVE DISORDER"," HYPOKALEMIA"," LOCALIZED EDEMA"," PNEUMONIA"," PNEUMONIA"," SPASM OF BACK MUSCLES"," TYPE II DIABETES"),$lb(2,2,1,2,2,1,1,1,6,4,1,1,11,1,1),$lb(536870912,0,0,0,0,0,1094865473,1112686931,1313294670,1313294670,1398032461,1095980104,1129464141,1129464141,1179602772,1179602772,1213812805,1196185923,1413828179,1163023429,1330331980,1213812815,1280262977,1280262977,1347306837,0,0,1347306837,1397768531,1397768531,1415139397,542398800))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-12</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDProcedure">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.7527102</TimeChanged>
<TimeCreated>67081,41884.853163</TimeCreated>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="ProcedureCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CodeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2550"/>
</Property>

<Property name="ProcedureClassCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="CodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="MoodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Status">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PriorityCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="TargetSiteCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="PerformerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerOrganization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PerformerAddress">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAF8FE.CCDProcedureD</DataLocation>
<DefaultData>CCDProcedureDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAF8FE.CCDProcedureD</IdLocation>
<IndexLocation>^LEADNorth.CDAF8FE.CCDProcedureI</IndexLocation>
<StreamLocation>^LEADNorth.CDAF8FE.CCDProcedureS</StreamLocation>
<ExtentSize>92</ExtentSize>
<Data name="CCDProcedureDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentID</Value>
</Value>
<Value name="3">
<Value>ProcedureCode</Value>
</Value>
<Value name="4">
<Value>CodeSystem</Value>
</Value>
<Value name="5">
<Value>CodeDisplayName</Value>
</Value>
<Value name="6">
<Value>ProcedureClassCode</Value>
</Value>
<Value name="7">
<Value>CodeSystemName</Value>
</Value>
<Value name="8">
<Value>MoodCode</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
<Value name="10">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="11">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="12">
<Value>PriorityCode</Value>
</Value>
<Value name="13">
<Value>TargetSiteCode</Value>
</Value>
<Value name="14">
<Value>PerformerID</Value>
</Value>
<Value name="15">
<Value>PerformerName</Value>
</Value>
<Value name="16">
<Value>PerformerOrganization</Value>
</Value>
<Value name="17">
<Value>PerformerAddress</Value>
</Value>
<Value name="18">
<Value>AuthorTime</Value>
</Value>
<Value name="19">
<Value>ProfileID</Value>
</Value>
<Value name="20">
<Value>NullValues</Value>
</Value>
<Value name="21">
<Value>SDAMapping</Value>
</Value>
<Value name="22">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","7","14","20","26","32","38","44","50","56","62","68","74","80","86","92"),$lb(0,0,0,1,0,1,0,0,1,0,1,0,0,1,0),$lb(822083584,822083584,922746880,922746880,825491456,825491456,842006528,805306368,905969664,842399744,858914816,838860800,939524096,859308032,875823104,875823104,892338176,805306368,905969664,892731392,909246464,838860800,939524096,909639680,926154752,926154752,942669824,805306368,905969664,943063040,959578112,959578112))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>1.8667%</Selectivity>
<OutlierSelectivity>.141304:</OutlierSelectivity>
<AverageFieldSize>14.22</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 20130710221420.000-0500"," 20170301093920"," 20170301093926"," 20180313181601"," 20180916162307"," 20200605093649"," 20200617171059"," 20210111232143"," 20210715173141"," 20220111160302"," 20220705102322"," 20220731235226"," 20230117163435"," 20230202225027"),$lb(2,1,4,14,4,6,3,7,4,6,4,6,7,4,6),$lb(536870912,0,0,0,842019123,858797873,925905712,805306368,905969664,925905712,942682929,858862385,959526449,825765945,842018870,808792121,825700663,808465969,825241905,825307442,925971761,825243441,842019121,825307441,925906225,808792368,858862131,842020659,858796337,825308977,842019378,540160050))</Histogram>
</Property>
<Property name="CodeDisplayName">
<Selectivity>2.6316%</Selectivity>
<AverageFieldSize>13.38</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," ADMINISTRATION FEE"," BMI34"," BMI34"," BMI35"," BMI36"," CBC W/DIFF WITH PLATELETS *"," COLONIC POLYPECTOMY"," COMP METABOLIC"," DBP3"," HA1C *"," LIPID PROFILE"," ORTHOPEDIC CONSULT"," SBP3"," TSH"," VITAMIN D (25 OH)"),$lb(1,1,7,5,5,1,2,3,1,1,1,1,1,1,1),$lb(536870912,0,1094995273,1094995273,1112361267,0,0,872415232,889192448,889192448,905969664,1112361267,1128416032,1111695447,1330401102,1280265801,1297096781,1129270608,1145196595,1145196595,1212232003,1212232003,1279873097,1279873097,1330795592,1330795592,1396854835,1396854835,1414744064,1414744064,1447646273,542525780))</Histogram>
</Property>
<Property name="CodeSystem">
<Selectivity>12.5000%</Selectivity>
<OutlierSelectivity>.75:"2.16.840.1.113883.6.96"</OutlierSelectivity>
<AverageFieldSize>22.57</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.12"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(1,24,24,21,24,24,24,24,24,24,24,24,24,24,24),$lb(536870912,0,841888054,0,0,0,0,825360384,959840256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="CodeSystemName">
<Selectivity>7.3370%</Selectivity>
<OutlierSelectivity>.706522:"SNOMED CT"</OutlierSelectivity>
<AverageFieldSize>8.92</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," C4"," C4"," CPT-4"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED-CT"),$lb(2,1,4,2,1,11,11,11,11,11,11,11,11,11,7),$lb(536870912,0,0,0,1127481344,0,0,872415232,1347693876,1129337901,1397641037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541283328,759387136,542330447))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>1.3587%</Selectivity>
<OutlierSelectivity>.836957:8</OutlierSelectivity>
<AverageFieldSize>3.13</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("3","8","8","8","8","8","8","8","8","8","8","8","8","8","13","22"),$lb(0,1,1,1,1,1,1,1,1,1,1,1,1,0,0),$lb(855638016,855638016,939524096,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,939524096,825425920,825425920,842137600,842137600))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>2.0000%</Selectivity>
<AverageFieldSize>20.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 20140212130114"," 20170117081341-0500"," 20170301093920-0500"," 20170328081847-0400"," 20180904101838-0400"," 20200601101444-0400"," 20200617171100-0400"," 20210104090131-0500"," 20210706084616-0400"," 20210808165149-0400"," 20220301084723-0500"," 20220713165814-0400"," 20230110093541-0500"," 20230117163435-0500"," 202306190000-0600"),$lb(1,4,6,7,4,3,7,4,6,6,4,6,4,8,6),$lb(536870912,0,842019124,875573809,925905201,825308976,858796336,808529977,842543160,925905714,942684464,825765945,842018870,808530224,825700663,808465969,825241904,825242672,925906480,925906480,942684209,825243696,842019632,858796336,925971249,842020657,858796337,808466739,925972019,825308977,909195568,540160050))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>2.9412%</Selectivity>
<AverageFieldSize>20.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 20140212130114"," 20170103000000-0500"," 20170214000000-0500"," 20170301000000-0500"," 20180820000000-0400"," 20200601000000-0400"," 20200605000000-0400"," 20210104000000-0500"," 20210706000000-0400"," 20210715000000-0400"," 20220111000000-0500"," 20220705000000-0400"," 20230110000000-0500"," 20230110000000-0500"," 202306190000-0600"),$lb(1,4,6,6,4,3,8,4,6,7,4,6,4,21,6),$lb(536870912,0,842019124,875573809,925905200,825242416,842085424,842085424,858796336,925905712,942684210,825765944,842018870,825241648,892350512,808465968,825241904,825242672,925906480,808857648,825569328,825243441,842019121,825307440,925906224,842020656,858796337,0,0,825307184,909195568,540160050))</Histogram>
</Property>
<Property name="MoodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541414990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541414990))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="PerformerAddress">
<Selectivity>7.3370%</Selectivity>
<OutlierSelectivity>.706522:"131 Rinehart WayAikenSC29803-1703US"</OutlierSelectivity>
<AverageFieldSize>35.85</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 131 RINEHART WAYAIKENSC29803-1703US"," 17 DAWS RD."_$c(10,9,9,9,9,9,9,9,9,9,9)_"BLUE BELL"_$c(10,9,9,9,9,9,9,9,9,9,9)_"MA"_$c(10,9,9,9,9,9,9,9,9,9,9)_"02368"_$c(10,9,9,9,9,9,9,9,9,9,9)_"US"," 2011 WINDSOR SPRING ROADAUGUSTAGA30906-4957US"," 2011 WINDSOR SPRING ROADAUGUSTAGA30906-4957US"),$lb(2,1,37,37,37,37,37,37,37,37,37,37,2,1,47),$lb(536870912,0,0,0,825438496,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,858857554,924861505,825696324,842019121,0,0,540160049))</Histogram>
</Property>
<Property name="PerformerID">
<Selectivity>6.3043%</Selectivity>
<OutlierSelectivity>.684783:1563795232001410</OutlierSelectivity>
<AverageFieldSize>15.47</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1563795232001410"," 1756637090189700"," 1756637090189700"," 2981823"),$lb(2,2,1,18,18,18,18,18,18,18,18,18,2,18,1),$lb(536870912,0,0,0,0,0,825570867,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,892744503,926234166,0,0,825701686,842610737,540162360))</Histogram>
</Property>
<Property name="PerformerName">
<Selectivity>7.8804%</Selectivity>
<OutlierSelectivity>.684783:"Fallaw MD"</OutlierSelectivity>
<AverageFieldSize>9.72</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," FALLAW MD"," MACHADO MD"," MACHADO MD"," MUNIZ MD"),$lb(2,2,1,11,11,11,11,11,11,11,11,11,1,12,2),$lb(536870912,0,0,0,0,0,1178684492,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1178684492,1296122696,0,0,1094928449,1431193946,541939022))</Histogram>
</Property>
<Property name="PerformerOrganization">
<Selectivity>7.3370%</Selectivity>
<OutlierSelectivity>.706522:"CENTER FOR PRIMARY CARE - RINEHART"</OutlierSelectivity>
<AverageFieldSize>31.37</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lblb(2,1,36,36,36,36,36,36,36,36,36,36,25,36,1),$lb(536870912,0,0,0,1128615508,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,757092937,1346576429,0,0,1128615508,1196379972,541544271))</Histogram>
</Property>
<Property name="PriorityCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProcedureClassCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>6</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"," PROC"),$lb(6,6,6,6,6,6,6,6,6,6,6,6,6,6,6),$lb(542134863,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542134863))</Histogram>
</Property>
<Property name="ProcedureCode">
<Selectivity>1.8116%</Selectivity>
<OutlierSelectivity>.728261:</OutlierSelectivity>
<AverageFieldSize>3.66</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 274025005"," 3075F"," 3079F"," 36415"," G8420"),$lb(2,2,2,2,2,2,2,2,2,2,1,1,4,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842478640,842478640,858797877,893779968,960888832,808925510,909390133,859190321,1194865714,541538356))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="Status">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"," 1"),$lb(3,3,3,3,3,3,3,3,3,3,3,3,3,3,3),$lb(540082176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540082176))</Histogram>
</Property>
<Property name="TargetSiteCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-12</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDResult">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.9542797</TimeChanged>
<TimeCreated>67081,41964.7739873</TimeCreated>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
<Required>1</Required>
</Property>

<Property name="ResultID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="TestValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Units">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ReferenceRange">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCodeDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OrganizerID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OrganizerName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="MoodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NullValues">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="SDAMapping">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAProF8FE.CCDResultD</DataLocation>
<DefaultData>CCDResultDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAProF8FE.CCDResultD</IdLocation>
<IndexLocation>^LEADNorth.CDAProF8FE.CCDResultI</IndexLocation>
<StreamLocation>^LEADNorth.CDAProF8FE.CCDResultS</StreamLocation>
<ExtentSize>232</ExtentSize>
<Data name="CCDResultDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentID</Value>
</Value>
<Value name="3">
<Value>ResultID</Value>
</Value>
<Value name="4">
<Value>TestValue</Value>
</Value>
<Value name="5">
<Value>Units</Value>
</Value>
<Value name="6">
<Value>ReferenceRange</Value>
</Value>
<Value name="7">
<Value>StatusCode</Value>
</Value>
<Value name="8">
<Value>ObservationCode</Value>
</Value>
<Value name="9">
<Value>ObservationCodeDisplayName</Value>
</Value>
<Value name="10">
<Value>ObservationCodeSystem</Value>
</Value>
<Value name="11">
<Value>ObservationCodeSystemName</Value>
</Value>
<Value name="12">
<Value>OrganizerID</Value>
</Value>
<Value name="13">
<Value>OrganizerName</Value>
</Value>
<Value name="14">
<Value>MoodCode</Value>
</Value>
<Value name="15">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="16">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="17">
<Value>AuthorTime</Value>
</Value>
<Value name="18">
<Value>ProfileID</Value>
</Value>
<Value name="19">
<Value>NullValues</Value>
</Value>
<Value name="20">
<Value>SDAMapping</Value>
</Value>
<Value name="21">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","16","32","48","64","80","96","112","127","142","157","172","187","202","217","232"),$lb(1,0,0,0,0,0,0,1,1,1,1,1,0,1,1),$lb(822083584,0,905969664,825622528,858914816,858914816,876085248,876085248,909377536,909377536,942669824,942669824,959840256,959840256,825307648,825360384,842465280,842465280,875692032,875692032,892796928,892796928,926023680,926023680,943128576,825767680,842019328,808583168,825688064,825688064,858914816,842215936))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>0.9544%</Selectivity>
<OutlierSelectivity>.732759:</OutlierSelectivity>
<AverageFieldSize>6.05</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 20130710223121.000-0500"," 20230111120231"," 20230111120245"," 20230111120250"," 20230111120251"),$lb(2,2,2,2,2,2,2,2,2,2,1,3,13,13,14),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019123,825438263,842215473,858849280,875888640,875888640,892338176,805306368,822083584,540160050))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>6.2500%</Selectivity>
<AverageFieldSize>3.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","8","8","8","8","13","13","13","14","15","16","16","17","17","22"),$lb(0,0,1,1,1,0,2,2,1,1,1,2,1,2,0),$lb(822083584,822083584,838860800,838860800,939524096,0,0,0,0,0,0,939524096,825425920,0,0,0,0,855638016,872415232,872415232,889192448,889192448,905969664,0,0,905969664,922746880,0,0,825688064,842137600,842137600))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="MoodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541414990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541414990))</Histogram>
</Property>
<Property name="NullValues">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationCode">
<Selectivity>1.4286%</Selectivity>
<AverageFieldSize>8.25</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 10466-1"," 14957-5"," 1751-7"," 17861-6"," 2000-8"," 20570-8"," 2160-0"," 2339-0"," 2777-1"," 2947-0"," 30313-1"," 33765-9"," 38483-4"," 6598-7"," 705-4"," 804-5"),$lb(2,2,3,1,3,2,2,2,2,1,2,2,1,1,1),$lb(540094516,808728118,876164407,876164407,926232877,892415287,943075629,825702454,842018864,808463672,892809261,808793904,825634861,825634861,858994989,858994989,926365485,926365485,959723309,842609719,858796849,808661299,859256373,859256373,942946355,859321400,909457720,909457720,925906221,925906221,942683181,540553268))</Histogram>
</Property>
<Property name="ObservationCodeDisplayName">
<Selectivity>1.0976%</Selectivity>
<OutlierSelectivity>.056034:"Creatinine [Mass/volume] in Serum or Plasma"</OutlierSelectivity>
<AverageFieldSize>42.51</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 25-HYDROXYCALCIFEROL [MASS/VOLUME] IN SERUM OR PLASMA"," ALBUMIN/GLOBULIN [MASS RATIO] IN SERUM OR PLASMA"," BASOPHILS [#/VOLUME] IN BLOOD BY MANUAL COUNT"," CALCIUM [MASS/VOLUME] IN SERUM OR PLASMA"," CARBON DIOXIDE, TOTAL [MOLES/VOLUME] IN SERUM OR PLASMA"," CHOLESTEROL/HDL RATIO, SERUM, PERCENT"," CREATININE [MASS/VOLUME] IN SERUM OR PLASMA"," DEPRECATED GLUCOSE [MASS/VOLUME] IN SERUM OR PLASMA"," GLOMERULAR FILTRATION RATE/1.73 SQ M.PREDICTED BY CREATININE-BASED FORMULA (MDRD)"," HEMOGLOBIN [MASS/VOLUME] IN BLOOD"," MCV [ENTITIC VOLUME] BY AUTOMATED COUNT"," NEUTROPHIL COUNT, BLOOD"," PLT"," PROTEIN [MASS/VOLUME] IN SERUM OR PLASMA"," TROPONIN T"," WBC"),$lb(1,1,1,3,2,2,1,1,1,1,1,1,2,1,1),$lb(540161325,842345800,1095516757,1095516757,1111577423,1111577423,1128352835,1279478101,1380077390,1095909967,1213156421,1213156421,1380270420,1129465153,1145393234,1145393234,1196183373,1196183373,1212501327,1212501327,1296258592,1296258592,1313166676,1313166676,1347179520,1280573440,1380930629,1347571540,1414680400,1414680400,1463960320,542589507))</Histogram>
</Property>
<Property name="ObservationCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>23</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"),$lb(23,23,23,23,23,23,23,23,23,23,23,23,23,23,23),$lb(540159537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ObservationCodeSystemName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>7</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"," LOINC"),$lb(7,7,7,7,7,7,7,7,7,7,7,7,7,7,7),$lb(541871945,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541871945))</Histogram>
</Property>
<Property name="OrganizerID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="OrganizerName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="ReferenceRange">
<Selectivity>0.9908%</Selectivity>
<OutlierSelectivity>.237069:</OutlierSelectivity>
<AverageFieldSize>10.85</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," 0.0-2.0 MG/DL"," 0.50-1.20 MG/DL"," 10-50 U/L"," 136-145 MMOL/L"," 2.5-5.0"," 25.9-30.0 MEQ/L"," 3.5-5.2 G/DL"," 4-18 MG/DL"," 6-23 MG/DL"," 70-100 MG/DL"," 8.8-10.7 MG/DL"," M 13-18 G/DL; F 12-16 G/DL"),$lb(2,2,2,1,3,1,2,1,2,1,1,1,1,1,1),$lb(536870912,0,0,0,0,0,0,0,808333357,808268334,892349745,808334640,825240885,808269104,859188529,825439789,841889069,775236917,892221741,842346041,858666285,858666285,875376952,875376952,908931635,908931635,925904177,925904177,942553133,942553133,1293955379,541925425))</Histogram>
</Property>
<Property name="ResultID">
<Selectivity>3.8793%</Selectivity>
<OutlierSelectivity>.573276:"1.3.6.1.4.1.16517"</OutlierSelectivity>
<AverageFieldSize>26.6</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 017E3917-08E5-4999-9F95-6A4E570446C8"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.22812.11.99930.3.4.5"," 1.3.6.1.4.1.22812.11.99930.3.4.5"," 7D5A02B0-67A4-11DB-BD13-0800200C9A66"," A8084335-5630-4311-A827-DAE3643222A8"," A8084335-5630-4311-A827-DAE3643222A8"," A8084335-5630-4311-A827-DAE3643222A8"," EDC28D28-A361-4C16-B2AB-AD9073E0E22A"),$lb(1,19,19,19,19,19,19,19,13,34,1,1,38,38,1),$lb(540029239,808531781,825111342,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825636145,842151985,0,0,825111342,927216961,927216961,1094201400,0,0,0,0,1094201400,1162101554,541410371))</Histogram>
</Property>
<Property name="SDAMapping">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>1.2931%</Selectivity>
<OutlierSelectivity>.974138:"completed"</OutlierSelectivity>
<AverageFieldSize>10.79</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(1,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(536870912,0,1129270608,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="TestValue">
<Selectivity>0.8283%</Selectivity>
<OutlierSelectivity>.047414:</OutlierSelectivity>
<AverageFieldSize>4.76</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 0.01"," 1.70"," 103"," 13.10"," 14.85"," 2.33"," 26"," 3.5"," 32"," 4.1"," 4.74"," 50"," 79"," 9.4"," 99"),$lb(1,1,2,2,2,1,2,1,2,1,3,1,1,1,2),$lb(536870912,0,808333361,808333361,825112368,775368704,808648704,808648704,858665264,858665264,875444277,825503288,841888563,775107328,905969664,842399744,858666240,775225344,838860800,858914816,875442432,822083584,926154752,875444020,892338176,892338176,926482432,926482432,959329280,775159808,956301312,540621056))</Histogram>
</Property>
<Property name="Units">
<Selectivity>3.2841%</Selectivity>
<OutlierSelectivity>.310345:"mg/dL"</OutlierSelectivity>
<AverageFieldSize>6.53</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," %"," 10+3/UL"," G/DL"," MG/DL"," MG/DL"," MG/DL"," MG/DL"," MG/DL"," ML/MIN"," MMOL/L"," MMOL/L"," MMOL/L"," NG/ML"," U[IU]/ML"),$lb(2,1,1,1,1,7,7,7,7,2,2,8,8,1,1),$lb(536870912,0,0,0,620756992,620756992,825240371,825240371,1194280012,1194280012,1296510788,0,0,0,0,0,0,0,0,1194280012,1278168393,1278168393,1297042479,0,0,0,0,1296912204,1313288013,1313288013,1432045909,542464841))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-24</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDSocialHistory">
<Super>%Persistent</Super>
<TimeChanged>67326,53777.9527051</TimeChanged>
<TimeCreated>67081,42119.1209545</TimeCreated>

<Property name="SocialHistoryID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="ConceptDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueCodeSystemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ValueDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Units">
<Type>%String</Type>
<Parameter name="MAXLEN" value="50"/>
</Property>

<Property name="StatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ObservationIDExtension">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationIDRoot">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
</Property>

<Property name="Author">
<Type>%String</Type>
</Property>

<Property name="EffectiveTimeLow">
<Type>%String</Type>
</Property>

<Property name="EffectiveTimeHigh">
<Type>%String</Type>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorthF8FE.CCDSocialHi11ECD</DataLocation>
<DefaultData>CCDSocialHistoryDefaultData</DefaultData>
<IdLocation>^LEADNorthF8FE.CCDSocialHi11ECD</IdLocation>
<IndexLocation>^LEADNorthF8FE.CCDSocialHi11ECI</IndexLocation>
<StreamLocation>^LEADNorthF8FE.CCDSocialHi11ECS</StreamLocation>
<ExtentSize>33</ExtentSize>
<Data name="CCDSocialHistoryDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SocialHistoryID</Value>
</Value>
<Value name="3">
<Value>DocumentID</Value>
</Value>
<Value name="4">
<Value>ConceptDescription</Value>
</Value>
<Value name="5">
<Value>ObservationCode</Value>
</Value>
<Value name="6">
<Value>ObservationCodeSystem</Value>
</Value>
<Value name="7">
<Value>ObservationCodeSystemName</Value>
</Value>
<Value name="8">
<Value>ObservationDisplayName</Value>
</Value>
<Value name="9">
<Value>ValueCode</Value>
</Value>
<Value name="10">
<Value>ValueCodeSystem</Value>
</Value>
<Value name="11">
<Value>ValueCodeSystemName</Value>
</Value>
<Value name="12">
<Value>ValueDisplayName</Value>
</Value>
<Value name="13">
<Value>Units</Value>
</Value>
<Value name="14">
<Value>StatusCode</Value>
</Value>
<Value name="15">
<Value>ObservationIDExtension</Value>
</Value>
<Value name="16">
<Value>ObservationIDRoot</Value>
</Value>
<Value name="17">
<Value>AuthorTime</Value>
</Value>
<Value name="18">
<Value>Author</Value>
</Value>
<Value name="19">
<Value>EffectiveTimeLow</Value>
</Value>
<Value name="20">
<Value>EffectiveTimeHigh</Value>
</Value>
<Value name="21">
<Value>ProfileID</Value>
</Value>
<Value name="22">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","3","6","9","11","13","15","17","19","21","23","25","27","29","31","33"),$lb(0,0,0,0,1,1,1,1,0,1,1,1,1,0,1),$lb(822083584,822083584,855638016,855638016,905969664,905969664,956301312,956301312,825294848,822083584,855638016,855638016,889192448,889192448,922746880,922746880,956301312,825819136,842072064,822083584,855638016,855638016,889192448,889192448,922746880,922746880,956301312,842596352,858849280,822083584,855638016,858980352))</Histogram>
</Property>
<Property name="Author">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>3.3058%</Selectivity>
<OutlierSelectivity>.636364:</OutlierSelectivity>
<AverageFieldSize>7.67</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," 20111028100051"," 20120925100051"," 20121002100051"," 20130710214841.000-0500"," 20190911165042"," 20190911165046"),$lb(2,2,2,2,2,2,2,2,2,1,4,5,4,4,14),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842019121,825307186,842021170,809054773,825241650,842084400,858797873,858797873,959461681,838860800,905969664,540160049))</Histogram>
</Property>
<Property name="ConceptDescription">
<Selectivity>7.5758%</Selectivity>
<OutlierSelectivity>.545455:</OutlierSelectivity>
<AverageFieldSize>5.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," #SOC1"," #SOC1"," #SOC2"," #SOC2"," #SOC3"," #SOC3"," #SOCIALHISTORY1"," #SOCIALHISTORY3"),$lb(2,2,2,2,2,2,2,1,7,5,7,5,7,5,15),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,592662339,0,0,822083584,838860800,0,0,838860800,855638016,0,0,855638016,1229016136,822083584,855638016,539185999))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>5.5556%</Selectivity>
<AverageFieldSize>3.58</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","3","5","7","7","8","10","10","11","12","12","13","15","17","20","22"),$lb(0,0,0,1,0,0,2,1,1,2,1,1,1,0,1),$lb(822083584,822083584,855638016,855638016,889192448,889192448,922746880,0,0,922746880,939524096,939524096,825229312,0,0,805306368,822083584,822083584,838860800,0,0,838860800,855638016,855638016,889192448,889192448,922746880,825688064,842006528,805306368,838860800,842137600))</Histogram>
</Property>
<Property name="EffectiveTimeHigh">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>5.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," 1972"," 1972"," 1972"," 1972"," 1972"," 1972"," 20190911164841-0400"," 20190911164841-0400"),$lb(2,2,2,2,2,2,2,1,6,6,6,6,6,1,21),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,825833266,0,0,0,0,0,0,0,0,0,0,825833266,842019129,0,0,540160049))</Histogram>
</Property>
<Property name="EffectiveTimeLow">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>7.12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 1947"," 1947"," 1973"," 1973"," 1973"," 1973"," 2012"," 2012"," 2012"," 20140212"," 20140212"," 20190911164841-0400"," 20190911164841-0400"),$lb(2,2,1,6,3,6,6,6,1,6,6,4,10,4,21),$lb(536870912,0,0,0,0,0,825832503,0,0,876019712,926089216,0,0,0,0,0,0,825833267,842019122,0,0,0,0,838860800,875573809,0,0,875573809,959461681,0,0,540160049))</Histogram>
</Property>
<Property name="ObservationCode">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>10.27</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 160573003"," 160573003"," 230056004"," 230056004"," 230056004"," 230056004"," 72109-2"," 72166-2"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"),$lb(1,11,1,11,11,11,1,4,1,11,11,11,11,11,11),$lb(536870912,0,825634869,0,0,825634869,842215472,0,0,0,0,0,0,842215472,926036272,809053490,909520178,926036278,1095979845,0,0,0,0,0,0,0,0,0,0,0,0,541152083))</Histogram>
</Property>
<Property name="ObservationCodeSystem">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>23.52</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.5.4"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(23,23,23,23,23,19,21,24,24,24,24,24,24,24,24),$lb(540159537,0,0,0,0,0,0,0,0,0,0,892220416,908996864,822083584,959840256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ObservationCodeSystemName">
<Selectivity>7.5758%</Selectivity>
<OutlierSelectivity>.545455:</OutlierSelectivity>
<AverageFieldSize>5.48</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," ACTCODE"," ACTCODE"," ACTCODE"," ACTCODE"," HL7ACTCODE"," LOINC"," SNOMED CT"," SNOMEDCT"),$lb(2,2,2,2,2,2,2,1,9,9,9,1,1,1,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1094931523,0,0,0,0,0,0,1094931523,1212954433,1212954433,1280264526,1280264526,1397641037,541283328,1129578496,542330447))</Histogram>
</Property>
<Property name="ObservationDisplayName">
<Selectivity>10.0000%</Selectivity>
<AverageFieldSize>13.97</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," ALCOHOL CONSUMPTION"," ALCOHOL HISTORY"," ASSERTION"," ASSERTION"," ASSERTION"," ASSERTION"," CIGARETTE SMOKING"," CIGARETTE SMOKING"," CIGARETTE SMOKING"," CIGARETTE SMOKING"," EMPLOYMENT"," MARITAL STATUS"," TOBACCO USE AND EXPOSURE"),$lb(2,2,1,9,2,11,11,11,1,19,19,19,1,1,1),$lb(536870912,0,0,0,0,0,1095517007,1129270867,1212765012,1279479624,1397966162,0,0,0,0,0,0,1095979845,1128875841,0,0,0,0,0,0,1128875841,1162694732,1162694732,1296126537,1296126537,1414480449,542396226))</Histogram>
</Property>
<Property name="ObservationIDExtension">
<Selectivity>5.4545%</Selectivity>
<OutlierSelectivity>.727273:</OutlierSelectivity>
<AverageFieldSize>4.15</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 1"," 1"," 1"," 12882-1568234921000"," 300015-1568234921000"),$lb(2,2,2,2,2,2,2,2,2,2,1,3,3,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,0,0,0,842545202,825374776,858796080,540225584))</Histogram>
</Property>
<Property name="ObservationIDRoot">
<Selectivity>8.3333%</Selectivity>
<AverageFieldSize>27.73</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," 1.2.840.113619.21.1.4778906300703140889.3.11"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 1.3.6.1.4.1.16517"," 2.16.840.1.113883.19"," 2EA18518-01F0-430C-8E49-E1DDC85BCF92"," 37F76C51-6411-4E1D-8A37-957FD49D2CEF"," 37F76C51-6411-4E1D-8A37-957FD49D2CEF"," 45EFB604-7049-4A2E-AD33-D38556C9636C"," 45EFB604-7049-4A2E-AD33-D38556C9636C"," 9B56C25D-9104-45EE-9FA4-E0F3AFAA01C1"," 9B56C25D-9104-45EE-9FA4-E0F3AFAA01C1"," D065ED71-C4A2-43B7-BFC1-FD412404C942"),$lb(2,2,1,3,19,19,1,2,1,38,1,38,1,38,1),$lb(536870912,0,0,0,0,0,825111086,841889844,858666542,0,0,0,0,825111342,841888054,774977070,1161900344,843399473,859260471,0,0,859260471,875906374,0,0,875906374,960640310,0,0,960640310,1144010293,541339702))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="SocialHistoryID">
<Selectivity>5.4545%</Selectivity>
<OutlierSelectivity>.727273:</OutlierSelectivity>
<AverageFieldSize>4.15</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," 1"," 1"," 1"," 12882-1568234921000"," 300015-1568234921000"),$lb(2,2,2,2,2,2,2,2,2,2,1,3,3,2,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,822083584,0,0,0,0,0,842545202,825374776,858796080,540225584))</Histogram>
</Property>
<Property name="StatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="Units">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ValueCode">
<Selectivity>7.8788%</Selectivity>
<OutlierSelectivity>.606061:</OutlierSelectivity>
<AverageFieldSize>5.82</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," 219006"," 266919005"," 266919005"," 266919005"," 266927001"," 428041000124106"," 449868002"),$lb(2,2,2,2,2,2,2,2,1,2,11,11,5,1,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,842086704,825831472,909523249,0,0,0,0,825831472,842477616,842413625,875706416,842543156,876165174,540292153))</Histogram>
</Property>
<Property name="ValueCodeSystem">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>12</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(2,2,2,2,2,2,2,1,24,24,24,24,24,24,24),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ValueCodeSystemName">
<Selectivity>33.3333%</Selectivity>
<AverageFieldSize>5.76</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMED CT"," SNOMEDCT"),$lb(2,2,2,2,2,2,2,2,1,11,11,11,11,11,7),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1397641037,0,0,0,0,0,0,0,0,0,0,541283328,1129578496,542330447))</Histogram>
</Property>
<Property name="ValueDisplayName">
<Selectivity>5.0505%</Selectivity>
<OutlierSelectivity>.545455:</OutlierSelectivity>
<AverageFieldSize>10.18</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," ALCOHOL HISTORY"," CURRENT SOME DAY SMOKER"," CURRENTLY EMPLOYED"," NEVER SMOKED TOBACCO (FINDING)"," NEVER SMOKER"," NEVER SMOKER"," NEVER SMOKER"," UNKNOWN IF EVER SMOKED"),$lb(2,2,2,2,2,2,2,1,1,8,1,12,14,14,1),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1095517007,1095517007,1129665106,542330701,1280909381,1129665106,1313166917,1142969423,1375731712,0,0,0,0,1313166917,1431194446,542461515))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Sections.CCDVitalSign">
<Super>%Persistent</Super>
<TimeChanged>67326,53778.1082213</TimeChanged>
<TimeCreated>67081,42010.8352325</TimeCreated>

<Property name="DocumentID">
<Type>LEADNorth.CDAProfiler.Sections.CCDDocument</Type>
</Property>

<Property name="VitalSignID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="xDate">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Value">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Unit">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OrganizerClassCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OrganizerMoodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OrganizerCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OrganizerCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OrganizerDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="OrganizerStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="OrganizerEffectiveTimeLow">
<Type>%String</Type>
</Property>

<Property name="OrganizerEffectiveTimeHigh">
<Type>%String</Type>
</Property>

<Property name="ObservationIDExtension">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationIDRoot">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ObservationCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ObservationStatusCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="ObservationEffectiveTimeLow">
<Type>%String</Type>
</Property>

<Property name="ObservationEffectiveTimeHigh">
<Type>%String</Type>
</Property>

<Property name="AuthorTime">
<Type>%String</Type>
</Property>

<Property name="ProfileID">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="TranslationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="TranslationCodeSystem">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="TranslationDisplayName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="InterpretationCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="MethodCode">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="XPath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^LEADNorth.CDAF8FE.CCDVitalSignD</DataLocation>
<DefaultData>CCDVitalSignDefaultData</DefaultData>
<IdLocation>^LEADNorth.CDAF8FE.CCDVitalSignD</IdLocation>
<IndexLocation>^LEADNorth.CDAF8FE.CCDVitalSignI</IndexLocation>
<StreamLocation>^LEADNorth.CDAF8FE.CCDVitalSignS</StreamLocation>
<ExtentSize>107</ExtentSize>
<Data name="CCDVitalSignDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentID</Value>
</Value>
<Value name="3">
<Value>VitalSignID</Value>
</Value>
<Value name="4">
<Value>xDate</Value>
</Value>
<Value name="5">
<Value>Value</Value>
</Value>
<Value name="6">
<Value>Unit</Value>
</Value>
<Value name="7">
<Value>Description</Value>
</Value>
<Value name="8">
<Value>OrganizerClassCode</Value>
</Value>
<Value name="9">
<Value>OrganizerMoodCode</Value>
</Value>
<Value name="10">
<Value>OrganizerCode</Value>
</Value>
<Value name="11">
<Value>OrganizerCodeSystem</Value>
</Value>
<Value name="12">
<Value>OrganizerDisplayName</Value>
</Value>
<Value name="13">
<Value>OrganizerStatusCode</Value>
</Value>
<Value name="14">
<Value>OrganizerEffectiveTimeLow</Value>
</Value>
<Value name="15">
<Value>OrganizerEffectiveTimeHigh</Value>
</Value>
<Value name="16">
<Value>ObservationIDExtension</Value>
</Value>
<Value name="17">
<Value>ObservationIDRoot</Value>
</Value>
<Value name="18">
<Value>ObservationCode</Value>
</Value>
<Value name="19">
<Value>ObservationCodeSystem</Value>
</Value>
<Value name="20">
<Value>ObservationDisplayName</Value>
</Value>
<Value name="21">
<Value>ObservationStatusCode</Value>
</Value>
<Value name="22">
<Value>ObservationEffectiveTimeLow</Value>
</Value>
<Value name="23">
<Value>ObservationEffectiveTimeHigh</Value>
</Value>
<Value name="24">
<Value>AuthorTime</Value>
</Value>
<Value name="25">
<Value>ProfileID</Value>
</Value>
<Value name="26">
<Value>TranslationCode</Value>
</Value>
<Value name="27">
<Value>TranslationCodeSystem</Value>
</Value>
<Value name="28">
<Value>TranslationDisplayName</Value>
</Value>
<Value name="29">
<Value>InterpretationCode</Value>
</Value>
<Value name="30">
<Value>MethodCode</Value>
</Value>
<Value name="31">
<Value>XPath</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,16,$lb("-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000","-10000000000000000000"),$lb(21,21,21,21,21,21,21,21,21,21,21,21,21,21,21),$lb(758198320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,758198320))</Histogram>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","8","16","23","30","37","44","51","58","65","72","79","86","93","100","107"),$lb(0,0,0,0,1,0,0,1,0,0,1,0,0,0,2),$lb(822083584,822083584,939524096,939524096,825622528,825622528,842203136,842203136,858783744,805306368,922746880,859242496,875823104,875823104,892403712,822083584,939524096,892862464,909443072,909443072,926023680,838860800,956301312,926482432,943063040,943063040,959643648,959643648,825241600,805306368,922746880,825243392))</Histogram>
</Property>
<Property name="AuthorTime">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="Description">
<Selectivity>2.4922%</Selectivity>
<OutlierSelectivity>.17757:"Height"</OutlierSelectivity>
<AverageFieldSize>17.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" BMI"," BODY MASS INDEX CALCULATED"," BODY TEMPERATURE"," BP DIASTOLIC"," BP SYSTOLIC"," BP SYSTOLIC"," HEART RATE"," HEIGHT"," HEIGHT"," HEIGHT/LENGTH MEASURED"," INTRAVASCULAR SYSTOLIC"," NO VITAL SIGN DATA IS APPLICABLE"," PATIENT BODY WEIGHT - MEASURED"," SYSTOLIC BLOOD PRESSURE"," WEIGHT"," WEIGHT MEASURED"),$lb(2,6,2,4,13,1,3,8,7,1,1,1,1,1,7),$lb(541216073,1296629760,1329879328,1296126803,1413827920,1329879328,1344291913,1145651539,1398362964,0,0,1112547411,1212498258,1095914528,1229408340,0,0,0,793527630,1212500295,1229870162,1229870162,1313808470,1313808470,1346458697,1346458697,1398362964,1398362964,1464158535,0,541934913,542590281))</Histogram>
</Property>
<Property name="DocumentID">
<Selectivity>5.5556%</Selectivity>
<AverageFieldSize>3.36</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,1,0,$lb("1","2","3","3","4","4","5","6","7","8","10","11","12","16","21","22"),$lb(0,0,1,0,1,0,0,0,0,0,1,1,1,0,1),$lb(822083584,822083584,838860800,838860800,855638016,0,0,855638016,872415232,0,0,872415232,889192448,889192448,905969664,905969664,922746880,922746880,939524096,939524096,825229312,805306368,822083584,822083584,838860800,838860800,905969664,825622528,842072064,822083584,838860800,842137600))</Histogram>
</Property>
<Property name="InterpretationCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="MethodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationCode">
<Selectivity>7.1429%</Selectivity>
<AverageFieldSize>7.75</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 2710-2"," 3141-9"," 3141-9"," 3141-9"," 39156-5"," 39156-5"," 8302-2"," 8302-2"," 8302-2"," 8462-4"," 8462-4"," 8480-6"," 8480-6"," 8480-6"," 9279-1"),$lb(1,1,8,8,2,9,1,8,8,2,8,3,8,8,1),$lb(536870912,0,842477872,842477872,858862641,0,0,0,0,825504045,959526198,0,0,859386165,942878770,0,0,0,0,858796589,875967021,0,0,909258036,942681398,0,0,0,0,942946352,959592249,540619319))</Histogram>
</Property>
<Property name="ObservationCodeSystem">
<Selectivity>6.5421%</Selectivity>
<OutlierSelectivity>.934579:"2.16.840.1.113883.6.1"</OutlierSelectivity>
<AverageFieldSize>21.63</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"),$lb(1,23,23,23,23,23,23,23,23,23,23,23,23,23,23),$lb(536870912,0,841888054,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="ObservationDisplayName">
<Selectivity>2.4922%</Selectivity>
<OutlierSelectivity>.17757:"Height"</OutlierSelectivity>
<AverageFieldSize>17.91</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" BMI"," BODY MASS INDEX CALCULATED"," BODY TEMPERATURE"," BP DIASTOLIC"," BP SYSTOLIC"," BP SYSTOLIC"," HEART RATE"," HEIGHT"," HEIGHT"," HEIGHT/LENGTH MEASURED"," INTRAVASCULAR SYSTOLIC"," NO VITAL SIGN DATA IS APPLICABLE"," PATIENT BODY WEIGHT - MEASURED"," SYSTOLIC BLOOD PRESSURE"," WEIGHT"," WEIGHT MEASURED"),$lb(2,6,2,4,13,1,3,8,7,1,1,1,1,1,7),$lb(541216073,1296629760,1329879328,1296126803,1413827920,1329879328,1344291913,1145651539,1398362964,0,0,1112547411,1212498258,1095914528,1229408340,0,0,0,793527630,1212500295,1229870162,1229870162,1313808470,1313808470,1346458697,1346458697,1398362964,1398362964,1464158535,0,541934913,542590281))</Histogram>
</Property>
<Property name="ObservationEffectiveTimeHigh">
<Selectivity>4.3478%</Selectivity>
<AverageFieldSize>13.79</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 19991114"," 19991114"," 20000407"," 20000407"," 20110925"," 20111002"," 20120330"," 20120815"," 20121002"," 20130130"," 20130710220000.000-0500"," 20140212130333"," 20141001103026-0500"," 20190911164841-0400"," 202306190000-0600"," 202306190000-0600"),$lb(10,1,10,3,5,4,6,5,4,6,4,5,4,3,19),$lb(540096825,0,0,825833785,842018864,0,0,808464436,825307193,809054773,825241650,825307184,842019635,858992640,942748928,808988981,825241650,842084400,858796339,825438208,925970482,858797873,875573809,808595762,825241649,875638832,959461681,825831481,842215478,0,0,540160050))</Histogram>
</Property>
<Property name="ObservationEffectiveTimeLow">
<Selectivity>4.3478%</Selectivity>
<AverageFieldSize>13.79</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 19991114"," 19991114"," 20000407"," 20000407"," 20110925"," 20111002"," 20120330"," 20120815"," 20121002"," 20130130"," 20130710220000.000-0500"," 20140212130333"," 20141001103026-0500"," 20190911164841-0400"," 202306190000-0600"," 202306190000-0600"),$lb(10,1,10,3,5,4,6,5,4,6,4,5,4,3,19),$lb(540096825,0,0,825833785,842018864,0,0,808464436,825307193,809054773,825241650,825307184,842019635,858992640,942748928,808988981,825241650,842084400,858796339,825438208,925970482,858797873,875573809,808595762,825241649,875638832,959461681,825831481,842215478,0,0,540160050))</Histogram>
</Property>
<Property name="ObservationIDExtension">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationIDRoot">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="ObservationStatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="OrganizerClassCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>9</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"," CLUSTER"),$lb(9,9,9,9,9,9,9,9,9,9,9,9,9,9,9),$lb(541281365,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541281365))</Histogram>
</Property>
<Property name="OrganizerCode">
<Selectivity>8.4112%</Selectivity>
<OutlierSelectivity>.915888:46680005</OutlierSelectivity>
<AverageFieldSize>9.92</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 46680005"," 74728-7"," 74728-7"),$lb(10,10,10,10,10,10,10,10,10,10,10,10,10,1,9),$lb(540292662,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,875968056,926168882,0,0,540488759))</Histogram>
</Property>
<Property name="OrganizerCodeSystem">
<Selectivity>8.4112%</Selectivity>
<OutlierSelectivity>.915888:"2.16.840.1.113883.6.96"</OutlierSelectivity>
<AverageFieldSize>23.92</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.1"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"," 2.16.840.1.113883.6.96"),$lb(23,21,24,24,24,24,24,24,24,24,24,24,24,24,24),$lb(540159537,0,0,822083584,959840256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,540159537))</Histogram>
</Property>
<Property name="OrganizerDisplayName">
<Selectivity>6.5421%</Selectivity>
<OutlierSelectivity>.803738:"Vital signs"</OutlierSelectivity>
<AverageFieldSize>13</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"," VITAL SIGNS"),$lb(13,13,13,13,13,13,13,13,13,13,13,13,13,13,13),$lb(542525780,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,542525780))</Histogram>
</Property>
<Property name="OrganizerEffectiveTimeHigh">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="OrganizerEffectiveTimeLow">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="OrganizerMoodCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"," EVN"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541414990,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541414990))</Histogram>
</Property>
<Property name="OrganizerStatusCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>11</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"," COMPLETED"),$lb(11,11,11,11,11,11,11,11,11,11,11,11,11,11,11),$lb(541282125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541282125))</Histogram>
</Property>
<Property name="ProfileID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>5</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"," DWA"),$lb(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5),$lb(541349697,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541349697))</Histogram>
</Property>
<Property name="TranslationCode">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="TranslationCodeSystem">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="TranslationDisplayName">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="Unit">
<Selectivity>5.6075%</Selectivity>
<OutlierSelectivity>.327103:"mm[Hg]"</OutlierSelectivity>
<AverageFieldSize>5.99</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," %"," 1"," 1"," CM"," CM"," KG"," KG"," MM[HG]"," MM[HG]"," MM[HG]"," MM[HG]"," MM[HG]"," [IN_US]"," [LB_AV]"," [LB_AV]"),$lb(1,1,3,1,4,1,4,1,8,8,8,8,1,2,9),$lb(536870912,0,620756992,620756992,822083584,0,0,822083584,1129119744,0,0,1129119744,1262944256,0,0,1262944256,1296915272,0,0,0,0,0,0,0,0,1296915272,1531530847,1229872981,1279418177,0,0,542854210))</Histogram>
</Property>
<Property name="Value">
<Selectivity>1.6949%</Selectivity>
<AverageFieldSize>4.87</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," 100"," 120"," 132"," 145"," 160"," 177"," 178"," 2.15"," 25.8"," 37.2"," 68"," 80"," 86"," 88"," 99"),$lb(1,2,2,2,2,2,3,1,2,1,1,1,2,2,1),$lb(536870912,0,825241600,808452096,842006528,842006528,858914816,858914816,875888640,875888640,909115392,909115392,926351360,922746880,939524096,825702400,841888053,774976768,892221440,842346040,859254322,859254322,909639680,909639680,942669824,805306368,905969664,905969664,939524096,943194112,960036864,540621056))</Histogram>
</Property>
<Property name="VitalSignID">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="XPath">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>2</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "),$lb(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),$lb(536870912,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536870912))</Histogram>
</Property>
<Property name="xDate">
<Selectivity>4.7619%</Selectivity>
<AverageFieldSize>12.19</AverageFieldSize>
<Histogram>$lb(.06666666666666666667,0,0,$lb(" "," "," 19991114"," 20000407"," 20000407"," 20110312"," 20111002"," 20120330"," 20120806"," 20121002"," 20130130"," 20130710220000.000-0500"," 20140212130114"," 20141001103026-0500"," 202306190000-0600"," 202306190000-0600"),$lb(2,1,1,10,3,5,4,6,5,4,6,4,5,3,19),$lb(536870912,0,0,0,825833785,825833785,842018864,0,0,808464436,825307187,808661298,825241650,825307184,842019635,858992640,942683648,808988726,825241650,842084400,858796339,825438208,925970482,858797873,875573809,808595762,825241649,825504048,842215478,0,0,540160050))</Histogram>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-16</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="LEADNorth.CDAProfiler.Utils.DBInsert">
<Super>%Persistent</Super>
<TimeChanged>67338,60531.7827853</TimeChanged>
<TimeCreated>67081,47052.2433452</TimeCreated>

<Method name="SectionStats">
<Description>
Ensures the specified section name is recorded in the SectionsPresent list for the given document.
- If the section already exists, does nothing.
- If the document is not found, returns an error.
- If the section is new, it is appended and the document is saved.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>documentID:%Integer,sectionName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Attempt to open the document by ID
    Set doc = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
    If '$IsObject(doc) {
        Quit $$$ERROR($$$GeneralError, "Document not found")
    }

    // Normalize the current sections string to avoid substring false positives
    Set cur = "," _ doc.SectionsPresent _ ","

    // If section is not already recorded, append it
    If cur'[("," _ sectionName _ ",") {
        If doc.SectionsPresent'="" {
            Set doc.SectionsPresent = doc.SectionsPresent _ "," _ sectionName
        } Else {
            Set doc.SectionsPresent = sectionName
        }

        // Save the updated document
        Set sc = doc.%Save()
        If $$$ISERR(sc) Quit sc
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertDocumentMetadata">
<Description><![CDATA[
This class provides utility methods for inserting CCD section data into the database.

Each `Insert[Section]Data(...)` method follows the same general pattern:
1. Reads an XML stream into memory as a string.
2. Uses `%XML.TextReader` to parse the XML string token by token.
3. For each complete XML element representing a data entry (e.g., `<Allergy>`, `<Medication>`, etc.),
   the method:
   - Extracts relevant child node values.
   - Creates a new persistent object representing the section (e.g., `CCDAllergy`, `CCDMedication`, etc.).
   - Sets all parsed properties into the object.
   - Saves the object to the database.
   - Calls `SectionStats(documentID, sectionName)` to register the section in the CCDDocument's `SectionsPresent` field.
4. If a required parent document (`CCDDocument`) is not found, logs the issue and skips the entry.
5. If saving fails, logs and continues without terminating the loop.

These methods support structured CCD profiling workflows by parsing each section separately and maintaining metadata
about which sections are present in a given document.
]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>docXml:%Stream.GlobalCharacter,*documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set docString = docXml.Read()

    Set textreader = ##class(%XML.TextReader).%New(1)

    Set status = ##class(%XML.TextReader).ParseString(docString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set patientID = ""
    Set documentDate = ""
    Set allSections = ""
    Set sectionsWithEncounterNumbers = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "PatientID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set patientID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DocumentDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set documentDate = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DocumentDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set documentDate = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AllSections" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allSections = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "SectionsWithEncounterNumbers" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set sectionsWithEncounterNumbers = textreader.Value
                }
            }
        }
    }

    //Write "PatientID: ", patientID, !
    //Write "DocumentDate: ", documentDate, !

    If patientID'="" && documentDate'="" {
        Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%New()
        Set document.ProfileID = profileID
        Set document.PatientID = +patientID
        Set document.DocumentDate = $zdateh($e(documentDate,1,8),8)  // Convert to an internal date format
        Set document.AllSections = allSections
        Set document.SectionsWithEncounterNumbers = sectionsWithEncounterNumbers

        //Write "docdate: ", document.DocumentDate, !
        //Write "patid: ", document.PatientID, !

        Set saveStatus = document.%Save()
        If $$$ISERR(saveStatus) {
            Write "Error saving document metadata.", !
            Do $system.OBJ.DisplayError(saveStatus)
            Quit saveStatus
        }

        //Write "DocumentID: ", document.DocumentID, !
        Set documentID = document.DocumentID
    } Else {
        Write "PatientID or DocumentDate is missing from the XML.", !
        Quit $$$ERROR($$$GeneralError, "PatientID or DocumentDate missing.")
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertAllergyData">
<ClassMethod>1</ClassMethod>
<FormalSpec>allergyXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set allergyString = allergyXml.Read()
	//write !, allergyString, !
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(allergyString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set allergyID = ""
    Set allergyCode = ""
    Set allergyCodeSystem = ""
    Set allergyCodeSystemName = ""
    Set allergyDisplayName = ""
    Set categoryCode = ""
    Set categoryCodeSystem = ""
    Set categoryCodeSystemName = ""
    Set categoryDisplayName = ""
    Set reactionCode = ""
    Set reactionCodeSystem = ""
    Set reactionCodeSystemName = ""
    Set reactionDisplayName = ""
    Set severityCode = ""
    Set severityCodeSystem = ""
    Set severityCodeName = ""
    Set severityDisplayName = ""
    Set provider = ""
    Set actIdExtension = ""
    Set actIdRoot = ""
    Set actClassCode = ""
    Set actMoodCode = ""
    Set actStatusCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set observationCode = ""
    Set observationCodeSystem = ""
    Set observationDisplayName = ""
    Set observationStatusCode = ""
    Set observationEffectiveTimeLow = ""
    Set observationEffectiveTimeHigh = ""
    Set statusCode = ""
    Set statusCodeSystem = ""
    Set statusCodeSystemName = ""
    Set statusDisplayName = ""
    Set referenceAllergyId = ""
    Set referenceReactionId = ""
    Set referenceSeverityId = ""
    Set referenceStatusId = ""
    Set representedOrganization = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "AllergyID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allergyID = textreader.Value
                    write allergyID
                }
            }
            ElseIf textreader.LocalName = "AllergyCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allergyCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AllergyCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allergyCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AllergyCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allergyCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AllergyDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set allergyDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CategoryCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set categoryCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CategoryCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set categoryCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CategoryCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set categoryCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CategoryDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set categoryDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReactionCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set reactionCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReactionCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set reactionCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReactionCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set reactionCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReactionDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set reactionDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "SeverityCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set severityCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "SeverityCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set severityCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "SeverityCodeName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set severityCodeName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "SeverityDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set severityDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Provider" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set provider = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ActIdExtension" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set actIdExtension = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ActIdRoot" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set actIdRoot = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ActClassCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set actClassCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ActMoodCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set actMoodCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ActStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set actStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationEffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationEffectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationEffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationEffectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReferenceAllergyId" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set referenceAllergyId = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReferenceReactionId" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set referenceReactionId = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReferenceSeverityId" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set referenceSeverityId = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReferenceStatusId" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set referenceStatusId = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RepresentedOrganization" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set representedOrganization = textreader.Value
                }
            }
        } 
        ElseIf (textreader.LocalName = "Allergy") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }
            Set allergy = ##class(LEADNorth.CDAProfiler.Sections.CCDAllergy).%New()
            Set allergy.DocumentID = document
            Set allergy.AllergyID = allergyID
            Set allergy.AllergyCode = allergyCode
            Set allergy.AllergyCodeSystem = allergyCodeSystem
            Set allergy.AllergyCodeSystemName = allergyCodeSystemName
            Set allergy.AllergyDisplayName = allergyDisplayName
            Set allergy.CategoryCode = categoryCode
            Set allergy.CategoryCodeSystem = categoryCodeSystem
            Set allergy.CategoryCodeSystemName = categoryCodeSystemName
            Set allergy.CategoryDisplayName = categoryDisplayName
            Set allergy.ReactionCode = reactionCode
            Set allergy.ReactionCodeSystem = reactionCodeSystem
            Set allergy.ReactionCodeSystemName = reactionCodeSystemName
            Set allergy.ReactionDisplayName = reactionDisplayName
            Set allergy.SeverityCode = severityCode
            Set allergy.SeverityCodeSystem = severityCodeSystem
            Set allergy.SeverityCodeName = severityCodeName
            Set allergy.SeverityDisplayName = severityDisplayName
            Set allergy.Provider = provider
            Set allergy.ActIdExtension = actIdExtension
            Set allergy.ActIdRoot = actIdRoot
            Set allergy.ActClassCode = actClassCode
            Set allergy.ActMoodCode = actMoodCode
            Set allergy.ActStatusCode = actStatusCode
            Set allergy.EffectiveTimeLow = effectiveTimeLow
            Set allergy.EffectiveTimeHigh = effectiveTimeHigh
            Set allergy.ObservationCode = observationCode
            Set allergy.ObservationCodeSystem = observationCodeSystem
            Set allergy.ObservationDisplayName = observationDisplayName
            Set allergy.ObservationStatusCode = observationStatusCode
            Set allergy.ObservationEffectiveTimeLow = observationEffectiveTimeLow
            Set allergy.ObservationEffectiveTimeHigh = observationEffectiveTimeHigh
            Set allergy.StatusCode = statusCode
            Set allergy.StatusCodeSystem = statusCodeSystem
            Set allergy.StatusCodeSystemName = statusCodeSystemName
            Set allergy.StatusDisplayName = statusDisplayName
            Set allergy.ReferenceAllergyId = referenceAllergyId
            Set allergy.ReferenceReactionId = referenceReactionId
            Set allergy.ReferenceSeverityId = referenceSeverityId
            Set allergy.ReferenceStatusId = referenceStatusId
            Set allergy.RepresentedOrganization = representedOrganization
            Set allergy.ProfileID = profileID

            Set saveStatus = allergy.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving allergy data.", !
                Continue
            } else {
	        	Do ..SectionStats(documentID, "Allergy")
        	}

            Set allergyID = ""
            Set allergyCode = ""
            Set allergyCodeSystem = ""
            Set allergyCodeSystemName = ""
            Set allergyDisplayName = ""
            Set categoryCode = ""
            Set categoryCodeSystem = ""
            Set categoryCodeSystemName = ""
            Set categoryDisplayName = ""
            Set reactionCode = ""
            Set reactionCodeSystem = ""
            Set reactionCodeSystemName = ""
            Set reactionDisplayName = ""
            Set severityCode = ""
            Set severityCodeSystem = ""
            Set severityCodeName = ""
            Set severityDisplayName = ""
            Set provider = ""
            Set actIdExtension = ""
            Set actIdRoot = ""
            Set actClassCode = ""
            Set actMoodCode = ""
            Set actStatusCode = ""
            Set effectiveTimeLow = ""
            Set effectiveTimeHigh = ""
            Set observationCode = ""
            Set observationCodeSystem = ""
            Set observationDisplayName = ""
            Set observationStatusCode = ""
            Set observationEffectiveTimeLow = ""
            Set observationEffectiveTimeHigh = ""
            Set statusCode = ""
            Set statusCodeSystem = ""
            Set statusCodeSystemName = ""
            Set statusDisplayName = ""
            Set referenceAllergyId = ""
            Set referenceReactionId = ""
            Set referenceSeverityId = ""
            Set referenceStatusId = ""
            Set representedOrganization = ""
        }
    }
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertMedicationData">
<ClassMethod>1</ClassMethod>
<FormalSpec>medicationXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set medicationString = medicationXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(medicationString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set drugName = ""
    Set genericName = ""
    Set dose = ""
    Set doseUnits = ""
    Set frequency = ""
    Set route = ""
    Set site = ""
    Set administrationUnit = ""
    Set startDate = ""
    Set endDate = ""
    Set provider = ""
    Set ndc = ""
    Set rxNormCode = ""
    Set gpi = ""
    Set statusCode = ""

    While textreader.Read() {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "DrugName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set drugName = textreader.Value
                }
            } ElseIf textreader.LocalName = "GenericName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set genericName = textreader.Value
                }
            } ElseIf textreader.LocalName = "Dose" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set dose = textreader.Value
                }
            } ElseIf textreader.LocalName = "DoseUnits" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set doseUnits = textreader.Value
                }
            } ElseIf textreader.LocalName = "Frequency" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set frequency = textreader.Value
                }
            } ElseIf textreader.LocalName = "Route" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set route = textreader.Value
                }
            } ElseIf textreader.LocalName = "Site" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set site = textreader.Value
                }
            } ElseIf textreader.LocalName = "AdministrationUnit" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set administrationUnit = textreader.Value
                }
            } ElseIf textreader.LocalName = "StartDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set startDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "EndDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set endDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "Provider" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set provider = textreader.Value
                }
            } ElseIf textreader.LocalName = "NDC" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set ndc = textreader.Value
                }
            } ElseIf textreader.LocalName = "RxNormCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set rxNormCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "GPI" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set gpi = textreader.Value
                }
            } ElseIf textreader.LocalName = "Status" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }

        } ElseIf (textreader.LocalName = "Medication") && (textreader.NodeType = "endelement") {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                Set medication = ##class(LEADNorth.CDAProfiler.Sections.CCDMedication).%New()
                Set medication.DocumentID = document
                Set medication.DrugName = drugName
                Set medication.GenericName = genericName
                Set medication.Dose = dose
                Set medication.DoseUnits = doseUnits
                Set medication.Frequency = frequency
                Set medication.Route = route
                Set medication.Site = site
                Set medication.AdministrationUnit = administrationUnit
                Set medication.StartDate = startDate
                Set medication.EndDate = endDate
                Set medication.Provider = provider
                Set medication.NDC = ndc
                Set medication.RxNormCode = rxNormCode
                Set medication.GPI = gpi
                Set medication.Status = statusCode
                Set medication.ProfileID = profileID

                Set saveStatus = medication.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving medication data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "Medication")
        		}

                Set drugName = ""
                Set genericName = ""
                Set dose = ""
                Set doseUnits = ""
                Set frequency = ""
                Set route = ""
                Set site = ""
                Set administrationUnit = ""
                Set startDate = ""
                Set endDate = ""
                Set provider = ""
                Set ndc = ""
                Set rxNormCode = ""
                Set gpi = ""
                Set statusCode = ""
            }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertProblemsData">
<ClassMethod>1</ClassMethod>
<FormalSpec>problemsXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set problemsString = problemsXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(problemsString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set problemID = ""
    Set problemClassCode = ""
    Set moodCode = ""
    Set statusCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set problemTypeCode = ""
    Set problemTypeName = ""
    Set valueCode = ""
    Set valueDisplayName = ""
    Set codeSystem = ""
    Set codeSystemName = ""
    Set authorTime = ""
    Set author = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "ProblemID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set problemID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ProblemClassCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set problemClassCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MoodCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set moodCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ProblemTypeCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set problemTypeCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ProblemTypeName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set problemTypeName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ValueCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ValueDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set codeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set codeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Author" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set author = textreader.Value
                }
            }

        } ElseIf (textreader.LocalName = "Problem") && (textreader.NodeType = "endelement") {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                Set problem = ##class(LEADNorth.CDAProfiler.Sections.CCDProblem).%New()
                Set problem.DocumentID = document
                Set problem.ProblemID = problemID
                Set problem.ProblemClassCode = problemClassCode
                Set problem.MoodCode = moodCode
                Set problem.StatusCode = statusCode
                Set problem.EffectiveTimeLow = effectiveTimeLow
                Set problem.EffectiveTimeHigh = effectiveTimeHigh
                Set problem.ProblemTypeCode = problemTypeCode
                Set problem.ProblemTypeName = problemTypeName
                Set problem.ValueCode = valueCode
                Set problem.ValueDisplayName = valueDisplayName
                Set problem.CodeSystem = codeSystem
                Set problem.CodeSystemName = codeSystemName
                Set problem.AuthorTime = authorTime
                Set problem.Author = author
                Set problem.ProfileID = profileID

                Set saveStatus = problem.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving problem data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "Problem")
        		}

                Set problemID = ""
                Set problemClassCode = ""
                Set moodCode = ""
                Set statusCode = ""
                Set effectiveTimeLow = ""
                Set effectiveTimeHigh = ""
                Set diagnosisCode = ""
                Set diagnosisDisplayName = ""
                Set valueCode = ""
                Set valueDisplayName = ""
                Set codeSystem = ""
                Set codeSystemName = ""
                Set authorTime = ""
                Set author = ""
            }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertDiagnosisData">
<ClassMethod>1</ClassMethod>
<FormalSpec>diagnosisXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set diagnosisString = diagnosisXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(diagnosisString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }
    
    Set diagnosisID = ""
    Set diagnosisTypeCode = ""
    Set diagnosisTypeCodeSystem = ""
    Set diagnosisTypeCodeSystemName = ""
    Set diagnosisTypeDisplayName = ""
    Set diagnosisEffectiveTimeLow = ""
    Set diagnosisEffectiveTimeHigh = ""
    Set diagnosisCode = ""
    Set diagnosisCodeSystem = ""
    Set diagnosisCodeSystemName = ""
    Set diagnosisCodeDisplayName = ""
    Set diagnosisStatusCode = ""
    Set diagnosisEncounterNumber = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "DiagnosisID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisTypeCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisTypeCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisTypeCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisTypeCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisTypeCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisTypeCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisTypeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisTypeDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisEffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisEffectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisEffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisEffectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisCodeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisCodeDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DiagnosisEncounterNumber" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set diagnosisEncounterNumber = textreader.Value
                }
            }

        } ElseIf (textreader.LocalName = "Diagnosis") && (textreader.NodeType = "endelement") {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }
                Set diagnosis = ##class(LEADNorth.CDAProfiler.Sections.CCDDiagnosis).%New()
                Set diagnosis.DocumentID = document
                Set diagnosis.DiagnosisID = diagnosisID
                Set diagnosis.DiagnosisTypeCode = diagnosisTypeCode
                Set diagnosis.DiagnosisTypeCodeSystem = diagnosisTypeCodeSystem
                Set diagnosis.DiagnosisTypeCodeSystemName = diagnosisTypeCodeSystemName
                Set diagnosis.DiagnosisTypeDisplayName = diagnosisTypeDisplayName
                Set diagnosis.DiagnosisEffectiveTimeLow = diagnosisEffectiveTimeLow
                Set diagnosis.DiagnosisEffectiveTimeHigh = diagnosisEffectiveTimeHigh
                Set diagnosis.DiagnosisCode = diagnosisCode
                Set diagnosis.DiagnosisCodeSystem = diagnosisCodeSystem
                Set diagnosis.DiagnosisCodeSystemName = diagnosisCodeSystemName
                Set diagnosis.DiagnosisCodeDisplayName = diagnosisCodeDisplayName
                Set diagnosis.DiagnosisStatusCode = diagnosisStatusCode
                Set diagnosis.DiagnosisEncounterNumber = diagnosisEncounterNumber
                Set diagnosis.ProfileID = profileID

                Set saveStatus = diagnosis.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving diagnosis data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "Diagnosis")
        		}

                Set diagnosisID = ""
			    Set diagnosisTypeCode = ""
			    Set diagnosisTypeCodeSystem = ""
			    Set diagnosisTypeCodeSystemName = ""
			    Set diagnosisTypeDisplayName = ""
			    Set diagnosisEffectiveTimeLow = ""
			    Set diagnosisEffectiveTimeHigh = ""
			    Set diagnosisCode = ""
			    Set diagnosisCodeSystem = ""
			    Set diagnosisCodeSystemName = ""
			    Set diagnosisCodeDisplayName = ""
			    Set diagnosisStatusCode = ""
			    Set diagnosisEncounterNumber = ""
            }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertProceduresData">
<ClassMethod>1</ClassMethod>
<FormalSpec>proceduresXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set proceduresString = proceduresXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(proceduresString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set procedureCode = ""
    Set procedureClassCode = ""
    Set moodCode = ""
    Set status = ""
    Set codeDisplayName = ""
    Set codeSystem = ""
    Set codeSystemName = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set performerID = ""
    Set performerName = ""
    Set performerOrganization = ""
    Set performerAddress = ""
    Set authorTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "ProcedureCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set procedureCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ProcedureClassCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set procedureClassCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MoodCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set moodCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Status" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set status = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CodeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set codeDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set codeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set codeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerOrganization" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerOrganization = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerAddress = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }

        } ElseIf (textreader.LocalName = "Procedure") && (textreader.NodeType = "endelement") {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                Set procedure = ##class(LEADNorth.CDAProfiler.Sections.CCDProcedure).%New()
                Set procedure.DocumentID = document
                Set procedure.ProcedureCode = procedureCode
                Set procedure.ProcedureClassCode = procedureClassCode
                Set procedure.MoodCode = moodCode
                Set procedure.Status = status
                Set procedure.CodeDisplayName = codeDisplayName
                Set procedure.CodeSystem = codeSystem
                Set procedure.CodeSystemName = codeSystemName
                Set procedure.EffectiveTimeLow = effectiveTimeLow
                Set procedure.EffectiveTimeHigh = effectiveTimeHigh
                Set procedure.PerformerID = performerID
                Set procedure.PerformerName = performerName
                Set procedure.PerformerOrganization = performerOrganization
                Set procedure.PerformerAddress = performerAddress
                Set procedure.AuthorTime = authorTime
                Set procedure.ProfileID = profileID

                Set saveStatus = procedure.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving procedure data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "Procedure")
        		}

                Set procedureCode = ""
                Set procedureClassCode = ""
                Set moodCode = ""
                Set statusCode = ""
                Set displayName = ""
                Set codeSystem = ""
                Set codeSystemName = ""
                Set effectiveTimeLow = ""
                Set effectiveTimeHigh = ""
                Set performerID = ""
                Set performerName = ""
                Set performerOrganization = ""
                Set performerAddress = ""
                Set authorTime = ""
            }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertResultsData">
<ClassMethod>1</ClassMethod>
<FormalSpec>resultsXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set resultsString = resultsXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(resultsString, .textreader)

    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set resultID = ""
    Set testValue = ""
    Set units = ""
    Set referenceRange = ""
    Set statusCode = ""
    Set observationCode = ""
    Set observationCodeDisplayName = ""
    Set observationCodeSystem = ""
    Set observationCodeSystemName = ""
    Set organizerID = ""
    Set organizerName = ""
    Set moodCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set authorTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "ResultID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set resultID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "TestValue" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set testValue = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Units" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set units = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ReferenceRange" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set referenceRange = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCodeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MoodCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set moodCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }

        } ElseIf (textreader.LocalName = "Result") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }
            Set result = ##class(LEADNorth.CDAProfiler.Sections.CCDResult).%New()
            Set result.DocumentID = document
            Set result.ResultID = resultID
            Set result.TestValue = testValue
            Set result.Units = units
            Set result.ReferenceRange = referenceRange
            Set result.StatusCode = statusCode
            Set result.ObservationCode = observationCode
            Set result.ObservationCodeDisplayName = observationCodeDisplayName
            Set result.ObservationCodeSystem = observationCodeSystem
            Set result.ObservationCodeSystemName = observationCodeSystemName
            Set result.OrganizerID = organizerID
            Set result.OrganizerName = organizerName
            Set result.MoodCode = moodCode
            Set result.EffectiveTimeLow = effectiveTimeLow
            Set result.EffectiveTimeHigh = effectiveTimeHigh
            Set result.AuthorTime = authorTime
            Set result.ProfileID = profileID

            Set saveStatus = result.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving result data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        	Do ..SectionStats(documentID, "Result")
        	}

            Set resultID = ""
		    Set testValue = ""
		    Set units = ""
		    Set referenceRange = ""
		    Set statusCode = ""
		    Set procedureCode = ""
		    Set procedureCodeDisplayName = ""
		    Set procedureCodeSystem = ""
		    Set procedureCodeSystemName = ""
		    Set organizerID = ""
		    Set organizerName = ""
		    Set moodCode = ""
		    Set effectiveTimeLow = ""
		    Set effectiveTimeHigh = ""
		    Set authorTime = ""
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertVitalSignsData">
<ClassMethod>1</ClassMethod>
<FormalSpec>vitalSignsXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set vitalSignsString = vitalSignsXml.Read()

    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(vitalSignsString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }
    Set xdate = ""
    Set value = ""
    Set unit = ""
    Set description = ""
    Set organizerClassCode = ""
    Set organizerMoodCode = ""
    Set organizerCode = ""
    Set organizerCodeSystem = ""
    Set organizerDisplayName = ""
    Set organizerStatusCode = ""
    Set organizerEffectiveTimeLow = ""
    Set organizerEffectiveTimeHigh = ""
    Set observationIDExtension = ""
    Set observationIDRoot = ""
    Set observationCode = ""
    Set observationCodeSystem = ""
    Set observationDisplayName = ""
    Set observationStatusCode = ""
    Set observationEffectiveTimeLow = ""
    Set observationEffectiveTimeHigh = ""
    Set authorTime = ""
    Set translationCode = ""
    Set translationCodeSystem = ""
    Set translationDisplayName = ""
    Set interpretationCode = ""
    Set methodCode = ""

    While textreader.Read()
    {
        //write !, "NodeType: ", textreader.NodeType, ", LocalName: ", textreader.LocalName
        If textreader.NodeType = "element" {
            If textreader.LocalName = "xDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set xdate = textreader.Value
                    //write textreader.Value, !, !, !
                }
            }
            ElseIf textreader.LocalName = "Value" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set value = textreader.Value
                    //write !, value
                }
            }
            ElseIf textreader.LocalName = "Unit" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set unit = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Description" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set description = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerClassCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerClassCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerMoodCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerMoodCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OrganizerStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerEffectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set organizerEffectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationEffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationEffectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationEffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationEffectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationStatusCode = textreader.Value
                }
            }
        } ElseIf (textreader.NodeType = "endelement") && (textreader.LocalName = "VitalSign") {

                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                Set vitalSign = ##class(LEADNorth.CDAProfiler.Sections.CCDVitalSign).%New()
                Set vitalSign.DocumentID = document
                Set vitalSign.xDate = xdate
                Set vitalSign.Value = value
                Set vitalSign.Unit = unit
                Set vitalSign.Description = description
                Set vitalSign.OrganizerClassCode = organizerClassCode
                Set vitalSign.OrganizerMoodCode = organizerMoodCode
                Set vitalSign.OrganizerCode = organizerCode
                Set vitalSign.OrganizerCodeSystem = organizerCodeSystem
                Set vitalSign.OrganizerDisplayName = organizerDisplayName
                Set vitalSign.OrganizerStatusCode = organizerStatusCode
                Set vitalSign.OrganizerEffectiveTimeLow = organizerEffectiveTimeLow
                Set vitalSign.OrganizerEffectiveTimeHigh = organizerEffectiveTimeHigh
                Set vitalSign.ObservationIDExtension = observationIDExtension
                Set vitalSign.ObservationIDRoot = observationIDRoot
                Set vitalSign.ObservationCode = observationCode
                Set vitalSign.ObservationCodeSystem = observationCodeSystem
                Set vitalSign.ObservationDisplayName = observationDisplayName
                Set vitalSign.ObservationStatusCode = observationStatusCode
                Set vitalSign.ObservationEffectiveTimeLow = observationEffectiveTimeLow
                Set vitalSign.ObservationEffectiveTimeHigh = observationEffectiveTimeHigh
                Set vitalSign.AuthorTime = authorTime
                Set vitalSign.TranslationCode = translationCode
                Set vitalSign.TranslationCodeSystem = translationCodeSystem
                Set vitalSign.TranslationDisplayName = translationCodeSystem
                Set vitalSign.InterpretationCode = interpretationCode
                Set vitalSign.MethodCode = methodCode
                Set vitalSign.ProfileID = profileID

                Set saveStatus = vitalSign.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving vital sign data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "VitalSign")
        		}

            Set date = ""
            Set value = ""
            Set unit = ""
            Set description = ""
            Set organizerClassCode = ""
            Set organizerMoodCode = ""
            Set organizerCode = ""
            Set organizerCodeSystem = ""
            Set organizerDisplayName = ""
            Set organizerStatusCode = ""
            Set organizerEffectiveTimeLow = ""
            Set organizerEffectiveTimeHigh = ""
            Set observationIDExtension = ""
            Set observationIDRoot = ""
            Set observationCode = ""
            Set observationCodeSystem = ""
            Set observationDisplayName = ""
            Set observationStatusCode = ""
            Set observationEffectiveTimeLow = ""
            Set observationEffectiveTimeHigh = ""
            Set authorTime = ""
            Set translationCode = ""
            Set translationCodeSystem = ""
            Set translationDisplayName = ""
            Set interpretationCode = ""
            Set methodCode = ""
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertImmunizationData">
<ClassMethod>1</ClassMethod>
<FormalSpec>immunizationXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set immunizationString = immunizationXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(immunizationString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set immunizationID = ""
    Set route = ""
    Set dose = ""
    Set doseUnit = ""
    Set vaccine = ""
    Set vaccineCode = ""
    Set vaccineCodeSystem = ""
    Set vaccineCodeSystemName = ""
    Set lotNumber = ""
    Set startDate = ""
    Set endDate = ""
    Set performerID = ""
    Set performerAddress = ""
    Set performerCity = ""
    Set performerState = ""
    Set performerPostalCode = ""
    Set statusCode = ""
    Set nullFlavor = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "ImmunizationID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set immunizationID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Route" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set route = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Dose" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set dose = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DoseUnit" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set doseUnit = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Vaccine" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set vaccine = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "VaccineCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set vaccineCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "VaccineCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set vaccineCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "VaccineCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set vaccineCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LotNumber" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set lotNumber = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StartDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set startDate = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EndDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set endDate = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerAddress = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerCity" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerCity = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerState" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerState = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerPostalCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerPostalCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "NullFlavor" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set nullFlavor = textreader.Value
                }
            }
        }
        ElseIf (textreader.LocalName = "Immunization") && (textreader.NodeType = "endelement") {
	        Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }
            Set immunization = ##class(LEADNorth.CDAProfiler.Sections.CCDImmunization).%New()
            Set immunization.ImmunizationID = immunizationID
            Set immunization.DocumentID = document
            Set immunization.Route = route
            Set immunization.Dose = dose
            Set immunization.DoseUnit = doseUnit
            Set immunization.Vaccine = vaccine
            Set immunization.VaccineCode = vaccineCode
            Set immunization.VaccineCodeSystem = vaccineCodeSystem
            Set immunization.VaccineCodeSystemName = vaccineCodeSystemName
            Set immunization.LotNumber = lotNumber
            Set immunization.StartDate = startDate
            Set immunization.EndDate = endDate
            Set immunization.PerformerID = performerID
            Set immunization.PerformerAddress = performerAddress
            Set immunization.PerformerCity = performerCity
            Set immunization.PerformerState = performerState
            Set immunization.PerformerPostalCode = performerPostalCode
            Set immunization.StatusCode = statusCode
            Set immunization.NullFlavor = nullFlavor
            Set immunization.ProfileID = profileID

            Set saveStatus = immunization.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving immunization data.", !
                Continue
            } else {
	        	Do ..SectionStats(documentID, "Immunization")
        	}

            Set immunizationID = ""
            Set route = ""
            Set dose = ""
            Set doseUnit = ""
            Set vaccine = ""
            Set vaccineCode = ""
            Set vaccineCodeSystem = ""
            Set vaccineCodeSystemName = ""
            Set lotNumber = ""
            Set startDate = ""
            Set endDate = ""
            Set performerID = ""
            Set performerAddress = ""
            Set performerCity = ""
            Set performerState = ""
            Set performerPostalCode = ""
            Set statusCode = ""
            Set nullFlavor = ""
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertPlanOfCareData">
<ClassMethod>1</ClassMethod>
<FormalSpec>planOfCareXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set planOfCareString = planOfCareXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(planOfCareString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set encounterID = ""
    Set encounterExtension = ""
    Set displayName = ""
    Set statusCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set performerID = ""
    Set performerOrganization = ""
    Set performerAddress = ""
    Set performerCity = ""
    Set performerState = ""
    Set performerPostalCode = ""
    Set authorTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "EncounterID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EncounterExtension" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterExtension = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set displayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerOrganization" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerOrganization = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerAddress = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerCity" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerCity = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerState" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerState = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerPostalCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerPostalCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }

            If textreader.LocalName = "PlanEntry" {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                Set planOfCare = ##class(LEADNorth.CDAProfiler.Sections.CCDPlanOfCare).%New()
                Set planOfCare.DocumentID = document
                Set planOfCare.EncounterID = encounterID
                Set planOfCare.EncounterExtension = encounterExtension
                Set planOfCare.DisplayName = displayName
                Set planOfCare.StatusCode = statusCode
                Set planOfCare.EffectiveTimeLow = effectiveTimeLow
                Set planOfCare.EffectiveTimeHigh = effectiveTimeHigh
                Set planOfCare.PerformerID = performerID
                Set planOfCare.PerformerOrganization = performerOrganization
                Set planOfCare.PerformerAddress = performerAddress
                Set planOfCare.PerformerCity = performerCity
                Set planOfCare.PerformerState = performerState
                Set planOfCare.PerformerPostalCode = performerPostalCode
                Set planOfCare.AuthorTime = authorTime
                Set planOfCare.ProfileID = profileID

                Set saveStatus = planOfCare.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving plan of care data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "PlanOfCare")
        		}

                Set encounterID = ""
                Set encounterExtension = ""
                Set displayName = ""
                Set statusCode = ""
                Set effectiveTimeLow = ""
                Set effectiveTimeHigh = ""
                Set performerID = ""
                Set performerOrganization = ""
                Set performerAddress = ""
                Set performerCity = ""
                Set performerState = ""
                Set performerPostalCode = ""
                Set authorTime = ""
            }
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertSocialHistoryData">
<ClassMethod>1</ClassMethod>
<FormalSpec>socialHistoryXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set socialHistoryString = socialHistoryXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(socialHistoryString, .textreader)

    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set socialHistoryID = ""
    Set conceptDescription = ""
    Set observationCode = ""
    Set observationCodeSystem = ""
    Set observationCodeSystemName = ""
    Set observationDisplayName = ""
    Set valueCode = ""
    Set valueCodeSystem = ""
    Set valueCodeSystemName = ""
    Set valueDisplayName = ""
    Set units = ""
    Set statusCode = ""
    Set observationIDExtension = ""
    Set observationIDRoot = ""
    Set authorTime = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "SocialHistoryID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set socialHistoryID = textreader.Value
                }
            } ElseIf textreader.LocalName = "ConceptDescription" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set conceptDescription = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationDisplayName = textreader.Value
                }
            } ElseIf textreader.LocalName = "ValueCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "ValueCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "ValueCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "ValueDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set valueDisplayName = textreader.Value
                }
            } ElseIf textreader.LocalName = "Units" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set units = textreader.Value
                }
            } ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationIDExtension" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationIDExtension = textreader.Value
                }
            } ElseIf textreader.LocalName = "ObservationIDRoot" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationIDRoot = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            } ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "SocialHistoryItem") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }

            Set socialHistory = ##class(LEADNorth.CDAProfiler.Sections.CCDSocialHistory).%New()
            Set socialHistory.SocialHistoryID = socialHistoryID
            Set socialHistory.DocumentID = document
            Set socialHistory.ConceptDescription = conceptDescription
            Set socialHistory.ObservationCode = observationCode
            Set socialHistory.ObservationCodeSystem = observationCodeSystem
            Set socialHistory.ObservationCodeSystemName = observationCodeSystemName
            Set socialHistory.ObservationDisplayName = observationDisplayName
            Set socialHistory.ValueCode = valueCode
            Set socialHistory.ValueCodeSystem = valueCodeSystem
            Set socialHistory.ValueCodeSystemName = valueCodeSystemName
            Set socialHistory.ValueDisplayName = valueDisplayName
            Set socialHistory.Units = units
            Set socialHistory.StatusCode = statusCode
            Set socialHistory.ObservationIDExtension = observationIDExtension
            Set socialHistory.ObservationIDRoot = observationIDRoot
            Set socialHistory.AuthorTime = authorTime
            Set socialHistory.EffectiveTimeLow = effectiveTimeLow
            Set socialHistory.EffectiveTimeHigh = effectiveTimeHigh
            Set socialHistory.ProfileID = profileID

            Set saveStatus = socialHistory.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving social history data.", !
                Do $System.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        	Do ..SectionStats(documentID, "SocialHistory")
        	}
        }
    }
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertFunctionalStatusData">
<ClassMethod>1</ClassMethod>
<FormalSpec>functionalStatusXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set functionalStatusString = functionalStatusXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(functionalStatusString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set status = ""
    Set xdate = ""
    Set description = ""
    Set statusCode = ""
    Set observationCode = ""
    Set observationSystem = ""
    Set effectiveTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "Status" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set status = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "xDate" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set xdate = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Description" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set description = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationSystem" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set observationSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTime" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set effectiveTime = textreader.Value
                }
            }
        }
    }

    Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
    If '$IsObject(document) {
        Write "Document not found for ID: ", documentID, !
        Quit $$$ERROR($$$GeneralError, "Document not found.")
    }

    Set functionalStatus = ##class(LEADNorth.CDAProfiler.Sections.CCDFunctionalStatus).%New()
    Set functionalStatus.DocumentID = document
    Set functionalStatus.Status = status
    Set functionalStatus.xDate = xdate
    Set functionalStatus.Description = description
    Set functionalStatus.StatusCode = statusCode
    Set functionalStatus.ObservationCode = observationCode
    Set functionalStatus.ObservationSystem = observationSystem
    Set functionalStatus.EffectiveTime = effectiveTime
    Set functionalStatus.ProfileID = profileID

    Set saveStatus = functionalStatus.%Save()
    If $$$ISERR(saveStatus) {
        Write "Error saving functional status data.", !
        Do $system.OBJ.DisplayError(saveStatus)
        Quit saveStatus
    } else {
	    Do ..SectionStats(documentID, "FunctionalStatus")
    }
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertFamilyHistoryData">
<ClassMethod>1</ClassMethod>
<FormalSpec>familyHistoryXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set familyHistoryString = familyHistoryXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(familyHistoryString, .textreader)

    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set relativePerson = ""
    Set onsetAge = ""
    Set statusCode = ""
    Set observationCode = ""
    Set observationSystem = ""
    Set relativeCode = ""
    Set relativeCodeSystem = ""
    Set observationDisplayName = ""
    Set observationID = ""
    Set observationIDOid = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "RelativePerson" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set relativePerson = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "OnsetAge" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set onsetAge = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationCode" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set observationCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationSystem" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set observationSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RelativeCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set relativeCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RelativeCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set relativeCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationDisplayName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ObservationIDOid" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set observationIDOid = textreader.Value
                }
            }
        }
        ElseIf (textreader.LocalName = "FamilyHistory") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }

            Set familyHistory = ##class(LEADNorth.CDAProfiler.Sections.CCDFamilyHistory).%New()
            Set familyHistory.DocumentID = document
            Set familyHistory.RelativePerson = relativePerson
            Set familyHistory.OnsetAge = onsetAge
            Set familyHistory.StatusCode = statusCode
            Set familyHistory.ObservationCode = observationCode
            Set familyHistory.ObservationSystem = observationSystem
            Set familyHistory.RelativeCode = relativeCode
            Set familyHistory.RelativeCodeSystem = relativeCodeSystem
            Set familyHistory.ObservationDisplayName = observationDisplayName
            Set familyHistory.ObservationID = observationID
            Set familyHistory.ObservationIDOid = observationIDOid
            Set familyHistory.ProfileID = profileID

            Set saveStatus = familyHistory.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving family history data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        	Do ..SectionStats(documentID, "FamilyHistory")
        	}

            Set relativePerson = ""
            Set onsetAge = ""
            Set statusCode = ""
            Set observationCode = ""
            Set observationSystem = ""
            Set relativeCode = ""
            Set relativeCodeSystem = ""
            Set observationDisplayName = ""
            Set observationID = ""
            Set observationIDOid = ""
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertAdvanceDirectiveData">
<ClassMethod>1</ClassMethod>
<FormalSpec>advanceDirectiveXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set advanceDirectiveString = advanceDirectiveXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    //Write !, "Advance Directive String: ", advanceDirectiveString, !
    Set status = ##class(%XML.TextReader).ParseString(advanceDirectiveString, .textreader)

    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }
    Set directiveType = ""
    Set dateSigned = ""
    Set statusCode = ""
    Set directiveID = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "DirectiveType" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set directiveType = textreader.Value
                    //Write !, "DirectiveType: ", directiveType, !
                }
            }
            ElseIf textreader.LocalName = "DateSigned" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set dateSigned = textreader.Value
                    //Write !, "DateSigned: ", dateSigned, !
                }
            }
            ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                    //Write !, "StatusCode: ", statusCode, !
                }
            }
            ElseIf textreader.LocalName = "DirectiveID" {
                Set status = textreader.Read()  
                If textreader.NodeType = "chars" {
                    Set directiveID = textreader.Value
                    //Write !, "DirectiveID: ", directiveID, !
                }
            }
        } ElseIf (textreader.LocalName = "AdvanceDirective") && (textreader.NodeType = "endelement") {
                Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
                If '$IsObject(document) {
                    Write "Document not found for ID: ", documentID, !
                    Continue
                }

                //Write !, "Saving Advance Directive: ", directiveType, " | ", dateSigned, " | ", statusCode, " | ", directiveID, !

                Set advanceDirective = ##class(LEADNorth.CDAProfiler.Sections.CCDAdvanceDirective).%New()
                Set advanceDirective.DocumentID = document
                Set advanceDirective.DirectiveType = directiveType
                Set advanceDirective.DateSigned = dateSigned
                Set advanceDirective.StatusCode = statusCode
                Set advanceDirective.DirectiveID = directiveID
                Set advanceDirective.ProfileID = profileID

                Set saveStatus = advanceDirective.%Save()
                If $$$ISERR(saveStatus) {
                    Write "Error saving advance directive data.", !
                    Do $system.OBJ.DisplayError(saveStatus)
                    Continue
                } else {
	        		Do ..SectionStats(documentID, "AdvanceDirective")
        		}

                //Write !, "Advance Directive saved successfully!", !
            
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertEncounterData">
<ClassMethod>1</ClassMethod>
<FormalSpec>encounterXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set encounterString = encounterXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    
    Set status = ##class(%XML.TextReader).ParseString(encounterString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set encounterNumber = ""
    Set encounterTypeDisplayName = ""
    Set encounterTypeCode = ""
    Set encounterTypeCodeSystem = ""
    Set encounterTypeCodeSystemName = ""
    Set reasonForVisit = ""
    Set visitDescription = ""
    Set statusCode = ""
    Set startDateTime = ""
    Set endDateTime = ""
    Set dischargeDisposition = ""
    Set facilityName = ""
    Set facilityIDAAName = ""
    Set facilityIDExtension = ""
    Set facilityIDRoot = ""
    Set performerID = ""
    Set performerAddress = ""
    Set performerTelecom = ""
    Set performerName = ""
    Set authorTime = ""
    Set locationID = ""
    Set locationAddress = ""
    Set locationTelecom = ""
    Set locationName = ""

    While textreader.Read() {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "EncounterNumber" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterNumber = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeDisplayName = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "ReasonForVisit" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set reasonForVisit = textreader.Value
                }
            } ElseIf textreader.LocalName = "VisitDescription" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set visitDescription = textreader.Value
                }
            } ElseIf textreader.LocalName = "StatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set statusCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "StartDateTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set startDateTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "EndDateTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set endDateTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "DischargeDisposition" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set dischargeDisposition = textreader.Value
                }
            } ElseIf textreader.LocalName = "FacilityName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set facilityName = textreader.Value
                }
            } ElseIf textreader.LocalName = "FacilityIDAAName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set facilityIDAAName = textreader.Value
                }
            } ElseIf textreader.LocalName = "FacilityIDExtension" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set facilityIDExtension = textreader.Value
                }
            } ElseIf textreader.LocalName = "FacilityIDRoot" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set facilityIDRoot = textreader.Value
                }
            } ElseIf textreader.LocalName = "PerformerID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerID = textreader.Value
                }
            } ElseIf textreader.LocalName = "PerformerAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerAddress = textreader.Value
                }
            } ElseIf textreader.LocalName = "PerformerTelecom" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerTelecom = textreader.Value
                }
            } ElseIf textreader.LocalName = "PerformerName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerName = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationID = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationAddress = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationTelecom" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationTelecom = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationName = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "Encounter") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }

            Set encounter = ##class(LEADNorth.CDAProfiler.Sections.CCDEncounter).%New()
            If '$IsObject(encounter) {
                Write "Failed to create Encounter object", !
                Continue
            }

            Set encounter.EncounterNumber = encounterNumber
            Set encounter.DocumentID = document
            Set encounter.EncounterTypeDisplayName = encounterTypeDisplayName
            Set encounter.EncounterTypeCode = encounterTypeCode
            Set encounter.EncounterTypeCodeSystem = encounterTypeCodeSystem
            Set encounter.EncounterTypeCodeSystemName = encounterTypeCodeSystemName
            Set encounter.ReasonForVisit = reasonForVisit
            Set encounter.VisitDescription = visitDescription
            Set encounter.StatusCode = statusCode
            Set encounter.StartDateTime = startDateTime
            Set encounter.EndDateTime = endDateTime
            Set encounter.DischargeDisposition = dischargeDisposition
            Set encounter.FacilityName = facilityName
            Set encounter.FacilityIDAAName = facilityIDAAName
            Set encounter.FacilityIDExtension = facilityIDExtension
            Set encounter.FacilityIDRoot = facilityIDRoot
            Set encounter.PerformerID = performerID
            Set encounter.PerformerAddress = performerAddress
            Set encounter.PerformerTelecom = performerTelecom
            Set encounter.PerformerName = performerName
            Set encounter.AuthorTime = authorTime
            Set encounter.LocationID = locationID
            Set encounter.LocationAddress = locationAddress
            Set encounter.LocationTelecom = locationTelecom
            Set encounter.LocationName = locationName
            Set encounter.ProfileID = profileID

            Set saveStatus = encounter.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving Encounter data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        	Do ..SectionStats(documentID, "Encounter")
        	}

            Set encounterNumber = ""
            Set encounterTypeDisplayName = ""
            Set encounterTypeCode = ""
            Set encounterTypeCodeSystem = ""
            Set encounterTypeCodeSystemName = ""
            Set reasonForVisit = ""
            Set visitDescription = ""
            Set statusCode = ""
            Set startDateTime = ""
            Set endDateTime = ""
            Set dischargeDisposition = ""
            Set facilityName = ""
            Set facilityIDAAName = ""
            Set facilityIDExtension = ""
            Set facilityIDRoot = ""
            Set performerID = ""
            Set performerAddress = ""
            Set performerTelecom = ""
            Set performerName = ""
            Set authorTime = ""
            Set locationID = ""
            Set locationAddress = ""
            Set locationTelecom = ""
            Set locationName = ""
        }
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertGoalsData">
<ClassMethod>1</ClassMethod>
<FormalSpec>goalsXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set goalsString = goalsXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(goalsString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set goalID = ""
    Set goalDescription = ""
    Set goalCode = ""
    Set goalCodeSystem = ""
    Set goalCodeSystemName = ""
    Set goalStatus = ""
    Set startDate = ""
    Set endDate = ""
    Set authorTime = ""
    Set authorName = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "GoalID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalID = textreader.Value
                }
            } ElseIf textreader.LocalName = "GoalDescription" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalDescription = textreader.Value
                }
            } ElseIf textreader.LocalName = "GoalCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "GoalCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "GoalCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "GoalStatus" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set goalStatus = textreader.Value
                }
            } ElseIf textreader.LocalName = "StartDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set startDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "EndDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set endDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorName = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "Goal") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }
            
            Set goal = ##class(LEADNorth.CDAProfiler.Sections.CCDGoals).%New()
            Set goal.DocumentID = document
            Set goal.GoalID = goalID
            Set goal.GoalDescription = goalDescription
            Set goal.GoalCode = goalCode
            Set goal.GoalCodeSystem = goalCodeSystem
            Set goal.GoalCodeSystemName = goalCodeSystemName
            Set goal.GoalStatus = goalStatus
            Set goal.StartDate = startDate
            Set goal.EndDate = endDate
            Set goal.AuthorTime = authorTime
            Set goal.AuthorName = authorName
            Set goal.ProfileID = profileID

            Set saveStatus = goal.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving goal data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        Do ..SectionStats(documentID, "Goals")
        	}

            Set goalID = ""
		    Set goalDescription = ""
		    Set goalCode = ""
		    Set goalCodeSystem = ""
		    Set goalCodeSystemName = ""
		    Set goalStatus = ""
		    Set startDate = ""
		    Set endDate = ""
		    Set authorTime = ""
		    Set authorName = ""
        }
    }
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertEncompassingEncounterData">
<ClassMethod>1</ClassMethod>
<FormalSpec>encounterXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set encounterString = encounterXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(encounterString, .textreader)
    //write !, encounterString, !
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set encounterID = ""
    Set encounterTypeDisplayName = ""
    Set encounterTypeCode = ""
    Set encounterTypeCodeSystem = ""
    Set encounterTypeCodeSystemName = ""
    Set startDateTime = ""
    Set endDateTime = ""
    Set dischargeDisposition = ""
    Set locationID = ""
    Set locationName = ""
    Set locationAddress = ""
    Set locationTelecom = ""
    Set authorTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "EncounterID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterID = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeDisplayName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeDisplayName = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "EncounterTypeCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set encounterTypeCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "StartDateTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set startDateTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "EndDateTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set endDateTime = textreader.Value
                }
            } ElseIf textreader.LocalName = "DischargeDisposition" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set dischargeDisposition = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationID = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationName = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationAddress = textreader.Value
                }
            } ElseIf textreader.LocalName = "LocationTelecom" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationTelecom = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "EncompassingEncounter") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }
            
            Set encounter = ##class(LEADNorth.CDAProfiler.Sections.CCDEncompassingEncounter).%New()
            Set encounter.DocumentID = document
            Set encounter.EncounterID = encounterID
            Set encounter.EncounterTypeDisplayName = encounterTypeDisplayName
            Set encounter.EncounterTypeCode = encounterTypeCode
            Set encounter.EncounterTypeCodeSystem = encounterTypeCodeSystem
            Set encounter.EncounterTypeCodeSystemName = encounterTypeCodeSystemName
            Set encounter.StartDateTime = startDateTime
            Set encounter.EndDateTime = endDateTime
            Set encounter.DischargeDisposition = dischargeDisposition
            Set encounter.LocationID = locationID
            Set encounter.LocationName = locationName
            Set encounter.LocationAddress = locationAddress
            Set encounter.LocationTelecom = locationTelecom
            Set encounter.AuthorTime = authorTime
            Set encounter.ProfileID = profileID

            Set saveStatus = encounter.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving encompassing encounter data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        Do ..SectionStats(documentID, "EncompassingEncounters")
        }

            Set encounterID = ""
		    Set encounterTypeDisplayName = ""
		    Set encounterTypeCode = ""
		    Set encounterTypeCodeSystem = ""
		    Set encounterTypeCodeSystemName = ""
		    Set startDateTime = ""
		    Set endDateTime = ""
		    Set dischargeDisposition = ""
		    Set locationID = ""
		    Set locationName = ""
		    Set locationAddress = ""
		    Set locationTelecom = ""
		    Set authorTime = ""
        }
    }
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertImplantsData">
<ClassMethod>1</ClassMethod>
<FormalSpec>implantsXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set implantsString = implantsXml.Read()
    Set textreader = ##class(%XML.TextReader).%New(1)
    Set status = ##class(%XML.TextReader).ParseString(implantsString, .textreader)
    
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set implantID = ""
    Set deviceName = ""
    Set deviceCode = ""
    Set deviceCodeSystem = ""
    Set deviceCodeSystemName = ""
    Set manufacturerModelName = ""
    Set serialNumber = ""
    Set implantStatus = ""
    Set implantDate = ""
    Set removalDate = ""
    Set authorTime = ""

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "ImplantID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set implantID = textreader.Value
                }
            } ElseIf textreader.LocalName = "DeviceName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set deviceName = textreader.Value
                }
            } ElseIf textreader.LocalName = "DeviceCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set deviceCode = textreader.Value
                }
            } ElseIf textreader.LocalName = "DeviceCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set deviceCodeSystem = textreader.Value
                }
            } ElseIf textreader.LocalName = "DeviceCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set deviceCodeSystemName = textreader.Value
                }
            } ElseIf textreader.LocalName = "ManufacturerModelName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set manufacturerModelName = textreader.Value
                }
            } ElseIf textreader.LocalName = "SerialNumber" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set serialNumber = textreader.Value
                }
            } ElseIf textreader.LocalName = "ImplantStatus" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set implantStatus = textreader.Value
                }
            } ElseIf textreader.LocalName = "ImplantDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set implantDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "RemovalDate" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set removalDate = textreader.Value
                }
            } ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "Implant") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }
            
            Set implant = ##class(LEADNorth.CDAProfiler.Sections.CCDImplants).%New()
            Set implant.DocumentID = document
            Set implant.ImplantID = implantID
            Set implant.DeviceName = deviceName
            Set implant.DeviceCode = deviceCode
            Set implant.DeviceCodeSystem = deviceCodeSystem
            Set implant.DeviceCodeSystemName = deviceCodeSystemName
            Set implant.ManufacturerModelName = manufacturerModelName
            Set implant.SerialNumber = serialNumber
            Set implant.ImplantStatus = implantStatus
            Set implant.ImplantDate = implantDate
            Set implant.RemovalDate = removalDate
            Set implant.AuthorTime = authorTime
            Set implant.ProfileID = profileID

            Set saveStatus = implant.%Save()
            If $$$ISERR(saveStatus) {
                Write "Error saving implant data.", !
                Do $system.OBJ.DisplayError(saveStatus)
                Continue
            } else {
	        Do ..SectionStats(documentID, "Implants")
        	}

            Set implantID = ""
		    Set deviceName = ""
		    Set deviceCode = ""
		    Set deviceCodeSystem = ""
		    Set deviceCodeSystemName = ""
		    Set manufacturerModelName = ""
		    Set serialNumber = ""
		    Set implantStatus = ""
		    Set implantDate = ""
		    Set removalDate = ""
		    Set authorTime = ""
        }
    }
    
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertPayerData">
<ClassMethod>1</ClassMethod>
<FormalSpec>payerXml:%Stream.GlobalCharacter,documentID:%Integer,profileID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set payerString = payerXml.Read()

    Set textreader = ##class(%XML.TextReader).%New(1)

    Set status = ##class(%XML.TextReader).ParseString(payerString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set payerName = ""
    Set policyNumber = ""
    Set coveredParty = ""
    Set payerCode = ""
    Set payerCodeSystem = ""
    Set payerCodeSystemName = ""
    Set payerStatusCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set performerIDs = ""
    Set performerAddress = ""
    Set performerTelecom = ""
    Set performerName = ""
    Set authorTime = ""
    Set memberID = ""
    Set locationAddress = ""
    Set locationTelecom = ""
    Set locationName = ""
    Set participantRoleID = ""
    Set participantRoleCode = ""
    Set participantRoleCodeSystem = ""
    Set participantRoleCodeSystemName = ""

    Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
    If '$IsObject(document) {
        Write "Document not found for ID: ", documentID, !
        Quit $$$ERROR($$$GeneralError, "Document not found.")
    }

    While textreader.Read()
    {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "PayerName" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set payerName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PolicyNumber" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set policyNumber = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "CoveredParty" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set coveredParty = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PayerCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set payerCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PayerCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set payerCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PayerCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set payerCodeSystemName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PayerStatusCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set payerStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeLow" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeLow = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EffectiveTimeHigh" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set effectiveTimeHigh = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerIDs" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerIDs = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerAddress = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerTelecom" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerTelecom = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PerformerName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set performerName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "AuthorTime" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set authorTime = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MemberID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set memberID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LocationAddress" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationAddress = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LocationTelecom" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationTelecom = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LocationName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set locationName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ParticipantRoleID" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set participantRoleID = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ParticipantRoleCode" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set participantRoleCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ParticipantRoleCodeSystem" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set participantRoleCodeSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ParticipantRoleCodeSystemName" {
                Set status = textreader.Read()
                If textreader.NodeType = "chars" {
                    Set participantRoleCodeSystemName = textreader.Value
                }
            }
        } ElseIf (textreader.LocalName = "Payer") && (textreader.NodeType = "endelement") {
            Set document = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).%OpenId(documentID)
            If '$IsObject(document) {
                Write "Document not found for ID: ", documentID, !
                Continue
            }
    

    
    Set payer = ##class(LEADNorth.CDAProfiler.Sections.CCDPayer).%New()

    Set payer.DocumentID = document  // Use the object reference
    Set payer.PayerName = payerName
    Set payer.PolicyNumber = policyNumber
    Set payer.CoveredParty = coveredParty
    Set payer.PayerCode = payerCode
    Set payer.PayerCodeSystem = payerCodeSystem
    Set payer.PayerCodeSystemName = payerCodeSystemName
    Set payer.PayerStatusCode = payerStatusCode
    Set payer.EffectiveTimeLow = effectiveTimeLow
    Set payer.EffectiveTimeHigh = effectiveTimeHigh
    Set payer.PerformerIDs = performerIDs
    Set payer.PerformerAddress = performerAddress
    Set payer.PerformerTelecom = performerTelecom
    Set payer.PerformerName = performerName
    Set payer.AuthorTime = authorTime
    Set payer.MemberID = memberID
    Set payer.LocationAddress = locationAddress
    Set payer.LocationTelecom = locationTelecom
    Set payer.LocationName = locationName
    Set payer.ParticipantRoleID = participantRoleID
    Set payer.ParticipantRoleCode = participantRoleCode
    Set payer.ParticipantRoleCodeSystem = participantRoleCodeSystem
    Set payer.ParticipantRoleCodeSystemName = participantRoleCodeSystemName
    Set payer.ProfileID = profileID

    Set saveStatus = payer.%Save()
    If $$$ISERR(saveStatus) {
        Write "Error saving payer data.", !
        Do $system.OBJ.DisplayError(saveStatus)
        Continue
    } else {
	        Do ..SectionStats(documentID, "Payer")
        }
    
    Set payerName = ""
    Set policyNumber = ""
    Set coveredParty = ""
    Set payerCode = ""
    Set payerCodeSystem = ""
    Set payerCodeSystemName = ""
    Set payerStatusCode = ""
    Set effectiveTimeLow = ""
    Set effectiveTimeHigh = ""
    Set performerIDs = ""
    Set performerAddress = ""
    Set performerTelecom = ""
    Set performerName = ""
    Set authorTime = ""
    Set memberID = ""
    Set locationAddress = ""
    Set locationTelecom = ""
    Set locationName = ""
    Set participantRoleID = ""
    Set participantRoleCode = ""
    Set participantRoleCodeSystem = ""
    Set participantRoleCodeSystemName = ""
    
    }
    }
    
	
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="InsertPatientData">
<ClassMethod>1</ClassMethod>
<FormalSpec>patientXml:%Stream.GlobalCharacter,profileID:%String,documentID:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set patientString = patientXml.Read()

    Set textreader = ##class(%XML.TextReader).%New(1)

    Set status = ##class(%XML.TextReader).ParseString(patientString, .textreader)
    If $$$ISERR(status) {
        Do $System.Status.DisplayError(status)
        Quit status
    }

    Set patientMRN = ""
    Set firstName = ""
    Set lastName = ""
    Set dob = ""
    Set genderCode = ""
    Set genderDisplay = ""
    Set genderSystem = ""
    Set ethnicityCode = ""
    Set ethnicityDisplay = ""
    Set ethnicitySystem = ""
    Set raceCode = ""
    Set raceDisplay = ""
    Set raceSystem = ""
    Set maritalStatusCode = ""
    Set maritalStatusDisplay = ""
    Set maritalStatusSystem = ""
    Set patientMRN = ""
    Set languageCode = ""
    Set address = ""
    Set city = ""
    Set state = ""
    set country = ""
    Set zipCode = ""
    Set phoneNumber = ""
    Set email = ""
    Set insurancePolicyNumber = ""
    Set insuranceProvider = ""

    While textreader.Read() {
        If textreader.NodeType = "element" {
            If textreader.LocalName = "FirstName" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set firstName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LastName" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set lastName = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "DOB" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set dob = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "GenderCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set genderCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "GenderDisplay" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set genderDisplay = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "GenderSystem" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set genderSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Address" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set address = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Country" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set country = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "City" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set city = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "State" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set state = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "ZipCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set zipCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PhoneNumber" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set phoneNumber = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "PatientMRN" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set patientMRN = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "Email" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set email = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "LanguageCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set languageCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MaritalStatusCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set maritalStatusCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MaritalStatusDisplay" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set maritalStatusDisplay = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "MaritalStatusSystem" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set maritalStatusSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RaceCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set raceCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RaceDisplay" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set raceDisplay = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "RaceSystem" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set raceSystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EthnicityCode" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set ethnicityCode = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EthnicityDisplay" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set ethnicityDisplay = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "EthnicitySystem" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set ethnicitySystem = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "InsurancePolicyNumber" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set insurancePolicyNumber = textreader.Value
                }
            }
            ElseIf textreader.LocalName = "InsuranceProvider" {
                Set status = textreader.Read()  // Move to the text node
                If textreader.NodeType = "chars" {
                    Set insuranceProvider = textreader.Value
                }
            }
        }
    }

#;    Write "PatientMRN: ", patientMRN, !
#;    Write "First Name: ", firstName, !
#;    Write "Last Name: ", lastName, !
#;    Write "DOB: ", dob, !
#;    Write "Gender: ", genderCode,";",genderDisplay,";",genderSystem, !
#;    Write "Address: ", address, !
#;    Write "City: ", city, !
#;    Write "State: ", state, !
#;    Write "Country: ", country, !
#;    Write "Zip Code: ", zipCode, !
#;    Write "Phone Number: ", phoneNumber, !
#;    Write "Email: ", email, !
#;    Write "Language:  ", languageCode, !
#;    Write "Marital Status ", maritalStatusCode,";",maritalStatusDisplay,";",maritalStatusSystem, !
#;    Write "Race ", raceCode,";",raceDisplay,";",raceSystem, !
#;    Write "Ethinicity ", ethnicityCode,";",ethnicityDisplay,";",ethnicitySystem, !
#;    Write "Insurance Policy Number: ", insurancePolicyNumber, !
#;    Write "Insurance Provider: ", insuranceProvider, !

        Set patient = ##class(LEADNorth.CDAProfiler.Sections.CCDPatient).%New()
        Set patient.PatientMRN = patientMRN
        Set patient.FirstName = firstName
        Set patient.LastName = lastName
        Set patient.DOB = dob  // Convert to an internal date format
        Set patient.GenderCode = genderCode
        Set patient.GenderDisplay = genderDisplay
        Set patient.GenderSystem = genderSystem
        Set patient.Address = address
        Set patient.City = city
        Set patient.State = state
        Set patient.Country = country
        Set patient.ZipCode = zipCode
        Set patient.PhoneNumber = phoneNumber
        Set patient.Email = email
        Set patient.LanguageCode = languageCode
        Set patient.MaritalStatusCode = maritalStatusCode
        Set patient.MaritalStatusDisplay = maritalStatusDisplay
        Set patient.MaritalStatusSystem = maritalStatusSystem
        Set patient.RaceCode = raceCode
        Set patient.RaceDisplay = raceDisplay
        Set patient.RaceSystem = raceSystem
        Set patient.EthnicityCode = ethnicityCode
        Set patient.EthnicityDisplay = ethnicityDisplay
        Set patient.EthnicitySystem = ethnicitySystem
        Set patient.InsurancePolicyNumber = insurancePolicyNumber
        Set patient.InsuranceProvider = insuranceProvider
        Set patient.ProfileID = profileID
        
        
        Set saveStatus = patient.%Save()
        If $$$ISERR(saveStatus) {
            Write "Error saving patient data.", !
            Do $system.OBJ.DisplayError(saveStatus)
            Quit saveStatus
        } else {
	        Do ..SectionStats(documentID, "Patient")
        }

    Quit $$$OK
]]></Implementation>
</Method>


</Class>


<Class name="LEADNorth.CDAProfiler.Utils.Mappings">
<Super>%Persistent</Super>
<TimeChanged>67338,60618.4870272</TimeChanged>
<TimeCreated>67285,50170.8905133</TimeCreated>

<Method name="GetXPathForProperty">
<Description>
The current best attempt at being able to dynamically grab the Xpath from which values are pulled</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>prop:%String,xsltBlock:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set xdata = ##class(%Dictionary.XDataDefinition).IDKEYOpen("LEADNorth.CDAProfiler.XSLT.CDAParser", xsltBlock)
    If xdata = $$$NULLOREF Quit "Error: XData block not found!"

    Set xsltText = xdata.Data.Read()
    Set dbl = $Char(34)

    // Get <xsl:template match="...">
    Set tmplSearch = "<xsl:template match="_dbl
    Set posTmpl = $Find(xsltText, tmplSearch)
    If posTmpl=0 Quit "Error: Template match not found."

    Set posTmplEnd = $Find(xsltText, dbl, posTmpl)
    If posTmplEnd=0 Quit "Error: Closing quote for template match not found."

    Set templateMatch = $Extract(xsltText, posTmpl, posTmplEnd-2)

    Set propTag = "<"_prop_">"
    Set posProp = $Find(xsltText, propTag, posTmplEnd)
    If posProp=0 Quit "Error: Property '"_prop_"' not found."

    Set valueOfSearch = "<xsl:value-of select="_dbl
    Set posVal = $Find(xsltText, valueOfSearch, posProp)
    If posVal=0 Quit "Error: <xsl:value-of> for property '"_prop_"' not found."

    Set posValEnd = $Find(xsltText, dbl, posVal)
    If posValEnd=0 Quit "Error: Closing quote for property '"_prop_"' not found."

    Set propertyXPath = $Extract(xsltText, posVal, posValEnd-2)

    // If PatientXSLT, the value-of is absolute or relative to root
    If xsltBlock="PatientXSLT" {
        If $Extract(propertyXPath,1,1)'="/" {
            Set propertyXPath = "/"_propertyXPath
        }
        Quit templateMatch_propertyXPath
    }

    // Otherwise, derive path from <xsl:for-each>
    Set forEachSearch = "<xsl:for-each select="_dbl
    Set posForEach = $Find(xsltText, forEachSearch, posTmplEnd)
    If posForEach=0 Quit "Error: for-each not found."

    Set posForEachEnd = $Find(xsltText, dbl, posForEach)
    If posForEachEnd=0 Quit "Error: Closing quote for for-each select not found."

    Set forEachSelect = $Extract(xsltText, posForEach, posForEachEnd-2)

    // Count how many "../" appear at start of propertyXPath
    Set relativeCount=0
    While $Extract(propertyXPath,1,3)="../" {
        Set relativeCount=relativeCount+1
        Set propertyXPath = $Extract(propertyXPath,4,*)
    }

    Set numPieces = $Length(forEachSelect,"/")
    If numPieces <= relativeCount Quit "Error: Relative path exceeds for-each context."

    Set contextPath=""
    For i=1:1:(numPieces-relativeCount) {
        Set contextPath = contextPath _ $Select(i=1:"", 1:"/") _ $Piece(forEachSelect,"/",i)
    }

    Set finalXPath = templateMatch_"/"_contextPath_"/"_propertyXPath
    Quit finalXPath
]]></Implementation>
</Method>


</Class>


<Class name="LEADNorth.CDAProfiler.XSLT.CDAParser">
<Description>
This class contains compiled XSLT templates for transforming HL7 CDA documents into structured XML segments</Description>
<Super>%Persistent</Super>
<TimeChanged>67338,60383.2544799</TimeChanged>
<TimeCreated>67081,41354.7375245</TimeCreated>

<XData name="MetadataXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/> 
    <xsl:template match="/hl7:ClinicalDocument">
        <Metadata>
            <PatientID>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:id/@extension"/>
            </PatientID>
            <DocumentDate>
                <xsl:value-of select="hl7:effectiveTime/@value"/>
            </DocumentDate>
            <DocumentTitle>
            	<xsl:value-of select="@title"/>
            </DocumentTitle>
            <DocumentTypeCode>
            	<xsl:value-of select="hl7:code/@code"/>
            </DocumentTypeCode>
            <DocumentTypeCodeSystem>
            	<xsl:value-of select="hl7:code/@codeSystem"/>
            </DocumentTypeCodeSystem>
            <DocumentTypeCodeDisplay>
            	<xsl:value-of select="hl7:code/@displayName"/>
            </DocumentTypeCodeDisplay>
            <DocumentIDExtension>
            	<xsl:value-of select="hl7:id/@extension"/>
            </DocumentIDExtension>
            <DocumentIDRoot>
            	<xsl:value-of select="hl7:id/@root"/>
            </DocumentIDRoot>
            <DocumentConfidentialityCode>
            	<xsl:value-of select="hl7:confidentialityCode/@code"/>
            </DocumentConfidentialityCode>
            <DocumentConfidentialityCodeSystem>
            	<xsl:value-of select="hl7:confidentialityCode/@codeSystem"/>
            </DocumentConfidentialityCodeSystem>
            <DocumentConfidentialityCodeDisplay>
            	<xsl:value-of select="hl7:confidentialityCode/@displayName"/>
            </DocumentConfidentialityCodeDisplay>
            <AllSections>
			  <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section">
			    <xsl:if test="position() &gt; 1">, </xsl:if>
			    <xsl:value-of select="hl7:code/@displayName"/>
			    <xsl:text>(</xsl:text>
			    <xsl:choose>
			      <xsl:when test="not(@nullFlavor='NI') and 
			                      string-length(normalize-space(hl7:text)) &gt; 0 and 
			                      not(contains(hl7:text, 'may be documented'))">
			        <xsl:text>has data</xsl:text>
			      </xsl:when>
			      <xsl:otherwise>
			        <xsl:text>no data</xsl:text>
			      </xsl:otherwise>
			    </xsl:choose>
			    <xsl:text>)</xsl:text>
			  </xsl:for-each>
			</AllSections>
			<SectionsWithEncounterNumbers>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:entry/hl7:encounter/hl7:id]">
          <xsl:value-of select="hl7:code/@displayName"/>
          <xsl:text>(</xsl:text>
          <xsl:for-each select="hl7:entry/hl7:encounter/hl7:id">
            <xsl:value-of select="@extension"/>
            <xsl:if test="position() != last()">,</xsl:if>
          </xsl:for-each>
          <xsl:text>)</xsl:text>
          <xsl:if test="position() != last()">, </xsl:if>
        </xsl:for-each>
      </SectionsWithEncounterNumbers>
        </Metadata>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="AllergyXSLT">
<XMLNamespace>http://www.w3.org/1999/XSL/Transform</XMLNamespace>
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <AllergySection>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='48765-2']/hl7:entry/hl7:act">
            <Allergy>
                <AllergyCode>
                    <xsl:value-of select="hl7:value/@code | hl7:entryRelationship/hl7:observation/hl7:participant[@typeCode='CSM']/hl7:participantRole/hl7:playingEntity/hl7:code/@code"/>
                </AllergyCode>
                <AllergyCodeSystem>
                    <xsl:value-of select="hl7:value/@codeSystem | hl7:entryRelationship/hl7:observation/hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:code/@codeSystem"/>
                </AllergyCodeSystem>
                <AllergyCodeSystemName>
                    <xsl:value-of select="hl7:value/@codeSystemName | hl7:entryRelationship/hl7:observation/hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:code/@codeSystemName"/>
                </AllergyCodeSystemName>
                <AllergyDisplayName>
                    <xsl:value-of select="hl7:value/@displayName | hl7:entryRelationship/hl7:observation/hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:code/@displayName"/>
                </AllergyDisplayName>
                <CategoryCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@code"/>
                </CategoryCode>
                <CategoryCodeSystem>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@codeSystem"/>
                </CategoryCodeSystem>
                <CategoryCodeSystemName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@codeSystemName"/>
                </CategoryCodeSystemName>
                <CategoryDisplayName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@displayName"/>
                </CategoryDisplayName>
                <ReactionCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='ASSERTION']/hl7:code/@code"/>
                </ReactionCode>
                <ReactionCodeSystem>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='ASSERTION']/hl7:code/@codeSystem"/>
                </ReactionCodeSystem>
                <ReactionCodeSystemName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='ASSERTION']/hl7:code/@codeSystemName"/>
                </ReactionCodeSystemName>
                <xsl:variable name="reactionDis" select="substring-after(hl7:text/hl7:reference/@value, '#')" />
                <xsl:variable name="reactionDis2" select="substring-after(hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation/hl7:text/hl7:reference/@value, '#')" />
                <ReactionDisplayName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='ASSERTION']/hl7:code/@displayName | ../../hl7:text/hl7:table/hl7:tbody/hl7:tr[@ID=$reactionDis]/hl7:td/hl7:content[@ID=$reactionDis2]"/>
                </ReactionDisplayName>
                <SeverityCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='SEV']/hl7:value/@code"/>
                </SeverityCode>
                <SeverityCodeSystem>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='SEV']/hl7:value/@codeSystem"/>
                </SeverityCodeSystem>
                <SeverityCodeName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='SEV']/hl7:value/@codeSystemName"/>
                </SeverityCodeName>
                <xsl:variable name="sevDis" select="substring-after(hl7:text/hl7:reference/@value, '#')" />
                <xsl:variable name="sevDis2" select="substring-after(hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='SEV']/hl7:text/hl7:reference/@value, '#')" />
                <SeverityDisplayName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation[hl7:code/@code='SEV']/hl7:value/@displayName | ../../hl7:text/hl7:table/hl7:tbody/hl7:tr[@ID=$sevDis]/hl7:td/hl7:content[@ID=$sevDis2]"/>
                </SeverityDisplayName>
                <Provider>
                    <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:id/@extension"/>
                </Provider>
                <ActIdExtension>
                    <xsl:value-of select="hl7:id/@extension"/>
                </ActIdExtension>
                <ActIdRoot>
                    <xsl:value-of select="hl7:id/@root"/>
                </ActIdRoot>
                <ActClassCode>
                    <xsl:value-of select="@classCode"/>
                </ActClassCode>
                <ActMoodCode>
                    <xsl:value-of select="@moodCode"/>
                </ActMoodCode>
                <ActStatusCode>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </ActStatusCode>
                <EffectiveTimeLow>
                    <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                </EffectiveTimeLow>
                <EffectiveTimeHigh>
                    <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                </EffectiveTimeHigh>
                <ObservationCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@code"/>
                </ObservationCode>
                <ObservationCodeSystem>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@codeSystem"/>
                </ObservationCodeSystem>
                <ObservationDisplayName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@displayName"/>
                </ObservationDisplayName>
                <ObservationStatusCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:statusCode/@code"/>
                </ObservationStatusCode>
                <ObservationEffectiveTimeLow>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:effectiveTime/hl7:low/@value"/>
                </ObservationEffectiveTimeLow>
                <ObservationEffectiveTimeHigh>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:effectiveTime/hl7:high/@value"/>
                </ObservationEffectiveTimeHigh>
                <StatusCode>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </StatusCode>
                <StatusCodeSystem>
                    <xsl:value-of select="hl7:statusCode/@codeSystem"/>
                </StatusCodeSystem>
                <StatusCodeSystemName>
                    <xsl:value-of select="hl7:statusCode/@codeSystemName"/>
                </StatusCodeSystemName>
                <StatusDisplayName>
                    <xsl:value-of select="hl7:statusCode/@displayName"/>
                </StatusDisplayName>
                <ReferenceAllergyId>
                    <xsl:value-of select="hl7:text/hl7:reference/@value"/>
                </ReferenceAllergyId>
                <ReferenceReactionId>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:text/hl7:reference/@value"/>
                </ReferenceReactionId>
                <ReferenceSeverityId>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation/hl7:text/hl7:reference/@value"/>
                </ReferenceSeverityId>
                <ReferenceStatusId>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:entryRelationship/hl7:observation/hl7:statusCode/@code"/>
                </ReferenceStatusId>
                <RepresentedOrganization>
                    <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name | hl7:entryRelationship/hl7:observation/hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name"/>
                </RepresentedOrganization>
            </Allergy>
        </xsl:for-each>
    </AllergySection>
</xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="MedicationsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/hl7:ClinicalDocument">
        <Medications>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='10160-0']/hl7:entry/hl7:substanceAdministration">
                <Medication>
                    <DrugName>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@displayName"/>
                    </DrugName>
                    <GenericName>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/hl7:translation/@displayName"/>
                    </GenericName>
                    <Dose>
                        <xsl:value-of select="hl7:doseQuantity/@value"/>
                    </Dose>
                    <DoseUnits>
                        <xsl:value-of select="hl7:doseQuantity/@unit"/>
                    </DoseUnits>
                    <Instructions>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:text/reference/@value"/>
                    </Instructions>
                    <StartDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </StartDate>
                    <EndDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EndDate>
                    <Frequency>
                        <xsl:value-of select="hl7:effectiveTime/hl7:period/@value"/>
                    </Frequency>
                    <Route>
                        <xsl:value-of select="hl7:routeCode/@displayName"/>
                    </Route>
                    <Site>
                        <xsl:value-of select="hl7:approachSiteCode/@displayName"/>
                    </Site>
                    <AdministrationUnit>
                        <xsl:value-of select="hl7:administrationUnitCode/@displayName"/>
                    </AdministrationUnit>
                    <Provider>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:assignedPerson/hl7:name"/>
                    </Provider>
                    <NDC>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@code"/>
                    </NDC>
                    <RxNormCode>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@code"/>
                    </RxNormCode>
                    <GPI>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/hl7:translation[@codeSystem='2.16.840.1.113883.6.68']/@code"/>
                    </GPI>
                    <Status>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </Status>
                </Medication>
            </xsl:for-each>
        </Medications>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="ProblemsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <Problems>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='11450-4']/hl7:entry/hl7:act">
            <Problem>
                <ProblemID>
                    <xsl:value-of select="hl7:id/@root"/>
                </ProblemID>
                <ProblemClassCode>
                    <xsl:value-of select="@classCode"/>
                </ProblemClassCode>
                <MoodCode>
                    <xsl:value-of select="@moodCode"/>
                </MoodCode>
                <StatusCode>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </StatusCode>
                <EffectiveTimeLow>
                    <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                </EffectiveTimeLow>
                <EffectiveTimeHigh>
                    <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                </EffectiveTimeHigh>
                <ProblemTypeCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@code"/>
                </ProblemTypeCode>
                <ProblemTypeName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@displayName"/>
                </ProblemTypeName>
                <ValueCode>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@code"/>
                </ValueCode>
                <ValueDisplayName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@displayName"/>
                </ValueDisplayName>
                <CodeSystem>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@codeSystem"/>
                </CodeSystem>
                <CodeSystemName>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:code/@codeSystemName"/>
                </CodeSystemName>
                <AuthorTime>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:author/hl7:time/@value"/>
                </AuthorTime>
                <Author>
                    <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name"/>
                </Author>
            </Problem>
        </xsl:for-each>
    </Problems>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="DiagnosisXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <Diagnoses>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='46240-8']/hl7:entry/hl7:encounter/hl7:entryRelationship/hl7:act[hl7:code/@code='29308-4']">
            <Diagnosis>
            <DiagnosisID>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:id/@root"/>
            </DiagnosisID>
            <DiagnosisTypeCode>
            <xsl:value-of select="hl7:code/@code"/>
            </DiagnosisTypeCode>
            <DiagnosisTypeCodeSystem>
            <xsl:value-of select="hl7:code/@codeSystem"/>
            </DiagnosisTypeCodeSystem>
            <DiagnosisTypeCodeSystemName>
            <xsl:value-of select="hl7:code/@codeSystemName"/>
            </DiagnosisTypeCodeSystemName>
            <DiagnosisTypeDisplayName>
            <xsl:value-of select="hl7:code/@displayName"/>
            </DiagnosisTypeDisplayName>
            <DiagnosisEffectiveTimeLow>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:effectiveTime/hl7:low/@value"/>
            </DiagnosisEffectiveTimeLow>
            <DiagnosisEffectiveTimeHigh>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:effectiveTime/hl7:high/@value"/>
            </DiagnosisEffectiveTimeHigh>
            <DiagnosisCode>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@code"/>
            </DiagnosisCode>
            <DiagnosisCodeSystem>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@codeSystem"/>
            </DiagnosisCodeSystem>
            <DiagnosisCodeSystemName>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@codeSystemName"/>
            </DiagnosisCodeSystemName>
            <DiagnosisCodeDisplayName>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:value/@displayName"/>
            </DiagnosisCodeDisplayName>
            <DiagnosisStatusCode>
            <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:statusCode/@code"/>
            </DiagnosisStatusCode>
            <DiagnosisEncounterNumber>
            <xsl:value-of select="../../hl7:id/@extension | ../../hl7:id/@root"/>
            </DiagnosisEncounterNumber>
            </Diagnosis>
        </xsl:for-each>
    </Diagnoses>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="ProceduresXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <Procedures>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='47519-4']/hl7:entry/hl7:procedure">
            <Procedure>
                <ProcedureCode>
                    <xsl:value-of select="hl7:code/@code"/>
                </ProcedureCode>
                <ProcedureClassCode>
                    <xsl:value-of select="@classCode"/>
                </ProcedureClassCode>
                <MoodCode>
                    <xsl:value-of select="@moodCode"/>
                </MoodCode>
                <Status>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </Status>
                <CodeDisplayName>
                    <xsl:value-of select="hl7:code/@displayName"/>
                </CodeDisplayName>
                <CodeSystem>
                    <xsl:value-of select="hl7:code/@codeSystem"/>
                </CodeSystem>
                <CodeSystemName>
                    <xsl:value-of select="hl7:code/@codeSystemName"/>
                </CodeSystemName>
                <EffectiveTimeLow>
                    <xsl:value-of select="hl7:effectiveTime/hl7:low/@value | hl7:effectiveTime/@value"/>
                </EffectiveTimeLow>
                <EffectiveTimeHigh>
                    <xsl:value-of select="hl7:effectiveTime/hl7:high/@value | hl7:effectiveTime/@value"/>
                </EffectiveTimeHigh>
                <PerformerID>
                    <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:id/@extension | hl7:author/hl7:assignedAuthor/hl7:assignedPerson/hl7:id/@extension"/>
                </PerformerID>
                <PerformerName>
                    <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:assignedPerson/hl7:name/hl7:family | hl7:author/hl7:assignedAuthor/hl7:assignedPerson/hl7:name"/>
                </PerformerName>
                <PerformerOrganization>
                    <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:representedOrganization/hl7:name | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name"/>
                </PerformerOrganization>
                <PerformerAddress>
                    <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:addr | hl7:author/hl7:assignedAuthor/hl7:addr"/>
                </PerformerAddress>
                <AuthorTime>
                    <xsl:value-of select="hl7:author/hl7:time/@value"/>
                </AuthorTime>
            </Procedure>
        </xsl:for-each>
    </Procedures>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="ResultsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <Results>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='30954-2']/hl7:entry/hl7:organizer/hl7:component/hl7:observation">
            <Result>
                <ResultID>
                    <xsl:value-of select="../../hl7:id/@root"/>
                </ResultID>
                <OrganizerID>
                    <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:id/@root"/>
                </OrganizerID>
                <OrganizerName>
                    <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name"/>
                </OrganizerName>
                <OrganizerClassCode>
                    <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/@classCode"/>
                </OrganizerClassCode>
                <MoodCode>
                    <xsl:value-of select="@moodCode"/>
                </MoodCode>
                <StatusCode>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </StatusCode>
                <ObservationCode>
                    <xsl:value-of select="hl7:code/@code"/>
                </ObservationCode>
                <ObservationCodeDisplayName>
                    <xsl:value-of select="hl7:code/@displayName"/>
                </ObservationCodeDisplayName>
                <ObservationCodeSystem>
                    <xsl:value-of select="hl7:code/@codeSystem"/>
                </ObservationCodeSystem>
                <ObservationCodeSystemName>
                    <xsl:value-of select="hl7:code/@codeSystemName"/>
                </ObservationCodeSystemName>
                <EffectiveTimeLow>
                    <xsl:value-of select="../../hl7:effectiveTime/hl7:low/@value"/>
                </EffectiveTimeLow>
                <EffectiveTimeHigh>
                    <xsl:value-of select="../../hl7:effectiveTime/hl7:high/@value"/>
                </EffectiveTimeHigh>
                <TestValue>
                    <xsl:value-of select="hl7:value/@value"/>
                </TestValue>
                <Units>
                    <xsl:value-of select="hl7:value/@unit"/>
                </Units>
                <ReferenceRange>
                    <xsl:value-of select="hl7:referenceRange/hl7:observationRange/hl7:text"/>
                </ReferenceRange>
                <AuthorTime>
                    <xsl:value-of select="hl7:author/hl7:time/@value"/>
                </AuthorTime>
            </Result>
        </xsl:for-each>
    </Results>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="VitalSignsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <VitalSigns>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='8716-3']/hl7:entry/hl7:organizer/hl7:component/hl7:observation">
                <VitalSign>
                    <Value>
                        <xsl:value-of select="hl7:value/@value"/>
                    </Value>
                    <Unit>
                        <xsl:value-of select="hl7:value/@unit"/>
                    </Unit>
                    <xDate>
                    <xsl:value-of select="hl7:effectiveTime/@value"/>
                    </xDate>
                    <Description>
                        <xsl:value-of select="hl7:code/hl7:translation/@displayName | hl7:code/@displayName | hl7:code/hl7:originalText"/>
                    </Description>
                    <ObservationIDRoot>
                        <xsl:value-of select="hl7:id/@root"/>
                    </ObservationIDRoot>
                    <ObservationIDExtension>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </ObservationIDExtension>
                    <ObservationCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </ObservationCode>
                    <ObservationCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </ObservationCodeSystem>
                    <ObservationDisplayName>
                        <xsl:value-of select="hl7:code/@displayName | hl7:code/hl7:originalText"/>
                    </ObservationDisplayName>
                    <ObservationStatusCode>
                        <xsl:value-of select="hl7:statusCode/@code | hl7:statusCode/@displayName"/>
                    </ObservationStatusCode>
                    <ObservationEffectiveTimeLow>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value | hl7:effectiveTime/@value"/>
                    </ObservationEffectiveTimeLow>
                    <ObservationEffectiveTimeHigh>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value | hl7:effectiveTime/@value"/>
                    </ObservationEffectiveTimeHigh>
                    <OrganizerClassCode>
                        <xsl:value-of select="../../@classCode"/>
                    </OrganizerClassCode>
                    <OrganizerMoodCode>
                        <xsl:value-of select="../../@moodCode"/>
                    </OrganizerMoodCode>
                    <OrganizerCode>
                        <xsl:value-of select="../../hl7:code/@code"/>
                    </OrganizerCode>
                    <OrganizerCodeSystem>
                        <xsl:value-of select="../../hl7:code/@codeSystem"/>
                    </OrganizerCodeSystem>
                    <OrganizerDisplayName>
                        <xsl:value-of select="../../hl7:code/@displayName"/>
                    </OrganizerDisplayName>
                    <OrganizerStatusCode>
                        <xsl:value-of select="../../hl7:statusCode/@code"/>
                    </OrganizerStatusCode>
                    <OrganizerEffectiveTimeLow>
                        <xsl:value-of select="../../hl7:effectiveTime/hl7:low/@value"/>
                    </OrganizerEffectiveTimeLow>
                    <OrganizerEffectiveTimeHigh>
                        <xsl:value-of select="../../hl7:effectiveTime/hl7:high/@value"/>
                    </OrganizerEffectiveTimeHigh>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                </VitalSign>
            </xsl:for-each>
        </VitalSigns>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="ImmunizationsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/hl7:ClinicalDocument">
        <Immunizations>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='11369-6']/hl7:entry/hl7:substanceAdministration">
                <Immunization>
                    <ImmunizationID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </ImmunizationID>
                    <Route>
                        <xsl:value-of select="hl7:routeCode/@displayName | hl7:routeCode/hl7:originalText"/>
                    </Route>
                    <Dose>
                        <xsl:value-of select="hl7:doseQuantity/@value"/>
                    </Dose>
                    <DoseUnit>
                        <xsl:value-of select="hl7:doseQuantity/@unit"/>
                    </DoseUnit>
                    <Vaccine>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@displayName"/>
                    </Vaccine>
                    <VaccineCode>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@code"/>
                    </VaccineCode>
                    <VaccineCodeSystem>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@codeSystem"/>
                    </VaccineCodeSystem>
                    <VaccineCodeSystemName>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:code/@codeSystemName"/>
                    </VaccineCodeSystemName>
                    <LotNumber>
                        <xsl:value-of select="hl7:consumable/hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:lotNumberText"/>
                    </LotNumber>
                    <StartDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value | hl7:effectiveTime/@value"/>
                    </StartDate>
                    <EndDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EndDate>
                    <PerformerID>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:id/@extension | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:id/@extension | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:name"/>
                    </PerformerID>
                    <PerformerAddress>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:streetAddressLine | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:addr/hl7:streetAddressLine"/>
                    </PerformerAddress>
                    <PerformerCity>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:city | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:addr/hl7:city"/>
                    </PerformerCity>
                    <PerformerState>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:state | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:addr/hl7:state"/>
                    </PerformerState>
                    <PerformerPostalCode>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:postalCode | hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:addr/hl7:postalCode"/>
                    </PerformerPostalCode>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </StatusCode>
                    <NullFlavor>
                        <xsl:value-of select="@nullFlavor"/>
                    </NullFlavor>
                </Immunization>
            </xsl:for-each>
        </Immunizations>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="PlanOfCareXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
    <PlanOfCare>
        <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='18776-5']/hl7:entry/hl7:encounter">
            <PlanEntry>
                <EncounterID>
                    <xsl:value-of select="hl7:id/@root"/>
                </EncounterID>
                <EncounterExtension>
                    <xsl:value-of select="hl7:id/@extension"/>
                </EncounterExtension>
                <DisplayName>
                    <xsl:value-of select="hl7:code/@displayName"/>
                </DisplayName>
                <StatusCode>
                    <xsl:value-of select="hl7:statusCode/@code"/>
                </StatusCode>
                <EffectiveTimeLow>
                    <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                </EffectiveTimeLow>
                <EffectiveTimeHigh>
                    <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                </EffectiveTimeHigh>
                <Performer>
                    <PerformerID>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:id/@extension"/>
                    </PerformerID>
                    <PerformerOrganization>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:representedOrganization/hl7:name"/>
                    </PerformerOrganization>
                    <PerformerAddress>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:streetAddressLine"/>
                    </PerformerAddress>
                    <PerformerCity>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:city"/>
                    </PerformerCity>
                    <PerformerState>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:state"/>
                    </PerformerState>
                    <PerformerPostalCode>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr/hl7:postalCode"/>
                    </PerformerPostalCode>
                </Performer>
                <AuthorTime>
                    <xsl:value-of select="hl7:author/hl7:time/@value"/>
                </AuthorTime>
            </PlanEntry>
        </xsl:for-each>
    </PlanOfCare>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="SocialHistoryXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <SocialHistoryItems>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='29762-2']/hl7:entry/hl7:observation">
                <SocialHistoryItem>
                    <SocialHistoryID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </SocialHistoryID>
                    <ConceptDescription>
                        <xsl:value-of select="hl7:code/hl7:originalText/hl7:reference/@value"/>
                    </ConceptDescription>
                    <ObservationCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </ObservationCode>
                    <ObservationCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </ObservationCodeSystem>
                    <ObservationCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </ObservationCodeSystemName>
                    <ObservationDisplayName>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </ObservationDisplayName>
                    <ValueCode>
                        <xsl:value-of select="hl7:value/@code"/>
                    </ValueCode>
                    <ValueCodeSystem>
                        <xsl:value-of select="hl7:value/@codeSystem"/>
                    </ValueCodeSystem>
                    <ValueCodeSystemName>
                        <xsl:value-of select="hl7:value/@codeSystemName"/>
                    </ValueCodeSystemName>
                    <xsl:variable name="valueDisplay" select="substring-after(hl7:text/hl7:reference/@value, '#')" />
                    <ValueDisplayName>
                        <xsl:value-of select="hl7:value/@displayName | ../../hl7:text/hl7:table/hl7:tbody/hl7:tr/hl7:td/hl7:content[@ID=$valueDisplay] | hl7:text"/>
                    </ValueDisplayName>
                    <Units>
                        <xsl:value-of select="hl7:value/@unit"/>
                    </Units>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </StatusCode>
                    <ObservationIDExtension>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </ObservationIDExtension>
                    <ObservationIDRoot>
                        <xsl:value-of select="hl7:id/@root"/>
                    </ObservationIDRoot>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                    <EffectiveTimeLow>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </EffectiveTimeLow>
                    <EffectiveTimeHigh>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EffectiveTimeHigh>
                </SocialHistoryItem>
            </xsl:for-each>
        </SocialHistoryItems>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="FunctionalStatusXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/hl7:ClinicalDocument">
        <FunctionalStatuses>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='47420-5']/hl7:entry/hl7:observation">
                <FunctionalStatus>
                    <Status>
                        <xsl:value-of select="hl7:value/@displayName"/>
                    </Status>
                    <xDate>
                        <xsl:value-of select="hl7:effectiveTime/@value"/>
                    </xDate>
                    <Description>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </Description>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </StatusCode>
                    <ObservationCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </ObservationCode>
                    <ObservationSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </ObservationSystem>
                    <EffectiveTime>
                        <xsl:value-of select="hl7:effectiveTime/@value"/>
                    </EffectiveTime>
                </FunctionalStatus>
            </xsl:for-each>
        </FunctionalStatuses>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="FamilyHistoryXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <FamilyHistories>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='10157-6']/hl7:entry/hl7:observation">
                <FamilyHistory>
                    <RelativePerson>
                        <xsl:value-of select="hl7:value/@displayName"/>
                    </RelativePerson>
                    <RelativeCode>
                        <xsl:value-of select="hl7:value/@code"/>
                    </RelativeCode>
                    <RelativeCodeSystem>
                        <xsl:value-of select="hl7:value/@codeSystem"/>
                    </RelativeCodeSystem>
                    <Condition>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </Condition>
                    <OnsetAge>
                        <xsl:value-of select="hl7:effectiveTime/@value"/>
                    </OnsetAge>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </StatusCode>
                    <ObservationCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </ObservationCode>
                    <ObservationSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </ObservationSystem>
                    <ObservationDisplayName>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </ObservationDisplayName>
                    <ObservationID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </ObservationID>
                    <ObservationIDOid>
                        <xsl:value-of select="hl7:id/@root"/>
                    </ObservationIDOid>
                </FamilyHistory>
            </xsl:for-each>
        </FamilyHistories>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="AdvanceDirectiveXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <AdvanceDirectives>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='42348-3']/hl7:entry/hl7:act">
                <AdvanceDirective>
                    <DirectiveType>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </DirectiveType>
                    <DateSigned>
                        <xsl:value-of select="hl7:effectiveTime/@value"/>
                    </DateSigned>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </StatusCode>
                    <DirectiveID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </DirectiveID>
                </AdvanceDirective>
            </xsl:for-each>
        </AdvanceDirectives>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="EncounterXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/hl7:ClinicalDocument">
        <Encounters>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='46240-8']/hl7:entry/hl7:encounter">
                <Encounter>
                    <EncounterNumber>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </EncounterNumber>
                    <EncounterTypeDisplayName>
                        <xsl:value-of select="hl7:code/@displayName | hl7:code/hl7:originalText"/>
                    </EncounterTypeDisplayName>
                    <EncounterTypeCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </EncounterTypeCode>
                    <EncounterTypeCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </EncounterTypeCodeSystem>
                    <EncounterTypeCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </EncounterTypeCodeSystemName>
                    <ReasonForVisit>
                        <xsl:value-of select="hl7:entryRelationship/hl7:observation/hl7:text"/>
                    </ReasonForVisit>
                    <VisitDescription>
                        <xsl:value-of select="hl7:text"/>
                    </VisitDescription>
                    <StatusCode>
                        <xsl:value-of select="hl7:statusCode/@code | hl7:statusCode/@displayName | hl7:statusCode/hl7:originalText"/>
                    </StatusCode>
                    <StartDateTime>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </StartDateTime>
                    <EndDateTime>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EndDateTime>
                    <DischargeDisposition>
                    <xsl:choose>
                    <xsl:when test="hl7:dischargeDispositionCode/@displayName">
                    <xsl:value-of select="hl7:dischargeDispositionCode/@displayName" />
                    </xsl:when>
                    <xsl:when test="../../hl7:text/hl7:paragraph/hl7:content[@ID=hl7:dischargeDispositionCode/hl7:reference/@value]">
                    <xsl:value-of select="../../hl7:text/hl7:paragraph/hl7:content[@ID=hl7:dischargeDispositionCode/hl7:reference/@value]" />
                    </xsl:when>
                    <xsl:otherwise/>
                    </xsl:choose>
                    </DischargeDisposition>
                    <FacilityName>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/name | hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:name"/>
                    </FacilityName>
                    <FacilityIDAAName>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:id/@assigningAuthorityName | hl7:participant/hl7:participantRole/hl7:id/@root"/>
                    </FacilityIDAAName>
                    <FacilityIDExtension>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:id/@extension | hl7:participant/hl7:participantRole/hl7:id/@extension"/>
                    </FacilityIDExtension>
                    <FacilityIDRoot>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:representedOrganization/hl7:id/@root | hl7:participant/hl7:participantRole/hl7:id/@root"/>
                    </FacilityIDRoot>
                    <PerformerID>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:id/@extension"/>
                    </PerformerID>
                    <PerformerAddress>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:addr"/>
                    </PerformerAddress>
                    <PerformerTelecom>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:telecom/@value"/>
                    </PerformerTelecom>
                    <PerformerName>
                        <xsl:value-of select="hl7:performer/hl7:assignedEntity/hl7:assignedPerson/hl7:name"/>
                    </PerformerName>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                    <LocationID>
                        <xsl:value-of select="hl7:participant/hl7:participantRole/hl7:id/@extension"/>
                    </LocationID>
                    <LocationAddress>
                        <xsl:value-of select="hl7:participant/hl7:participantRole/hl7:addr"/>
                    </LocationAddress>
                    <LocationTelecom>
                        <xsl:value-of select="hl7:participant/hl7:participantRole/hl7:telecom/@value"/>
                    </LocationTelecom>
                    <LocationName>
                        <xsl:value-of select="hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:name"/>
                    </LocationName>
                </Encounter>
            </xsl:for-each>
        </Encounters>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="GoalsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <Goals>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='61146-7']/hl7:entry/hl7:act">
                <Goal>
                    <GoalID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </GoalID>
                    <GoalDescription>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </GoalDescription>
                    <GoalCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </GoalCode>
                    <GoalCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </GoalCodeSystem>
                    <GoalCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </GoalCodeSystemName>
                    <GoalStatus>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </GoalStatus>
                    <StartDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </StartDate>
                    <EndDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EndDate>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                    <AuthorName>
                        <xsl:value-of select="hl7:author/hl7:assignedAuthor/hl7:assignedPerson/hl7:name"/>
                    </AuthorName>
                </Goal>
            </xsl:for-each>
        </Goals>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="ImplantsXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <Implants>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='46264-8']/hl7:entry/hl7:procedure">
                <Implant>
                    <ImplantID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </ImplantID>
                    <DeviceName>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </DeviceName>
                    <DeviceCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </DeviceCode>
                    <DeviceCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </DeviceCodeSystem>
                    <DeviceCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </DeviceCodeSystemName>
                    <ManufacturerModelName>
                        <xsl:value-of select="hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:manufacturerModelName"/>
                    </ManufacturerModelName>
                    <SerialNumber>
                        <xsl:value-of select="hl7:manufacturedProduct/hl7:manufacturedMaterial/hl7:lotNumberText"/>
                    </SerialNumber>
                    <ImplantStatus>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </ImplantStatus>
                    <ImplantDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </ImplantDate>
                    <RemovalDate>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </RemovalDate>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                </Implant>
            </xsl:for-each>
        </Implants>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="EncompassingEncounterXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>
    <xsl:template match="/hl7:ClinicalDocument">
        <EncompassingEncounters>
            <xsl:for-each select="hl7:componentOf/hl7:encompassingEncounter">
                <EncompassingEncounter>
                    <EncounterID>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </EncounterID>
                    <EncounterTypeDisplayName>
                        <xsl:value-of select="hl7:code/@displayName"/>
                    </EncounterTypeDisplayName>
                    <EncounterTypeCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </EncounterTypeCode>
                    <EncounterTypeCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </EncounterTypeCodeSystem>
                    <EncounterTypeCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </EncounterTypeCodeSystemName>
                    <StartDateTime>
                        <xsl:value-of select="hl7:effectiveTime/hl7:low/@value"/>
                    </StartDateTime>
                    <EndDateTime>
                        <xsl:value-of select="hl7:effectiveTime/hl7:high/@value"/>
                    </EndDateTime>
                    <DischargeDisposition>
                        <xsl:value-of select="hl7:dischargeDispositionCode/@displayName | hl7:dischargeDispositionCode/hl7:originalText"/>
                    </DischargeDisposition>
                    <LocationID>
                        <xsl:value-of select="hl7:location/hl7:healthCareFacility/hl7:id/@extension"/>
                    </LocationID>
                    <LocationName>
                        <xsl:value-of select="hl7:location/hl7:healthCareFacility/hl7:location/hl7:name"/>
                    </LocationName>
                    <LocationAddress>
                        <xsl:value-of select="hl7:location/hl7:healthCareFacility/hl7:location/hl7:addr"/>
                    </LocationAddress>
                    <LocationTelecom>
                        <xsl:value-of select="hl7:location/hl7:healthCareFacility/hl7:location/hl7:telecom/@value"/>
                    </LocationTelecom>
                    <AuthorTime>
                        <xsl:value-of select="hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                </EncompassingEncounter>
            </xsl:for-each>
        </EncompassingEncounters>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="PayerXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/>

    <xsl:template match="/hl7:ClinicalDocument">
        <Payers>
            <xsl:for-each select="hl7:component/hl7:structuredBody/hl7:component/hl7:section[hl7:code/@code='48768-6']/hl7:entry/hl7:act">
                <Payer>
                    <PayerName>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity/hl7:id/@root | hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity/hl7:representedOrganization/hl7:name"/>
                    </PayerName>
                    <PolicyNumber>
                        <xsl:value-of select="hl7:id/@extension"/>
                    </PolicyNumber>
                    <CoveredParty>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity/hl7:assignedPerson/hl7:name"/>
                    </CoveredParty>
                    <PayerCode>
                        <xsl:value-of select="hl7:code/@code"/>
                    </PayerCode>
                    <PayerCodeSystem>
                        <xsl:value-of select="hl7:code/@codeSystem"/>
                    </PayerCodeSystem>
                    <PayerCodeSystemName>
                        <xsl:value-of select="hl7:code/@codeSystemName"/>
                    </PayerCodeSystemName>
                    <PayerStatusCode>
                        <xsl:value-of select="hl7:statusCode/@code"/>
                    </PayerStatusCode>
                    <EffectiveTimeLow>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:time/hl7:low/@value[1]"/>
                    </EffectiveTimeLow>
                    <EffectiveTimeHigh>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:time/hl7:high/@value[1]"/>
                    </EffectiveTimeHigh>
                    <PerformerIDs>
                      	<xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity[hl7:code/@code='PAYOR']/hl7:id/@extension[1]"/>
                    </PerformerIDs>
                    <PerformerAddress>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity[hl7:code/@code='PAYOR']/hl7:addr/hl7:streetAddressLine"/>
                    </PerformerAddress>
                    <PerformerTelecom>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity[hl7:code/@code='PAYOR']/hl7:telecom/@value"/>
                    </PerformerTelecom>
                    <PerformerName>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity[hl7:code/@code='PAYOR']/hl7:assignedPerson/hl7:name"/>
                    </PerformerName>
                    <AuthorTime>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:author/hl7:time/@value"/>
                    </AuthorTime>
                    <MemberID>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:id/@extension"/>
                    </MemberID>
                    <LocationAddress>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:addr[1]"/>
                    
                    </LocationAddress>
                    <LocationTelecom>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:telecom/@value"/>
                    </LocationTelecom>
                    <LocationName>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:playingEntity/hl7:name/@value"/>
                    </LocationName>
                    <ParticipantRoleID>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:id/@root"/>
                    </ParticipantRoleID>
                    <ParticipantRoleCode>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:code/@code"/>
                    </ParticipantRoleCode>
                    <ParticipantRoleCodeSystem>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:code/@codeSystem"/>
                    </ParticipantRoleCodeSystem>
                    <ParticipantRoleCodeSystemName>
                        <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:code/@codeSystemName"/>
                    </ParticipantRoleCodeSystemName>
                </Payer>
            </xsl:for-each>
        </Payers>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>

<XData name="PatientXSLT">
<Data><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:hl7="urn:hl7-org:v3" exclude-result-prefixes="hl7">
    <xsl:output method="xml" indent="yes"/> 

    <xsl:template match="/hl7:ClinicalDocument">
        <Patient>
            <PatientMRN>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:id/@extension"/>
            </PatientMRN>
            <FirstName>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:name/hl7:given"/>
            </FirstName>
            <LastName>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:name/hl7:family"/>
            </LastName>
            <DOB>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:birthTime/@value"/>
            </DOB>
            <GenderCode>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:administrativeGenderCode/@code"/>
            </GenderCode>
            <GenderDisplay>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:administrativeGenderCode/@displayName"/>
            </GenderDisplay>
            <GenderSystem>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:administrativeGenderCode/@codeSystem"/>
            </GenderSystem>
            <Address>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:addr/hl7:streetAddressLine"/>
            </Address>
            <City>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:addr/hl7:city"/>
            </City>
            <State>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:addr/hl7:state"/>
            </State>
            <ZipCode>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:addr/hl7:postalCode"/>
            </ZipCode>
            <Country>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:addr/hl7:country"/>
            </Country>
            <PhoneNumber>
                <xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:telecom/@value"/>
            </PhoneNumber>
            <PatientMRN>
            	<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:id/@extension"/>
            </PatientMRN>
            <Email>
    			<xsl:for-each select="hl7:recordTarget/hl7:patientRole/hl7:telecom[contains(@value, '@')]">
        		<xsl:if test="contains(@value, '@')">
            	<xsl:value-of select="@value"/>
        		</xsl:if>
    			</xsl:for-each>
			</Email>
			
			<MaritalStatusCode>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:maritalStatusCode/@code"/>
			</MaritalStatusCode>
			<MaritalStatusDisplay>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:maritalStatusCode/@displayName"/>
			</MaritalStatusDisplay>
			<MaritalStatusSystem>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:maritalStatusCode/@codeSystem"/>
			</MaritalStatusSystem>
			
			<RaceCode>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:raceCode/@code"/>
			</RaceCode>
			<RaceDisplay>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:raceCode/@displayName"/>
			</RaceDisplay>
			<RaceSystem>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:raceCode/@codeSystem"/>
			</RaceSystem>
			
			<EthnicityCode>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:ethnicGroupCode/@code"/>
			</EthnicityCode>
			<EthnicityDisplay>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:ethnicGroupCode/@displayName"/>
			</EthnicityDisplay>
			<EthnicitySystem>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:ethnicGroupCode/@codeSystem"/>
			</EthnicitySystem>
			<LanguageCode>
			<xsl:value-of select="hl7:recordTarget/hl7:patientRole/hl7:patient/hl7:languageCommunication/hl7:languageCode/@code"/>
			</LanguageCode>
            <InsurancePolicyNumber>
                <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:participant/hl7:participantRole/hl7:id/@extension"/>
            </InsurancePolicyNumber>
            <InsuranceProvider>
                <xsl:value-of select="hl7:entryRelationship/hl7:act/hl7:performer/hl7:assignedEntity/hl7:representedOrganization/hl7:name"/>
            </InsuranceProvider>
        </Patient>
    </xsl:template>
</xsl:stylesheet>
]]></Data>
</XData>


</Class>


<Class name="LEADNorth.CDAProfiler">
<Description>
LEADNorth.CDAProfiler</Description>
<Super>%ZEN.application</Super>
<TimeChanged>67184,53334.529697314</TimeChanged>
<TimeCreated>67079,47333.4825641</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>CDA Data Profiling Tool</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>
</Class>




<Class name="LEADNorth.REST.Handler">
<Super>%CSP.REST</Super>
<TimeChanged>67338,59884.5040726</TimeChanged>
<TimeCreated>67277,38922.0779492</TimeCreated>

<Parameter name="UseSession">
<Type>Integer</Type>
<Default>0</Default>
</Parameter>

<XData name="UrlMap">
<XMLNamespace>http://www.intersystems.com/urlmap</XMLNamespace>
<Data><![CDATA[
<Routes>
      <Route Url="/hello" Method="GET" Call="Hello"/>
      <Route Url="/index/getDistinctProfileIDs" Method="GET" Call="GetDistinctProfileIDs"/>
      <Route Url="/index/getSectionCoverage" Method="GET" Call="GetSectionCoverage"/>
      <Route Url="/index/RenameProfile" Method="POST" Call="RenameProfile"/>
      <Route Url="/dataImporter/processImport" Method="POST" Call="ProcessImport"/>
      <Route Url="/reports/generateExcelReport" Method="POST" Call="GenerateExcelReport"/>
      <Route Url="/reports/getDistinctReportProfileIDs" Method="GET" Call="GetDistinctReportProfileIDs"/>
      <Route Url="/reports/QS" Method="POST" Call="FetchAndRender"/>
      <Route Url="/settings/GetXSLTContent" Method="POST" Call="GetXSLTContent"/>
      <Route Url="/settings/SaveXSLTContent" Method="POST" Call="SaveXSLTContent"/>
      <Route Url="/settings/ApplyXSLTToCCD" Method="POST" Call="ApplyXSLTToCCD"/>
      <Route Url="/settings/DeleteDataByProfile" Method="POST" Call="DeleteDataByProfile"/>
      <Route Url="/settings/DeleteAllData" Method="POST" Call="DeleteAllData"/>
      <Route Url="/settings/PopulateProfileIDs" Method="GET" Call="PopulateProfileIDs"/>
</Routes>
]]></Data>
</XData>

<Method name="RenameProfile">
<Description>
Used to rename profiles</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)
    
    Set oldID = requestObj.%Get("oldID")
    Set newID = requestObj.%Get("newID")

    Try {
        Set sectionTables = $LB(
            "CCDDocument",
            "CCDAdvanceDirective",
            "CCDAllergy",
            "CCDEncounter",
            "CCDImmunization",
            "CCDMedication",
            "CCDProblem",
            "CCDProcedure",
            "CCDResult",
            "CCDSocialHistory",
            "CCDVitalSign",
            "CCDPlanOfCare",
            "CCDFunctionalStatus",
            "CCDGoals",
            "CCDImplants",
            "CCDFamilyHistory",
            "CCDDiagnosis",
            "CCDEncompassingEncounter",
            "CCDPatient",
            "CCDPayer"
        )
        
        // Loop through each table to rename the profile
        For i=1:1:$LL(sectionTables) {
            Set tableName = $LG(sectionTables, i)
            Set sqlText = "UPDATE LEADNorth_CDAProfiler_Sections."_tableName_" SET ProfileID = ? WHERE ProfileID = ?"

            Set tStatement = ##class(%SQL.Statement).%New()
            Set tSC = tStatement.%Prepare(sqlText)
            if tSC'=1 {
                Set %response.Status = ..#HTTP500INTERNALSERVERERROR
                Write "Failed to prepare SQL for table "_tableName
                Quit
            }

            Set tSC = tStatement.%Execute(newID, oldID)
            if tSC.%SQLCODE < 0 {
                Set %response.Status = ..#HTTP500INTERNALSERVERERROR
                Write "Failed to execute SQL for table "_tableName
                Quit
            }
        }

        if tSC = 1 {
	        Set %response.Status = ..#HTTP200OK
        Write "Profile renamed successfully across all tables."
        Write {"message":"Success"}.%ToJSON()
        Quit
        }

    } Catch ex {
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Write "Exception: "_ex.DisplayString()
        Quit
    }
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetSectionCoverage">
<Description>
Gets the section coverage statistics for each distinct ProfileID.
Returns a JSON array of objects, each representing a profile and the percentage presence of each section.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Define the list of clinical document sections to check for coverage
    Set sections = "AdvanceDirective,Allergy,Diagnosis,Encounter,EncompassingEncounter,FamilyHistory,FunctionalStatus,Goals,Implants,Immunization,Medication,Patient,Payer,PlanOfCare,Problem,Procedure,Result,SocialHistory,VitalSign"

    // Initialize the array that will store coverage results for each profile
    Set finalResult = ##class(%DynamicArray).%New()

    // Prepare a query to retrieve all distinct profile IDs, sorted by most recent document creation
    Set sql = ##class(%SQL.Statement).%New()
    Set sc = sql.%Prepare("SELECT DISTINCT ProfileID FROM LEADNorth_CDAProfiler_Sections.CCDDocument ORDER BY MAX(CreatedAt) DESC")
    Quit:$$$ISERR(sc) sc

    // Execute the distinct ProfileID query
    Set rs = sql.%Execute()
    While rs.%Next() {
        Set profileID = rs.%Get("ProfileID")

        // Query total document count and latest update timestamp for this profile
        Set stmtMeta = ##class(%SQL.Statement).%New()
        Set sc = stmtMeta.%Prepare("SELECT COUNT(*) AS total, MAX(CreatedAt) AS latest FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID=?")
        Continue:$$$ISERR(sc)

        Set rsMeta = stmtMeta.%Execute(profileID)
        Do rsMeta.%Next()
        Set total = rsMeta.%Get("total")
        Set latestTS = rsMeta.%Get("latest")

        // Format timestamp to human-readable string
        Set formattedDate = $ZDT($ZDATETIMEH(latestTS,3), 3)

        // Create an object to hold results for this profile
        Set profileObj = ##class(%DynamicObject).%New()
        Set profileObj.ProfileID = profileID
        Set profileObj.DocumentCount = total
        Set profileObj.LastUpdated = formattedDate
        Set profileObj.Sections = ##class(%DynamicArray).%New()

        // Loop through each section to calculate its presence percentage in the profile's documents
        For i=1:1:$L(sections,",") {
            Set section = $P(sections,",",i)

            // Prepare a query to count how many documents mention this section
            Set qry = "SELECT COUNT(*) AS c FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID=? AND SectionsPresent LIKE ?"
            Set sqlSection = ##class(%SQL.Statement).%New()
            Set sc = sqlSection.%Prepare(qry)
            Continue:$$$ISERR(sc)

            Set pat = "%" _ section _ "%"
            Set rsSection = sqlSection.%Execute(profileID, pat)
            Do rsSection.%Next()
            Set countSec = rsSection.%Get("c")

            // Compute percentage of documents with this section
            If total > 0 {
                Set pct = $J(countSec*100/total,0,1)
            } Else {
                Set pct = 0
            }

            // Add section stats to the profile object
            Set sectionObj = ##class(%DynamicObject).%New()
            Set sectionObj.SectionName = section
            Set sectionObj.Percentage = pct

            Do profileObj.Sections.%Push(sectionObj)
        }

        // Add this profile's result to the final result array
        Do finalResult.%Push(profileObj)
    }

    // Return final JSON response
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "application/json;charset=UTF-8"
    Write finalResult.%ToJSON()

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetXSLTContent">
<Description>
Retrieves the contents of a specific XSLT block (XData) from the CDAParser class.
Expects JSON input with "xsltBlock" indicating which XData block to retrieve.
Returns the contents of the block as a string, or an error if not found.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // Read and parse JSON request body
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    // Extract requested XData block name
    Set xsltBlock = requestObj.%Get("xsltBlock")

    // Define the class containing the XSLT XData blocks
    Set className = "LEADNorth.CDAProfiler.XSLT.CDAParser"

    // Attempt to open the requested XData block from the class
    Set xdata = ##class(%Dictionary.XDataDefinition).IDKEYOpen(className, xsltBlock)
    If xdata = $$$NULLOREF {
        Quit "XData block not found!"
    }

    // Output the contents of the XData block
    Write xdata.Data.Read()
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="SaveXSLTContent">
<Description>
Saves modified XPath content into a specified XSLT block (XData) in the CDAParser class.
Expects JSON input with "xsltBlock" and "xpathContent".
Updates the in-memory class definition and recompiles it.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Read and parse JSON request body
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    // Extract block name and new XSLT content
    Set xsltBlock = requestObj.%Get("xsltBlock")
    Set xpathContent = requestObj.%Get("xpathContent")

    // Identify the class containing the target XData block
    Set className = "LEADNorth.CDAProfiler.XSLT.CDAParser"

    // Load the XData block definition
    Set xdata = ##class(%Dictionary.XDataDefinition).IDKEYOpen(className, xsltBlock)
    If xdata = $$$NULLOREF {
        Quit "XData block not found!"
    }

    // Clear and overwrite the XData block with new content
    Do xdata.Data.Clear()
    Do xdata.Data.Write(xpathContent)

    // Save the updated class metadata
    Set status = xdata.%Save()
    If $$$ISERR(status) {
        Quit "Failed to save XData!"
    }

    // Recompile the class to apply the updated XData
    Set sc = $SYSTEM.Status.OK()
    Set tInitIO = ##class(%Library.Device).ReDirectIO(1)
    Try {
        $$$THROWONERROR(sc, $SYSTEM.OBJ.Compile(className, "/displaylog=0",,1))
    } Catch(ex) {
        Set sc = ex.AsStatus()
    }
    Do ##class(%Library.Device).ReDirectIO(1)

    If $$$ISERR(sc) {
        Quit "Failed to recompile the class! Error: "_$SYSTEM.Status.GetErrorText(sc)
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="ApplyXSLTToCCD">
<Description>
Applies the specified XSLT block to the provided CCD file and returns the transformed output.
Expects JSON input with:
- "ccdFilePath": absolute path to the CCD file
- "xsltBlock": name of the XData block containing the XSLT to apply
Returns: The transformed CCD content as HTML in the response body.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
    // Parse the request body and extract inputs
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    Set ccdFilePath = requestObj.%Get("ccdFilePath")
    Set xsltBlock = requestObj.%Get("xsltBlock")

    // Validate input: fail early if no CCD path is provided
    If ccdFilePath = "" {
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Set %response.ContentType = "text/plain;charset=UTF-8"
        Write "Error: No CCD file path provided."
        Quit $$$OK
    }

    // Attempt to convert CCD XML to a stream using the specified XSLT
    Try {
        Set ccdStream = ##class(LEADNorth.CDAProfiler.CCDProcessor).FileToStream(ccdFilePath, xsltBlock)
    } Catch ex {
        // Handle XSLT application or file load failure
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Set %response.ContentType = "text/plain;charset=UTF-8"
        Write "Error: Exception occurred while processing the CCD file: "_ex.DisplayString()
        Quit 
    }

    // If transformation failed silently
    If ccdStream = "" {
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Set %response.ContentType = "text/plain;charset=UTF-8"
        Write "Error: Failed to load CCD file or apply XSLT."
        Quit $$$OK
    }

    // Read and concatenate the transformed output from the stream
    Set transformedOutput = ccdStream.Read()
    While 'ccdStream.AtEnd {
        Set transformedOutput = transformedOutput _ ccdStream.Read()
    }

    // Return transformed HTML output
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "text/html;charset=UTF-8"
    Write transformedOutput

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="PopulateProfileIDs">
<Description><![CDATA[
Populates an HTML <select> dropdown with all distinct ProfileIDs found in CCDDocument.
Returns HTML <option> elements as the response body.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // Prepare the SQL query to get all unique ProfileIDs
    Set query = "SELECT DISTINCT ProfileID FROM LEADNorth_CDAProfiler_Sections.CCDDocument"
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)

    // Exit early with error message if query fails to prepare
    If $$$ISERR(status) {
        Return "Error: Could not retrieve ProfileIDs."
    }

    // Execute the query and build the HTML <option> list
    Set resultSet = statement.%Execute()
    Set html = ""

    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set html = html _ "<option value='"_profileID_"'>" _ profileID _ "</option>"
    }

    // Set response content type and status
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "text/html"

    // Output the generated HTML
    Write html
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteDataByProfile">
<Description>
Deletes all section data associated with the specified ProfileID across all CCD-related tables.
Expects a JSON body with a "profileID" field.
Returns a success or error message as plain text or JSON.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Read and parse the incoming request body
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    // Extract the ProfileID from the request
    Set profileID = requestObj.%Get("profileID")

    Try {
        // Escape single quotes to prevent SQL issues (extra safe even with :param binding)
        Set profileID = $Replace(profileID, "'", "''")

        // Delete the profile's data from every section-specific table
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncounter WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProcedure WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDResult WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProblem WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPayer WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPatient WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDMedication WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImmunization WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDGoals WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImplants WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAllergy WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis WHERE ProfileID = :profileID)

        // Respond with a success message
        Set %response.ContentType = "application/json;charset=UTF-8"
        Set %response.Status = ..#HTTP200OK
        Write "Successfully deleted data for profile id '"_profileID_"'"

    } Catch ex {
        // Catch any exceptions and return error message
        Set errorMessage = "Error deleting data for ProfileID: "_profileID_" - "_ex.DisplayString()
        Set %response.ContentType = "text/plain;charset=UTF-8"
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Write errorMessage
        Quit
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteAllData">
<Description>
Deletes all data from all CCD-related section tables in the system.
Intended for administrative use — this action is irreversible and removes all profiled documents.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Try {
        // Execute SQL DELETE on every section-specific table
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDocument)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncounter)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProcedure)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDResult)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProblem)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPayer)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPatient)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDMedication)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImmunization)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDGoals)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImplants)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAllergy)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis)

        // Set response indicating success
        Set %response.ContentType = "application/json;charset=UTF-8"
        Set %response.Status = ..#HTTP200OK
        Write "All data deleted successfully"
    } Catch ex {
        // Catch and return any exceptions encountered during deletion
        Set errorMessage = "Error deleting data"_ex.DisplayString()
        Set %response.ContentType = "text/plain;charset=UTF-8"
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Write errorMessage
        Quit
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GenerateExcelReport">
<Description>
Generates an Excel-compatible XML spreadsheet containing profiling data for a given ProfileID.
Sections are specified via JSON input and rendered as individual worksheets.
Supports optional PHI redaction via the "deIdentify" flag.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // Create a new character stream to accumulate the Excel XML content
    Set stream = ##class(%Stream.GlobalCharacter).%New()

    // Parse JSON request body and extract parameters
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    Set profileID = requestObj.%Get("profileID")
    Set deIdentify = requestObj.%Get("deIdentify")
    Set sectionsString = requestObj.%Get("sections")

    // Ensure "metadata" section is always included at the beginning
    If sectionsString = "" {
        Set sectionsString = "patient,encompassingEncounter,encounters,metadata,advanceDirective,allergy,diagnosis,familyHistory,functionalStatus,goals,implants,immunizations,medications,payer,planOfCare,problems,procedures,results,socialHistory,vitalSigns"
    } Else {
        Set sectionsString = "metadata"_sectionsString
    }

    // Write Excel-compatible XML headers and namespace declarations
    Do stream.Write("<?xml version=""1.0""?>")
    Do stream.Write("<?mso-application progid=""Excel.Sheet""?>")
    Do stream.Write("<Workbook xmlns=""urn:schemas-microsoft-com:office:spreadsheet"" ")
    Do stream.Write("xmlns:o=""urn:schemas-microsoft-com:office:office"" ")
    Do stream.Write("xmlns:x=""urn:schemas-microsoft-com:office:excel"" ")
    Do stream.Write("xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet"" ")
    Do stream.Write("xmlns:html=""http://www.w3.org/TR/REC-html40"">")

    // Loop through each requested section and append a worksheet to the stream
    For i=1:1:$Length(sectionsString,",") {
        Set reportType = $Piece(sectionsString,",",i)

        // Generate the XML for the current worksheet
        Set sheetXML = ..GenerateWorksheetXML(reportType, profileID, deIdentify)
        If sheetXML'="" {
            // Write the worksheet content to the main stream
            While 'sheetXML.AtEnd {
                Set sheetChunk = sheetXML.Read(8192)
                Do stream.Write(sheetChunk)
            }
        }
    }

    // Close the workbook tag
    Do stream.Write("</Workbook>")

    // Prepare HTTP response headers
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "application/vnd.ms-excel;charset=utf-8"

    // Rewind stream and write entire Excel document to the response
    Do stream.Rewind()
    While 'stream.AtEnd {
        Set chunk = stream.Read(8192)
        Write chunk
    }

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="GenerateWorksheetXML">
<Description>
Used to generate excel sheet</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>reportType:%String,profileID:%String,deIdentify:%Boolean</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<Implementation><![CDATA[
    // Initialize default variables
    Set fields = ""
    Set tableName = ""
    
    // List of fields considered PHI (to redact if deIdentify = true)
    Set phiFields = "PatientMRN,FirstName,LastName,DOB,Address,City,State,ZipCode,PhoneNumber,Email,PolicyNumber,MemberID,RelativePerson,PatientID,SerialNumber"

    // Determine which fields, table, and XSLT block to use based on reportType
    // Each block maps the reportType to table structure and XSLT name
    If reportType = "encounters" {
    	Set fields = "EncounterNumber,ReasonForVisit,VisitDescription,DischargeDisposition,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StatusCode,StartDateTime,EndDateTime,FacilityName,FacilityIDAAName,FacilityIDExtension,FacilityIDRoot,PerformerID,PerformerAddress,PerformerTelecom,PerformerName,AuthorTime,LocationID,LocationAddress,LocationTelecom,LocationName"
    	Set tableName = "LEADNorth_CDAProfiler_Sections.CCDEncounter"
    	Set xsltBlock = "EncounterXSLT"
	} ElseIf reportType = "vitalSigns" {
	    Set fields = "Value,Unit,Description,xDate,AuthorTime,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,ObservationIDRoot,ObservationIDExtension,OrganizerCode,OrganizerCodeSystem,OrganizerEffectiveTimeLow,OrganizerEffectiveTimeHigh,OrganizerClassCode,OrganizerDisplayName,OrganizerStatusCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDVitalSign"
	    Set xsltBlock = "VitalSignsXSLT"
	} ElseIf reportType = "allergy" {
	    Set fields = "AllergyCode,AllergyCodeSystem,AllergyCodeSystemName,AllergyDisplayName,CategoryCode,CategoryCodeSystem,CategoryCodeSystemName,CategoryDisplayName,ReactionCode,ReactionCodeSystem,ReactionCodeSystemName,ReactionDisplayName,SeverityCode,SeverityCodeSystem,SeverityCodeName,SeverityDisplayName,StatusCode,StatusCodeSystem,StatusCodeSystemName,StatusDisplayName,EffectiveTimeLow,EffectiveTimeHigh,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,RepresentedOrganization,ReferenceAllergyId,ReferenceReactionId,ReferenceSeverityId,ReferenceStatusId"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDAllergy"
	    Set xsltBlock = "AllergyXSLT"
	} ElseIf reportType = "procedures" {
	    Set fields = "ProcedureCode,CodeSystem,CodeSystemName,CodeDisplayName,AuthorTime,Status,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerName,PerformerOrganization,PerformerAddress,ProcedureClassCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDProcedure"
	    Set xsltBlock = "ProceduresXSLT"
	} ElseIf reportType = "socialHistory" {
	    Set fields = "SocialHistoryID,ConceptDescription,ObservationCode,ObservationCodeSystem,ObservationCodeSystemName,ObservationDisplayName,ValueCode,ValueCodeSystem,ValueCodeSystemName,ValueDisplayName,Units,AuthorTime,StatusCode,EffectiveTimeLow,EffectiveTimeHigh"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDSocialHistory"
	    Set xsltBlock = "SocialHistoryXSLT"
	} ElseIf reportType = "results" {
	    Set fields = "TestValue,Units,ReferenceRange,StatusCode,ObservationCode,ObservationCodeDisplayName,ObservationCodeSystem,ObservationCodeSystemName,AuthorTime,OrganizerID,OrganizerName,EffectiveTimeLow,EffectiveTimeHigh"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDResult"
	    Set xsltBlock = "ResultsXSLT"
	} ElseIf reportType = "problems" {
	    Set fields = "ValueCode,ValueDisplayName,CodeSystem,CodeSystemName,AuthorTime,Author,ProblemTypeCode,ProblemTypeName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,ProblemClassCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDProblem"
	    Set xsltBlock = "ProblemsXSLT"
	} ElseIf reportType = "planOfCare" {
	    Set fields = "EncounterID,EncounterExtension,DisplayName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerOrganization,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,AuthorTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPlanOfCare"
	    Set xsltBlock = "PlanOfCareXSLT"
	} ElseIf reportType = "payer" {
	    Set fields = "PayerName,PolicyNumber,MemberID,CoveredParty,PayerCode,PayerCodeSystem,PayerCodeSystemName,PayerStatusCode,EffectiveTimeLow,EffectiveTimeHigh,AuthorTime,PerformerIDs,PerformerAddress,PerformerTelecom,PerformerName,LocationAddress,LocationTelecom,LocationName,ParticipantRoleID,ParticipantRoleCode,ParticipantRoleCodeSystem,ParticipantRoleCodeSystemName"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPayer"
	    Set xsltBlock = "PayerXSLT"
	} ElseIf reportType = "patient" {
	    Set fields = "PatientMRN,FirstName,LastName,DOB,GenderCode,GenderDisplay,GenderSystem,Address,City,State,ZipCode,Country,PhoneNumber,Email,LanguageCode,MaritalStatusCode,MaritalStatusDisplay,MaritalStatusSystem,RaceCode,RaceDisplay,RaceSystem,EthnicityCode,EthnicityDisplay,EthnicitySystem"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPatient"
	    Set xsltBlock = "PatientXSLT"
	} ElseIf reportType = "medications" {
	    Set fields = "DrugName,GenericName,Dose,DoseUnits,Frequency,Route,Site,StartDate,EndDate,Provider,NDC,RxNormCode,GPI,Status"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDMedication"
	    Set xsltBlock = "MedicationsXSLT"
	} ElseIf reportType = "immunizations" {
	    Set fields = "ImmunizationID,Route,Dose,DoseUnit,Vaccine,VaccineCode,VaccineCodeSystem,VaccineCodeSystemName,LotNumber,StartDate,EndDate,PerformerID,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,StatusCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDImmunization"
	    Set xsltBlock = "ImmunizationsXSLT"
	} ElseIf reportType = "functionalStatus" {
	    Set fields = "Status,xDate,Description,StatusCode,ObservationCode,ObservationSystem,EffectiveTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus"
	    Set xsltBlock = "FunctionalStatusXSLT"
	} ElseIf reportType = "familyHistory" {
	    Set fields = "RelativePerson,RelativeCode,RelativeCodeSystem,OnsetAge,StatusCode,ObservationCode,ObservationDisplayName,ObservationSystem,ObservationID,ObservationIDOid"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDFamilyHistory"
	    Set xsltBlock = "FamilyHistoryXSLT"
	} ElseIf reportType = "advanceDirective" {
	    Set fields = "DirectiveType,DateSigned,StatusCode,DirectiveID"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective"
	    Set xsltBlock = "AdvanceDirectiveXSLT"
	} ElseIf reportType = "goals" {
	    Set fields = "GoalID,GoalDescription,GoalCode,GoalCodeSystem,GoalCodeSystemName,GoalStatus,StartDate,EndDate,AuthorTime,AuthorName"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDGoals"
	    Set xsltBlock = "GoalsXSLT"
	} ElseIf reportType = "implants" {
	    Set fields = "ImplantID,DeviceName,DeviceCode,DeviceCodeSystem,DeviceCodeSystemName,ManufacturerModelName,SerialNumber,ImplantStatus,ImplantDate,RemovalDate,AuthorTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDImplants"
	    Set xsltBlock = "ImplantsXSLT"
	} ElseIf reportType = "encompassingEncounter" {
	    Set fields = "EncounterID,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StartDateTime,EndDateTime,DischargeDisposition,LocationID,LocationName,LocationAddress,LocationTelecom"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter"
	    Set xsltBlock = "EncompassingEncounterXSLT"
	} ElseIf reportType = "diagnosis" {
	    Set fields = "DiagnosisID,DiagnosisTypeCode,DiagnosisTypeCodeSystem,DiagnosisTypeCodeSystemName,DiagnosisTypeDisplayName,DiagnosisEffectiveTimeLow,DiagnosisEffectiveTimeHigh,DiagnosisCode,DiagnosisCodeSystem,DiagnosisCodeSystemName,DiagnosisCodeDisplayName,DiagnosisStatusCode,DiagnosisEncounterNumber"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDDiagnosis"
	    Set xsltBlock = "DiagnosisXSLT"
	} ElseIf reportType = "metadata" {
	    Set fields = "AllSections,SectionsWithEncounterNumbers"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDDocument"
	    Set xsltBlock = "MetadataXSLT"
	}
	 Else {
        Return "" 
    }
     // Start building the Excel worksheet XML
    Set xml = ##class(%Stream.GlobalCharacter).%New()
    Do xml.Write("<Worksheet ss:Name="""_reportType_""">")
    Do xml.Write("<Table>")

    // Write the header row
    Do xml.Write("<Row>")
    Do xml.Write("<Cell><Data ss:Type=""String"">Field</Data></Cell>")
    Do xml.Write("<Cell><Data ss:Type=""String"">Value</Data></Cell>")
    Do xml.Write("<Cell><Data ss:Type=""String"">Occurrences</Data></Cell>")
    Do xml.Write("<Cell><Data ss:Type=""String"">XPath</Data></Cell>")
    Do xml.Write("</Row>")

    // Loop through each field in the section
    For j=1:1:$L(fields,",") {
        Set field = $ZStrip($P(fields,",",j),"*W")

        // Query: Count distinct values for this field across documents
        Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences FROM "_tableName_" WHERE ProfileID = ? GROUP BY "_field
        Set statement = ##class(%SQL.Statement).%New()
        Set status = statement.%Prepare(queryString)
        If $$$ISERR(status) Continue
        Set resultSet = statement.%Execute(profileID)
        If $$$ISERR(resultSet) Continue

        // Iterate over results (each distinct value of the field)
        While resultSet.%Next() {
            Set value = resultSet.%Get("Value")
            Set occurrences = resultSet.%Get("Occurrences")

            // Lookup XPath mapping for the current field from XSLT mapping utility
            Set xPath = $classmethod("LEADNorth.CDAProfiler.Utils.Mappings", "GetXPathForProperty", field, xsltBlock)

            // Mask value if it is PHI and de-identification is enabled
            If (deIdentify) && (phiFields [ field) {
                Set value = "CONFIDENTIAL"
            }

            // Special case for "AllSections" field: call GetUniqueSections()
            If field '="AllSections" {
                // Output regular row
                Do xml.Write("<Row>")
                Do xml.Write("<Cell><Data ss:Type=""String"">"_..EncodeXML(field)_"</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""String"">"_..EncodeXML(value)_"</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""Number"">"_occurrences_"</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""String"">"_..EncodeXML(xPath)_"</Data></Cell>")
                Do xml.Write("</Row>")
            } Else {
                // Output "AllSections" as a single-row override with GetUniqueSections result
                Do xml.Write("<Row>")
                Do xml.Write("<Cell><Data ss:Type=""String"">"_..EncodeXML(field)_"</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""String"">"_..EncodeXML(##class(LEADNorth.CDAProfiler.Sections.CCDDocument).GetUniqueSections(profileID))_"</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""Number"">N/A</Data></Cell>")
                Do xml.Write("<Cell><Data ss:Type=""String"">N/A</Data></Cell>")
                Do xml.Write("</Row>")
                Quit  // Exit early after writing "AllSections" (avoid duplicates)
            }
        }
    }

    // Close the worksheet table
    Do xml.Write("</Table></Worksheet>")

    Quit xml
]]></Implementation>
</Method>

<Method name="EncodeXML">
<Description>
Helper method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set value = $Replace(value, "&", "&amp;")
    Set value = $Replace(value, "<", "&lt;")
    Set value = $Replace(value, ">", "&gt;")
    Set value = $Replace(value, """", "&quot;")
    Set value = $Replace(value, "'", "&apos;")
    Quit value
]]></Implementation>
</Method>

<Method name="GetDistinctReportProfileIDs">
<Description><![CDATA[
Retrieves all distinct ProfileIDs from CCDDocument and returns them as HTML <option> elements.
Used to populate dropdowns on the reports page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Prepare SQL query to retrieve distinct ProfileIDs
    Set query = "SELECT DISTINCT ProfileID FROM LEADNorth_CDAProfiler_Sections.CCDDocument"
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)

    // If query preparation fails, return an error option in the HTML
    If $$$ISERR(status) {
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
        Set %response.ContentType = "text/html"
        Write "<option value=''>Error retrieving profiles</option>"
        Quit $$$OK
    }

    // Execute the query
    Set resultSet = statement.%Execute()
    Set html = ""

    // Build the list of HTML <option> elements for each profile
    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set html = html _ "<option value="""_profileID_""">" _ profileID _ "</option>"
    }

    // Return the HTML content in the response
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "text/html"
    Write html

    Quit $$$OK
]]></Implementation>
</Method>

<Method name="FetchAndRender">
<Description>
Gets all data for a profiling report and renders it</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Parse incoming request
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    Set reportType = requestObj.%Get("reportType")
    Set profileID = requestObj.%Get("profileID")

    // Initialize HTML response body
    Set html = ""

    // Determine which fields to include based on reportType
    If reportType = "encounters" {
        Set fields = "EncounterNumber,ReasonForVisit,VisitDescription,DischargeDisposition,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StatusCode,StartDateTime,EndDateTime,FacilityName,FacilityIDAAName,FacilityIDExtension,FacilityIDRoot,PerformerID,PerformerAddress,PerformerTelecom,PerformerName,AuthorTime,LocationID,LocationAddress,LocationTelecom,LocationName"
    } ElseIf reportType = "vitalSigns" {
        Set fields = "Value,Unit,Description,xDate,AuthorTime,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,ObservationIDRoot,ObservationIDExtension,OrganizerCode,OrganizerCodeSystem,OrganizerEffectiveTimeLow,OrganizerEffectiveTimeHigh,OrganizerClassCode,OrganizerDisplayName,OrganizerStatusCode"
    } ElseIf reportType = "allergy" {
        Set fields = "AllergyCode,AllergyCodeSystem,AllergyCodeSystemName,AllergyDisplayName,CategoryCode,CategoryCodeSystem,CategoryCodeSystemName,CategoryDisplayName,ReactionCode,ReactionCodeSystem,ReactionCodeSystemName,ReactionDisplayName,SeverityCode,SeverityCodeSystem,SeverityCodeName,SeverityDisplayName,StatusCode,StatusCodeSystem,StatusCodeSystemName,StatusDisplayName,EffectiveTimeLow,EffectiveTimeHigh,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,RepresentedOrganization,ReferenceAllergyId,ReferenceReactionId,ReferenceSeverityId,ReferenceStatusId"
    } ElseIf reportType = "procedures" {
        Set fields = "ProcedureCode,CodeSystem,CodeSystemName,CodeDisplayName,AuthorTime,Status,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerName,PerformerOrganization,PerformerAddress,ProcedureClassCode"
    } ElseIf reportType = "socialHistory" {
        Set fields = "SocialHistoryID,ConceptDescription,ObservationCode,ObservationCodeSystem,ObservationCodeSystemName,ObservationDisplayName,ValueCode,ValueCodeSystem,ValueCodeSystemName,ValueDisplayName,Units,AuthorTime,StatusCode,EffectiveTimeLow,EffectiveTimeHigh"
    } ElseIf reportType = "results" {
        Set fields = "TestValue,Units,ReferenceRange,StatusCode,ObservationCode,ObservationCodeDisplayName,ObservationCodeSystem,ObservationCodeSystemName,AuthorTime,OrganizerID,OrganizerName,EffectiveTimeLow,EffectiveTimeHigh"
    } ElseIf reportType = "problems" {
        Set fields = "ValueCode,ValueDisplayName,CodeSystem,CodeSystemName,AuthorTime,Author,ProblemTypeCode,ProblemTypeName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,ProblemClassCode"
    } ElseIf reportType = "planOfCare" {
        Set fields = "EncounterID,EncounterExtension,DisplayName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerOrganization,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,AuthorTime"
    } ElseIf reportType = "payer" {
        Set fields = "PayerName,PolicyNumber,MemberID,CoveredParty,PayerCode,PayerCodeSystem,PayerCodeSystemName,PayerStatusCode,EffectiveTimeLow,EffectiveTimeHigh,AuthorTime,PerformerIDs,PerformerAddress,PerformerTelecom,PerformerName,LocationAddress,LocationTelecom,LocationName,ParticipantRoleID,ParticipantRoleCode,ParticipantRoleCodeSystem,ParticipantRoleCodeSystemName"
    } ElseIf reportType = "patient" {
        Set fields = "PatientMRN,FirstName,LastName,DOB,GenderCode,GenderDisplay,GenderSystem,Address,City,State,ZipCode,Country,PhoneNumber,Email,LanguageCode,MaritalStatusCode,MaritalStatusDisplay,MaritalStatusSystem,RaceCode,RaceDisplay,RaceSystem,EthnicityCode,EthnicityDisplay,EthnicitySystem"
    } ElseIf reportType = "medications" {
        Set fields = "DrugName,GenericName,Dose,DoseUnits,Frequency,Route,Site,StartDate,EndDate,Provider,NDC,RxNormCode,GPI,Status"
    } ElseIf reportType = "immunizations" {
        Set fields = "ImmunizationID,Route,Dose,DoseUnit,Vaccine,VaccineCode,VaccineCodeSystem,VaccineCodeSystemName,LotNumber,StartDate,EndDate,PerformerID,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,StatusCode"
    } ElseIf reportType = "functionalStatus" {
        Set fields = "Status,xDate,Description,StatusCode,ObservationCode,ObservationSystem,EffectiveTime"
    } ElseIf reportType = "familyHistory" {
        Set fields = "RelativePerson,RelativeCode,RelativeCodeSystem,OnsetAge,StatusCode,ObservationCode,ObservationDisplayName,ObservationSystem,ObservationID,ObservationIDOid"
    } ElseIf reportType = "documents" {
        Set fields = "DocumentID,PatientID,DocumentDate,CreatedAt"
    } ElseIf reportType = "advanceDirective" {
        Set fields = "DirectiveType,DateSigned,StatusCode,DirectiveID"
    } ElseIf reportType = "goals" {
        Set fields = "GoalID,GoalDescription,GoalCode,GoalCodeSystem,GoalCodeSystemName,GoalStatus,StartDate,EndDate,AuthorTime,AuthorName"
    } ElseIf reportType = "implants" {
        Set fields = "ImplantID,DeviceName,DeviceCode,DeviceCodeSystem,DeviceCodeSystemName,ManufacturerModelName,SerialNumber,ImplantStatus,ImplantDate,RemovalDate,AuthorTime"
    } ElseIf reportType = "encompassingEncounter" {
        Set fields = "EncounterID,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StartDateTime,EndDateTime,DischargeDisposition,LocationID,LocationName,LocationAddress,LocationTelecom"
    } ElseIf reportType = "diagnosis" {
        Set fields = "DiagnosisID,DiagnosisTypeCode,DiagnosisTypeCodeSystem,DiagnosisTypeCodeSystemName,DiagnosisTypeDisplayName,DiagnosisEffectiveTimeLow,DiagnosisEffectiveTimeHigh,DiagnosisCode,DiagnosisCodeSystem,DiagnosisCodeSystemName,DiagnosisCodeDisplayName,DiagnosisStatusCode,DiagnosisEncounterNumber"
    } ElseIf reportType = "allSections" {
        Set fields = "AllSections,SectionsWithEncounterNumbers"
    }

    Set html = ""
	
	// Loop through fields and generate collapsible sections
    For i=1:1:$Length(fields, ",") {
        Set field = $ZStrip($Piece(fields, ",", i), "*W") 
		if field '= "AllSections" {
			Set html = html _ "<button class='collapsible'' style='font-family: poppins-extralight, poppins, sans-serif;'>" _ field _ "</button>"
		} else {
			Set html = html _ "<button class='collapsible'' style='font-family: poppins-extralight, poppins, sans-serif;'>" _ "All Unique Sections" _ "</button>"
		}
        Set html = html _ "<div class='content-section-data'>"
        //Set html = html _ "<table class='report-table'><tr><th>Value</th><th>Occurrences</th><th>XPath</th><th>SDA Mapping</th></tr>"
        Set html = html _ "<table class='report-table'><tr><th>Value</th><th>Occurrences</th><th>XPath</th></tr>"

        If reportType = "encounters" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDEncounter WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "vitalSigns" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "allergy" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDAllergy WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "procedures" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDProcedure WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "socialHistory" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "results" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDResult WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "problems" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDProblem WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "planOfCare" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "payer" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPayer WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "patient" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPatient WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "medications" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDMedication WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "immunizations" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDImmunization WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "functionalStatus" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "familyHistory" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "documents" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "advanceDirective" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "goals" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDGoals WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        }  ElseIf reportType = "encompassingEncounter" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "implants" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDImplants WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "diagnosis" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "allSections" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } 

        Set statement = ##class(%SQL.Statement).%New()
        Set status = statement.%Prepare(queryString)
        If $$$ISERR(status) {
	        write queryString
            Quit
        }

        Set resultSet = statement.%Execute(profileID)
        If $$$ISERR(resultSet) {
            Quit
        }
        	// Iterate through results
	        While resultSet.%Next() {
		        if field = "AllSections" {
			        Set value = ##class(LEADNorth.CDAProfiler.Sections.CCDDocument).GetUniqueSections(profileID)
					Set html = html _ "<tr><td>" _ value _ "</td><td>" _ "1" _ "</td><td>" _"N/A"_ "</td></tr>"
					Quit
		        } elseif field '= "AllSections" {
		            Set value = ..EncodeHTML(resultSet.%Get("Value"))
		            Set occurrences = ..EncodeHTML(resultSet.%Get("Occurrences"))
		            Set xPath = ""
		        
	            If reportType = "encounters" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "EncounterXSLT")
	            } ElseIf reportType = "vitalSigns" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "VitalSignsXSLT")
	            } ElseIf reportType = "procedures" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ProceduresXSLT")
	            } ElseIf reportType = "socialHistory" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "SocialHistoryXSLT")
	            } ElseIf reportType = "results" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ResultsXSLT")
	            } ElseIf reportType = "problems" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ProblemsXSLT")
	            } ElseIf reportType = "planOfCare" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PlanOfCareXSLT")
	            } ElseIf reportType = "payer" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PayerXSLT")
	            } ElseIf reportType = "patient" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PatientXSLT")
	            } ElseIf reportType = "medications" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "MedicationsXSLT")
	            } ElseIf reportType = "immunizations" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ImmunizationsXSLT")
	            } ElseIf reportType = "functionalStatus" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "FunctionalStatusXSLT")
	            } ElseIf reportType = "familyHistory" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "FamilyHistoryXSLT")
	            } ElseIf reportType = "documents" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "MetadataXSLT")
	            } ElseIf reportType = "advanceDirective" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "AdvanceDirectiveXSLT")
	            } ElseIf reportType = "allergy" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "AllergyXSLT")
	            } ElseIf reportType = "diagnosis" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "DiagnosisXSLT")
	            } ElseIf reportType = "encompassingEncounter" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "EncompassingEncounterXSLT")
	            } ElseIf reportType = "goals" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "GoalsXSLT")
	            } ElseIf reportType = "implants" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ImplantsXSLT")
	            } ElseIf reportType = "allSections" {
	                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "MetadataXSLT")
	            } 
		   		//Set html = html _ "<tr><td>" _ value _ "</td><td>" _ occurrences _ "</td><td>" _ xPath _ "</td><td>" _ "<SDAPATH>" _ "</td></tr>"
		   		if field '= "SectionsWithEncounterNumbers" {
		   			Set html = html _ "<tr><td>" _ value _ "</td><td>" _ occurrences _ "</td><td>" _ xPath _ "</td></tr>"
		        } else {
			        Set html = html _ "<tr><td>" _ value _ "</td><td>" _ occurrences _ "</td><td>" _ "N/A" _ "</td></tr>"
		        }
		        }
	        }
	        Set html = html _ "</table></div>"
        
    }
    Set %response.Status = ..#HTTP200OK
    Set %response.ContentType = "text/html"
    Write html
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="EncodeHTML">
<Description>
Helper method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set value = $Replace(value, "&", "&amp;")
    Set value = $Replace(value, "<", "&lt;")
    Set value = $Replace(value, ">", "&gt;")
    Set value = $Replace(value, """", "&quot;")
    Set value = $Replace(value, "'", "&#39;")
    Quit value
]]></Implementation>
</Method>

<Method name="ProcessCCDDirectory">
<Description>
Processes all .xml CCD files in a given directory using the CCDProcessor class.
- directory: path containing the CCD XML files
- profileID: the profile ID to assign to all processed documents
- sections: a comma-separated list of sections to extract
Returns a %Status indicating success or failure.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>directory:%String,profileID:%String,sections:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Check if the directory exists
    If ##class(%File).DirectoryExists(directory) = 0 {
        Return $$$ERROR($$$GeneralError, "Directory does not exist: "_directory)
    }

    // First pass: count how many XML files are in the directory
    Set resultSet = ##class(%ResultSet).%New("%File:FileSet")
    Set sc = resultSet.Execute(directory, "*.xml")
    If $$$ISERR(sc) {
        Write "ERROR: Failed to retrieve file list from directory: ", directory, !
        Quit sc
    }

    Set fileCount = 0
    While resultSet.%Next() {
        Set fileCount = fileCount + 1
    }

    // Exit if there are no XML files to process
    If fileCount = 0 {
        Return $$$ERROR($$$GeneralError, "No XML files found in directory: "_directory)
    }

    // Second pass: process each XML file individually
    Set resultSet = ##class(%ResultSet).%New("%File:FileSet")
    Set sc = resultSet.Execute(directory, "*.xml")
    If $$$ISERR(sc) {
        Write "ERROR: Failed to reopen file list: ", directory, !
        Quit sc
    }

    Set currentIndex = 0

    While resultSet.%Next() {
        Set currentIndex = currentIndex + 1
        Set fileName = resultSet.Data("Name")
        Set fullPath = ##class(%File).NormalizeFilename(fileName, directory)

        // Skip missing files (edge case)
        If ##class(%File).Exists(fullPath) = 0 {
            Write "ERROR: File not found: ", fullPath, !
            Continue
        }

        Try {
            // Profile the CCD using the designated processor
            Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessCCD(fullPath, profileID, sections)

            If $$$ISOK(sc) {
                Write "PROGRESS:", currentIndex, "/", fileCount, !
            } Else {
                Write "ERROR processing file: ", fullPath, !
                Do $System.Status.DisplayError(sc)
            }
        } Catch ex {
            // Catch and report any exception raised during processing
            Write "EXCEPTION processing file: ", fullPath, !
            Do $System.Status.DisplayError(ex.AsStatus())
        }
    }

    Write "Successfully profiled directory", !

    Quit sc
]]></Implementation>
</Method>

<Method name="ProcessImport">
<Description>
Handles importing CCD documents via various methods:
- "bulk": from a directory
- "api": from a list of uploaded files
- "database": from internal storage (most recent N docs)
Expects a JSON body with keys: importType, profileID, selectedSections, etc.
Returns an HTTP status and message in the response.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Read and parse the incoming JSON request body
    Set requestBody = %request.Content.Read()
    Set requestObj = {}.%FromJSON(requestBody)

    // Extract parameters with defaults
    Set importType = requestObj.%Get("importType", "")
    Set profileID = requestObj.%Get("profileID", "")
    Set numDocuments = requestObj.%Get("numDocuments", 0)
    Set filterDocuments = requestObj.%Get("filterDocuments", "")
    Set importData = requestObj.%Get("directoryPath", "")
    Set sections = requestObj.%Get("selectedSections")

    // Response wrapper object to hold messages
    Set responseObj = {}

    Try {
        // Case: bulk directory import
        If importType = "bulk" {
            Set directoryPath = importData
            Set sc = ..ProcessCCDDirectory(directoryPath, profileID, sections)
            If $$$ISERR(sc) {
                Set responseObj.message = "Bulk import failed."
                Set %response.Status = ..#HTTP500INTERNALSERVERERROR
            } Else {
                Set responseObj.message = "Bulk import completed successfully."
                Set %response.Status = ..#HTTP200OK
            }

        // Case: API upload (direct file list)
        } ElseIf importType = "api" {
            Set filesArray = requestObj.%Get("files")
            If '$IsObject(filesArray) {
                Set responseObj.message = "Invalid file input."
                Set %response.Status = ..#HTTP400BADREQUEST
            } Else {
                Set i = ""
                While filesArray.GetNext(i) {
                    Set fileName = filesArray.GetAt(i)
                    Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessCCD(fileName, profileID, sections)
                    If $$$ISERR(sc) {
                        Set responseObj.message = "API import failed."
                        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
                        Quit
                    }
                }
                // If no error message set, assume success
                If '$Data(responseObj.message) {
                    Set responseObj.message = "API import completed successfully."
                    Set %response.Status = ..#HTTP200OK
                }
            }

        // Case: pull CCDs from database (internal storage)
        } ElseIf importType = "database" {
            If numDocuments <= 0 {
                Set responseObj.message = "Invalid number of documents specified."
                Set %response.Status = ..#HTTP400BADREQUEST
            } Else {
                Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessLatestCCDs(numDocuments, profileID, filterDocuments, sections)
                If $$$ISERR(sc) {
                    Set responseObj.message = "Database import failed."
                    Set %response.Status = ..#HTTP500INTERNALSERVERERROR
                } Else {
                    Set responseObj.message = "Database import completed successfully."
                    Set %response.Status = ..#HTTP200OK
                }
            }

        // Catch unknown import type
        } Else {
            Set responseObj.message = "Invalid import type."
            Set %response.Status = ..#HTTP400BADREQUEST
        }

    // Catch all exceptions and return error
    } Catch ex {
        Set responseObj.message = "An error occurred during import: "_ex.DisplayString()
        Set %response.Status = ..#HTTP500INTERNALSERVERERROR
    }

    // Note: You may want to return a JSON response here instead of relying only on status
    Quit sc
]]></Implementation>
</Method>

<Method name="GetDistinctProfileIDs">
<Description>
Retrieves the most recent CreatedAt timestamp for each ProfileID,
and generates an HTML list of links to view corresponding reports.
Used to populate the home page with available profiling reports.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    // SQL query to get latest CreatedAt date for each ProfileID
    Set query = "SELECT ProfileID, MAX(CreatedAt) AS CreatedAt FROM LEADNorth_CDAProfiler_Sections.CCDDocument GROUP BY ProfileID"

    // Prepare the SQL statement
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)

    // Exit with error message if preparation fails
    If $$$ISERR(status) {
        Return "Error preparing statement: "_$System.Status.GetErrorText(status)
    }

    // Execute the statement and build the HTML output
    Set resultSet = statement.%Execute()
    Set html = ""

    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set reportDate = resultSet.%Get("CreatedAt")

        // Append an HTML <li> link to the profile report
        Set html = html _ "<li><a href='index.html#/reports?profileID="_profileID_"'>Report for Profile "_profileID_" - Generated on "_reportDate_"</a></li>"
    }

    // Output the generated HTML
    Write html
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="Hello">
<Description>
Method to help troubleshoot connectivity if necessary</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Write "Hello from IRIS!"
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="LEADNorth.UI.DataImporter">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>67290,36993.8522609</TimeChanged>
<TimeCreated>67080,55153.215106</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Data Importer</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
  body {
    font-family: var(--font_8);
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }
  .navbar {
    background-color: #2c3e50;
    color: white;
    padding: 15px;
    font-size: 18px;
    font-family: var(--font_8);
  }
  .navbar a {
    color: white;
    text-decoration: none;
    padding: 0 15px;
    font-family: var(--font_8);
  }
  .navbar a:hover {
    background-color: #34495e;
    border-radius: 4px;
  }
  .container {
    padding: 20px;
    font-family: var(--font_8);
  }
  .form-group {
    margin-bottom: 15px;
    font-family: var(--font_8);
  }
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    font-family: var(--font_8);
  }
  .form-group input[type="file"],
  .form-group input[type="text"],
  .form-group select,
  .form-group button {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    margin-top: 5px;
    font-family: var(--font_8);
  }
  .footer {
    background-color: #2c3e50;
    color: white;
    text-align: center;
    padding: 15px;
    position: fixed;
    bottom: 0;
    width: 100%;
    font-family: var(--font_8);
  }
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Import Data">
  <html>

    <div class="navbar">
      <a href="LEADNorth.UI.Index.cls">Dashboard</a>
      <a href="LEADNorth.UI.DataImporter.cls">Import Data</a>
      <a href="LEADNorth.UI.Reports.cls">Reports</a>
      <a href="LEADNorth.UI.Settings.cls">Settings</a>
      <a href="LEADNorth.UI.Help.cls">Help</a>
    </div>

    <div class="container">
      <h1>Import Data</h1>
      <p>Select the data source you wish to import from.</p>

      <div class="form-group">
        <label for="importType">Select Import Type:</label>
        <select id="importType" onchange="zenPage.updateImportType()">
          <option value="bulk">Bulk Import</option>
          <option value="api">API Import</option>
          <option value="database">Database Import</option>
        </select>
      </div>

      <div class="form-group" id="bulkImportInputs">
        <label for="directoryPath">Enter Directory Path:</label>
        <input type="text" id="directoryPath" placeholder="Enter directory path for bulk import"/>
      </div>

      <div class="form-group" id="apiImportInputs" style="display:none;">
        <label for="fileUpload">Select Files to Upload:</label>
        <input type="file" id="fileUpload"/>
      </div>

      <div class="form-group" id="databaseImportInputs" style="display:none;">
        <label for="numDocuments">Number of Documents to Import:</label>
        <input type="number" id="numDocuments" placeholder="Enter number of documents to import" min="1"/>
        <label for="filterDocuments">Filter ID on:</label>
        <input id="filterDocuments" placeholder=""/>
      </div>

      <div class="form-group" id="profileIDInput">
        <label for="profileID">Enter Profile Name:</label>
        <input type="text" id="profileID" placeholder="Enter profile name"/>
      </div>

      <div class="form-group">
        <button type="button" onclick="zenPage.startImport()">Start Import</button>
      </div>

      <div id="importResult"></div>
    </div>

    <div class="footer">
      <p>2024 by LEAD North LLC</p>
    </div>

  </html>
</page>
]]></Data>
</XData>

<Method name="updateImportType">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var importType = document.getElementById("importType").value;

    document.getElementById("bulkImportInputs").style.display = "none";
    document.getElementById("apiImportInputs").style.display = "none";
    document.getElementById("databaseImportInputs").style.display = "none";

    if (importType === "bulk") {
        document.getElementById("bulkImportInputs").style.display = "block";
    } else if (importType === "api") {
        document.getElementById("apiImportInputs").style.display = "block";
    } else if (importType === "database") {
        document.getElementById("databaseImportInputs").style.display = "block";
    }
]]></Implementation>
</Method>

<Method name="startImport">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var importType = document.getElementById("importType").value;
    var profileID = document.getElementById("profileID").value;

    var profileIDPattern = /^[a-zA-Z0-9]+$/;

    if (!profileID) {
        alert("You must enter a profile name.");
        return;
    }

    if (!profileIDPattern.test(profileID)) {
        alert("Profile name can only contain letters and numbers.");
        return;
    }

    if (importType === "bulk") {
        var directoryPath = document.getElementById("directoryPath").value;

        if (!directoryPath) {
            alert("You must enter a directory path for bulk import.");
            return;
        }

        directoryPath = directoryPath.replace(/"/g, ''); // sanitize

        console.log("Starting bulk import for directory: " + directoryPath + " and profile: " + profileID);

        zenPage.processImport(directoryPath, profileID, importType, "", function(response) {
            console.log("Bulk import response: ", response);
            try {
                var responseObj = JSON.parse(response);
                if (responseObj.message) {
                    document.getElementById("importResult").innerHTML = "<p>" + responseObj.message + "</p>";
                } else {
                    document.getElementById("importResult").innerHTML = "<p>Import completed successfully.</p>";
                }
            } catch (ex) {
                alert("Error parsing the response: " + ex.message);
                console.error(ex);
            }
        });
    } else if (importType === "api") {
        var fileInput = document.getElementById("fileUpload");

        if (fileInput.files.length === 0) {
            alert("Please select one or more files to upload.");
            return;
        }

        var files = [];
        for (var i = 0; i < fileInput.files.length; i++) {
            files.push(fileInput.files[i].name);
        }
        var filesStr = files.join(',');

        console.log("Starting API import for files: " + filesStr + " and profile: " + profileID);

        zenPage.processImport(filesStr, profileID, importType, "", function(response) {
            console.log("API import response: ", response);
            try {
                var responseObj = JSON.parse(response);
                if (responseObj.message) {
                    document.getElementById("importResult").innerHTML = "<p>" + responseObj.message + "</p>";
                } else {
                    document.getElementById("importResult").innerHTML = "<p>API import completed successfully.</p>";
                }
            } catch (ex) {
                alert("Error parsing the response: " + ex.message);
                console.error(ex);
            }
        });
    } else if (importType === "database") {
        var numDocuments = document.getElementById("numDocuments").value;
        var filterDocuments = document.getElementById("filterDocuments").value;

        if (!numDocuments || numDocuments <= 0) {
            alert("You must enter a valid number of documents to import.");
            return;
        }

        console.log("Starting database import for " + numDocuments + " documents and profile: " + profileID);

        zenPage.processImport("", profileID, importType, numDocuments, filterDocuments, function(response) {
            console.log("Database import response: ", response);
            try {
                var responseObj = JSON.parse(response);
                if (responseObj.message) {
                    document.getElementById("importResult").innerHTML = "<p>" + responseObj.message + "</p>";
                } else {
                    document.getElementById("importResult").innerHTML = "<p>Database import completed successfully.</p>";
                }
            } catch (ex) {
                alert("Error parsing the response: " + ex.message);
                console.error(ex);
            }
        });
    }
]]></Implementation>
</Method>

<Method name="sendImportRequest">
<FormalSpec>formData,importType</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    zenPage.processImport(formData, importType)("processImport", {
        formData: formData,
        importType: importType
    }, function(response) {
        if (response.status === "success") {
            alert("Import completed successfully.");
        } else {
            alert("Import failed: " + response.error);
        }
    });
]]></Implementation>
</Method>

<Method name="processImport">
<ClassMethod>1</ClassMethod>
<FormalSpec>importData:%String,profileID:%String,importType:%String,numDocuments:%Integer=0,filterDocuments:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Try {
        If importType = "bulk" {
            Set directoryPath = importData

            Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessCCDDirectory(directoryPath, profileID)
            If $$$ISERR(sc) {
                Return {"message":"Bulk import failed.error"}
            }

            Return {"message":"Bulk import completed successfully."}.%ToJSON()
        }
        ElseIf importType = "api" {
            Set files = $ListFromString(importData, ",")

            For i=1:1:$ListLength(files) {
                Set fileName = $ListGet(files, i)
                Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessCCD(fileName, profileID)
                If $$$ISERR(sc) {
                    Return {"message":"API import failed. error"}
                }
            }

            Return {"message":"API import completed successfully."}.%ToJSON()
        }
        ElseIf importType = "database" {
            If numDocuments <= 0 {
                Return {"message":"Invalid number of documents specified."}.%ToJSON()
            }

            Set sc = ##class(LEADNorth.CDAProfiler.CCDProcessor).ProcessLatestCCDs(numDocuments, profileID, filterDocuments)
            If $$$ISERR(sc) {
                Return {"message":"Database import failed. error"}
            }

            Return {"message":"Database import completed successfully."}.%ToJSON()
        }
    } Catch ex {
        Return {"message":"An error occurred during import. error"}
    }
]]></Implementation>
</Method>
</Class>


<Class name="LEADNorth.UI.Help">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>67290,36967.5999257</TimeChanged>
<TimeCreated>67080,55812.9344482</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Help</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
  body {
    font-family: var(--font_8);
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }
  .navbar {
    background-color: #2c3e50;
    color: white;
    padding: 15px;
    font-size: 18px;
    font-family: var(--font_8);
  }
  .navbar a {
    color: white;
    text-decoration: none;
    padding: 0 15px;
    font-family: var(--font_8);
  }
  .navbar a:hover {
    background-color: #34495e;
    border-radius: 4px;
  }
  .container {
    padding: 20px;
    font-family: var(--font_8);
  }
  .section {
    margin-bottom: 30px;
    font-family: var(--font_8);
  }
  .section h2 {
    color: #2c3e50;
    margin-bottom: 10px;
    font-family: var(--font_8);
  }
  .footer {
    background-color: #2c3e50;
    color: white;
    text-align: center;
    padding: 15px;
    position: fixed;
    bottom: 0;
    width: 100%;
    font-family: var(--font_8);
  }
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Help">
  <html>

    <div class="navbar">
      <a href="LEADNorth.UI.Index.cls">Dashboard</a>
      <a href="LEADNorth.UI.DataImporter.cls">Import Data</a>
      <a href="LEADNorth.UI.Reports.cls">Reports</a>
      <a href="LEADNorth.UI.Settings.cls">Settings</a>
      <a href="LEADNorth.UI.Help.cls">Help</a>
    </div>

    <div class="container">
      <h1>Help / Documentation</h1>
      
      <div class="section" id="getting-started">
        <h2>Getting Started</h2>
        <p>This section will provide an overview of how to begin using the CDA Profiler tool, including initial setup and basic navigation.</p>
      </div>
      
      <div class="section" id="importing-data">
        <h2>Importing Data</h2>
        <p>Instructions on how to import data files into the system. This section will cover supported file formats, how to use the import tool, and troubleshooting tips.</p>
      </div>
      
      <div class="section" id="generating-reports">
        <h2>Generating Reports</h2>
        <p>Guide to generating and interpreting reports. Details will include customizing report templates, exporting reports, and analyzing data.</p>
      </div>

      <div class="section" id="system-settings">
        <h2>System Settings</h2>
        <p>Overview of the various settings available in the CDA Profiler. This section will explain how to configure system preferences, user roles, and other administrative tasks.</p>
      </div>

      <div class="section" id="troubleshooting-faq">
        <h2>Troubleshooting / FAQ</h2>
        <p>This section will provide solutions to common issues and answer frequently asked questions.</p>
      </div>
    </div>

    <div class="footer">
      <p>2024 by LEAD North LLC</p>
    </div>

  </html>
</page>
]]></Data>
</XData>
</Class>


<Class name="LEADNorth.UI.Index">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>67290,36940.8108382</TimeChanged>
<TimeCreated>67079,47360.6029242</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>CDA Profiler Dashboard</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
  body {
    font-family: var(--font_8);
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }
  .navbar {
    background-color: #2c3e50;
    color: white;
    padding: 15px;
    font-size: 18px;
    font-family: var(--font_8);
  }
  .navbar a {
    color: white;
    text-decoration: none;
    padding: 0 15px;
    font-family: var(--font_8);
  }
  .navbar a:hover {
    background-color: #34495e;
    border-radius: 4px;
  }
  .container {
    padding: 20px;
    font-family: var(--font_8);
  }
  .dashboard {
    display: flex;
    flex-wrap: wrap;
    font-family: var(--font_8);
  }
  .widget {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    margin: 10px;
    padding: 15px;
    flex: 1;
    min-width: 300px;
    font-family: var(--font_8);
  }
  .widget h3 {
    margin-top: 0;
    font-family: var(--font_8);
  }
  .footer {
    background-color: #2c3e50;
    color: white;
    text-align: center;
    padding: 15px;
    position: fixed;
    bottom: 0;
    width: 100%;
    font-family: var(--font_8);
  }
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="CDA Profiler Dashboard">
  <html>

    <div class="navbar">
      <a href="LEADNorth.UI.Index.cls">Dashboard</a>
      <a href="LEADNorth.UI.DataImporter.cls">Import Data</a>
      <a href="LEADNorth.UI.Reports.cls">Reports</a>
      <a href="LEADNorth.UI.Settings.cls">Settings</a>
      <a href="LEADNorth.UI.Help.cls">Help</a>
    </div>

    <div class="container">
      <h1>Welcome to the CDA Profiler Dashboard</h1>
      
      <div class="dashboard">

        <div class="widget" id="data-quality-widget">
          <h3>Data Quality Summary</h3>
          <div id="data-quality-chart">[Data Quality Chart]</div>
        </div>

        <div class="widget" id="import-status-widget">
          <h3>Recent Imports</h3>
          <ul id="import-list">
            <li>Import 1 - Success</li>
            <li>Import 2 - Failed</li>
            <li>Import 3 - In Progress</li>
          </ul>
        </div>

        <div class="widget" id="validation-results-widget">
          <h3>Validation Results</h3>
          <table>
            <thead>
              <tr>
                <th>Document</th>
                <th>Status</th>
                <th>Errors</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>Document 1</td>
                <td>Valid</td>
                <td>0</td>
              </tr>
              <tr>
                <td>Document 2</td>
                <td>Invalid</td>
                <td>3</td>
              </tr>
              <tr>
                <td>Document 3</td>
                <td>Valid</td>
                <td>0</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="widget" id="reports-widget">
    <h3>Recent Reports</h3>
    <ul id="report-list">
    </ul>
</div>


      </div> 
    </div> 

    <div class="footer">
      <p>2024 by LEAD North LLC</p>
    </div>

  </html>
</page>
]]></Data>
</XData>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    zenPage.populateReports();
]]></Implementation>
</Method>

<Method name="GetDistinctProfileIDs">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set query = "SELECT ProfileID, MAX(CreatedAt) AS CreatedAt FROM LEADNorth_CDAProfiler_Sections.CCDDocument GROUP BY ProfileID"
    
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)
    
    If $$$ISERR(status) {
        Return "Error preparing statement: "_$System.Status.GetErrorText(status)
    }
    
    Set resultSet = statement.%Execute()
    
    Set html = ""
    
    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set reportDate = resultSet.%Get("CreatedAt")
        
        Set html = html _ "<li><a href='LEADNorth.UI.Reports.cls?profileID="_profileID_"'>Report for Profile "_profileID_" - Generated on "_reportDate_"</a></li>"
    }
    
    Return html
]]></Implementation>
</Method>

<Method name="populateReports">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var reportLinks = zenPage.GetDistinctProfileIDs();
    
    document.getElementById("reports-widget").innerHTML = "<h3>Recent Reports</h3><ul>" + reportLinks + "</ul>";
]]></Implementation>
</Method>
</Class>


<Class name="LEADNorth.UI.Reports">
<Super>%ZEN.Component.page</Super>
<TimeChanged>67290,36894.4445887</TimeChanged>
<TimeCreated>67080,56784.5998386</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Reports</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
    }
    .navbar {
        background-color: #2c3e50;
        color: white;
        padding: 15px;
        font-size: 18px;
    }
    .navbar a {
        color: white;
        text-decoration: none;
        padding: 0 15px;
    }
    .navbar a:hover {
        background-color: #34495e;
        border-radius: 4px;
    }
    .container {
        padding: 20px;
        padding-bottom: 80px; 
    }
    .section {
        margin-bottom: 30px;
    }
    .section h2 {
        color: #2c3e50;
        margin-bottom: 10px;
    }
    .footer {
        background-color: #2c3e50;
        color: white;
        text-align: center;
        padding: 15px;
        position: fixed;
        bottom: 0;
        width: 100%;
        height: 50px;
    }
    .report-selection {
        margin-bottom: 20px;
    }
    .report-selection select {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        margin-bottom: 10px;
    }
    .report-selection button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }
    .report-section {
        margin-top: 30px;
    }
    .collapsible {
        background-color: #2c3e50;
        color: white;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        border: none;
        text-align: left;
        outline: none;
        font-size: 18px;
        margin-bottom: 5px;
    }
    .active, .collapsible:hover {
        background-color: #34495e;
    }
    .content {
        padding: 0 18px;
        display: none;
        overflow: hidden;
        background-color: #f4f4f4;
        margin-bottom: 15px;
    }
    .report-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }
    .report-table th, .report-table td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: left;
    }
    .report-table th {
        background-color: #f2f2f2;
    }
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Reports">
    <html>
    <div class="navbar">
        <a href="LEADNorth.UI.Index.cls">Dashboard</a>
        <a href="LEADNorth.UI.DataImporter.cls">Import Data</a>
        <a href="LEADNorth.UI.Reports.cls">Reports</a>
        <a href="LEADNorth.UI.Settings.cls">Settings</a>
        <a href="LEADNorth.UI.Help.cls">Help</a>
    </div>
    <div class="container">
        <h1>Generated Reports</h1>
        <div class="report-selection">
            <label for="reportSelect">Select a Report:</label>
            <select id="reportSelect" onChange="zenPage.viewReport()"> 
            </select>
            <button onclick="zenPage.exportReport()">Export Report</button>
        </div>
        <div class="report-section" id="reportContent">
            <h2>CCD Report Breakdown</h2>
            <p>Click on a section to expand and view details.</p>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Encounters</button>
            <div class="content" id="encounterReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Vital Signs</button>
            <div class="content" id="vitalSignsReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Allergy</button>
            <div class="content" id="allergyReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Procedures</button>
            <div class="content" id="procedureReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Social History</button>
            <div class="content" id="socialHistoryReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Results</button>
            <div class="content" id="resultsReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Problems</button>
			<div class="content" id="problemReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Plan of Care</button>
			<div class="content" id="planOfCareReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Payer</button>
			<div class="content" id="payerReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Patient</button>
			<div class="content" id="patientReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Medications</button>
			<div class="content" id="medicationReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Immunizations</button>
			<div class="content" id="immunizationReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Functional Status</button>
			<div class="content" id="functionalStatusReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Family History</button>
			<div class="content" id="familyHistoryReportBody">
			</div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Documents</button>
            <div class="content" id="documentsReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Advance Directive</button>
            <div class="content" id="advanceDirectiveReportBody">
            </div>
            <button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Goals</button>
			<div class="content" id="goalsReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Implants</button>
			<div class="content" id="implantsReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Encompassing Encounters</button>
			<div class="content" id="encompassingEncounterReportBody">
			</div>
			<button class="collapsible" onclick="zenPage.toggleCollapsible(this)">Diagnosis</button>
			<div class="content" id="diagnosisReportBody">
			</div>

        </div>
    </div>
    <div class="footer">
        <p>2024 by LEAD North LLC</p>
    </div>
    </html>
</page>
]]></Data>
</XData>

<Method name="exportReport">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var selectedProfileID = document.getElementById("reportSelect").value;

    var xmlContent = zenPage.generateExcelReport(selectedProfileID)
        if (xmlContent) {
            var blob = new Blob([xmlContent], {type: 'application/vnd.ms-excel'});

            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'Report_' + selectedProfileID + '.xls';

            document.body.appendChild(link);

            link.click();

            setTimeout(function() {
                document.body.removeChild(link);
                window.URL.revokeObjectURL(link.href);
            }, 100);
        } else {
            alert('Failed to generate report.');
        }
]]></Implementation>
</Method>

<Method name="generateExcelReport">
<ClassMethod>1</ClassMethod>
<FormalSpec>profileID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set stream = ##class(%Stream.GlobalCharacter).%New()

    Do stream.Write("<?xml version=""1.0""?>")
    Do stream.Write("<?mso-application progid=""Excel.Sheet""?>")
    Do stream.Write("<Workbook xmlns=""urn:schemas-microsoft-com:office:spreadsheet"" ")
    Do stream.Write("xmlns:o=""urn:schemas-microsoft-com:office:office"" ")
    Do stream.Write("xmlns:x=""urn:schemas-microsoft-com:office:excel"" ")
    Do stream.Write("xmlns:ss=""urn:schemas-microsoft-com:office:spreadsheet"" ")
    Do stream.Write("xmlns:html=""http://www.w3.org/TR/REC-html40"">")

    Set sections = "encounters,vitalSigns,allergy,procedures,socialHistory,results,problems,planOfCare,payer,patient,medications,immunizations,functionalStatus,familyHistory,documents,advanceDirective,goals,implants,encompassingEncounter,diagnosis"

    For i=1:1:$L(sections,",") {
        Set reportType = $P(sections,",",i)
        Set sheetXML = ..GenerateWorksheetXML(reportType, profileID)
        If sheetXML '= "" {
            Do stream.Write(sheetXML)
        }
    }

    Do stream.Write("</Workbook>")

    Quit stream.Read(10971486)
]]></Implementation>
</Method>

<Method name="GenerateWorksheetXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>reportType:%String,profileID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set fields = ""
    Set tableName = ""
    If reportType = "encounters" {
    	Set fields = "EncounterNumber,ReasonForVisit,VisitDescription,DischargeDisposition,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StatusCode,StartDateTime,EndDateTime,FacilityName,FacilityIDAAName,FacilityIDExtension,FacilityIDRoot,PerformerID,PerformerAddress,PerformerTelecom,PerformerName,AuthorTime,LocationID,LocationAddress,LocationTelecom,LocationName"
    	Set tableName = "LEADNorth_CDAProfiler_Sections.CCDEncounter"
    	Set className = "LEADNorth.CDAProfiler.Sections.CCDEncounter"
	} ElseIf reportType = "vitalSigns" {
	    Set fields = "Value,Unit,Description,xDate,AuthorTime,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,ObservationIDRoot,ObservationIDExtension,OrganizerCode,OrganizerCodeSystem,OrganizerEffectiveTimeLow,OrganizerEffectiveTimeHigh,OrganizerClassCode,OrganizerMoodCode,OrganizerDisplayName,OrganizerStatusCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDVitalSign"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDVitalSign"
	} ElseIf reportType = "allergy" {
	    Set fields = "AllergyCode,AllergyCodeSystem,AllergyCodeSystemName,AllergyDisplayName,CategoryCode,CategoryCodeSystem,CategoryCodeSystemName,CategoryDisplayName,ReactionCode,ReactionCodeSystem,ReactionCodeSystemName,ReactionDisplayName,SeverityCode,SeverityCodeSystem,SeverityCodeName,SeverityDisplayName,StatusCode,StatusCodeSystem,StatusCodeSystemName,StatusDisplayName,EffectiveTimeLow,EffectiveTimeHigh,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,RepresentedOrganization"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDAllergy"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDAllergy"
	} ElseIf reportType = "procedures" {
	    Set fields = "ProcedureCode,CodeSystem,CodeSystemName,CodeDisplayName,AuthorTime,Status,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerName,PerformerOrganization,PerformerAddress,ProcedureClassCode,MoodCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDProcedure"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDProcedure"
	} ElseIf reportType = "socialHistory" {
	    Set fields = "SocialHistoryID,ConceptDescription,ObservationCode,ObservationCodeSystem,ObservationCodeSystemName,ObservationDisplayName,ValueCode,ValueCodeSystem,ValueCodeSystemName,ValueDisplayName,Units,AuthorTime,StatusCode,EffectiveTimeLow,EffectiveTimeHigh"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDSocialHistory"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDSocialHistory"
	} ElseIf reportType = "results" {
	    Set fields = "TestValue,Units,ReferenceRange,StatusCode,ObservationCode,ObservationCodeDisplayName,ObservationCodeSystem,ObservationCodeSystemName,AuthorTime,OrganizerID,OrganizerName,EffectiveTimeLow,EffectiveTimeHigh,MoodCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDResult"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDResult"
	} ElseIf reportType = "problems" {
	    Set fields = "ValueCode,ValueDisplayName,CodeSystem,CodeSystemName,AuthorTime,Author,ProblemTypeCode,ProblemTypeName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,ProblemClassCode,MoodCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDProblem"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDProblem"
	} ElseIf reportType = "planOfCare" {
	    Set fields = "PlanOfCareID,EncounterID,EncounterExtension,DisplayName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerOrganization,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,AuthorTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPlanOfCare"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDPlanOfCare"
	} ElseIf reportType = "payer" {
	    Set fields = "PayerID,PayerName,PolicyNumber,MemberID,CoveredParty,PayerCode,PayerCodeSystem,PayerCodeSystemName,PayerStatusCode,EffectiveTimeLow,EffectiveTimeHigh,AuthorTime,PerformerIDs,PerformerAddress,PerformerTelecom,PerformerName,LocationAddress,LocationTelecom,LocationName,ParticipantRoleID,ParticipantRoleCode,ParticipantRoleCodeSystem,ParticipantRoleCodeSystemName"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPayer"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDPayer"
	} ElseIf reportType = "patient" {
	    Set fields = "PatientMRN,FirstName,LastName,DOB,GenderCode,GenderDisplay,GenderSystem,Address,City,State,ZipCode,Country,PhoneNumber,Email,LanguageCode,MaritalStatusCode,MaritalStatusDisplay,MaritalStatusSystem,RaceCode,RaceDisplay,RaceSystem,EthnicityCode,EthnicityDisplay,EthnicitySystem"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDPatient"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDPatient"
	} ElseIf reportType = "medications" {
	    Set fields = "MedicationID,DrugName,GenericName,Dose,DoseUnits,Frequency,Route,Site,StartDate,EndDate,Provider,NDC,RxNormCode,GPI,Status"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDMedication"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDMedication"
	} ElseIf reportType = "immunizations" {
	    Set fields = "ImmunizationID,Route,Dose,DoseUnit,Vaccine,VaccineCode,VaccineCodeSystem,VaccineCodeSystemName,LotNumber,StartDate,EndDate,PerformerID,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,StatusCode"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDImmunization"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDImmunization"
	} ElseIf reportType = "functionalStatus" {
	    Set fields = "FunctionalStatusID,Status,xDate,Description,StatusCode,ObservationCode,ObservationSystem,EffectiveTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDFunctionalStatus"
	} ElseIf reportType = "familyHistory" {
	    Set fields = "RelativePerson,RelativeCode,RelativeCodeSystem,OnsetAge,StatusCode,ObservationCode,ObservationDisplayName,ObservationSystem,ObservationID,ObservationIDOid"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDFamilyHistory"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDFamilyHistory"
	} ElseIf reportType = "documents" {
	    Set fields = "DocumentID,PatientID,DocumentDate,CreatedAt"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDDocument"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDDocument"
	} ElseIf reportType = "advanceDirective" {
	    Set fields = "AdvanceDirectiveID,DirectiveType,DateSigned,StatusCode,DirectiveID"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDAdvanceDirective"
	} ElseIf reportType = "goals" {
	    Set fields = "GoalID,GoalDescription,GoalCode,GoalCodeSystem,GoalCodeSystemName,GoalStatus,StartDate,EndDate,AuthorTime,AuthorName"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDGoals"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDGoals"
	} ElseIf reportType = "implants" {
	    Set fields = "ImplantID,DeviceName,DeviceCode,DeviceCodeSystem,DeviceCodeSystemName,ManufacturerModelName,SerialNumber,ImplantStatus,ImplantDate,RemovalDate,AuthorTime"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDImplants"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDImplants"
	} ElseIf reportType = "encompassingEncounter" {
	    Set fields = "EncounterID,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StartDateTime,EndDateTime,DischargeDisposition,LocationID,LocationName,LocationAddress,LocationTelecom"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDEncompassingEncounter"
	} ElseIf reportType = "diagnosis" {
	    Set fields = "DiagnosisID,DiagnosisTypeCode,DiagnosisTypeCodeSystem,DiagnosisTypeCodeSystemName,DiagnosisTypeDisplayName,DiagnosisEffectiveTimeLow,DiagnosisEffectiveTimeHigh,DiagnosisCode,DiagnosisCodeSystem,DiagnosisCodeSystemName,DiagnosisCodeDisplayName,DiagnosisStatusCode,DiagnosisEncounterNumber"
	    Set tableName = "LEADNorth_CDAProfiler_Sections.CCDDiagnosis"
	    Set className = "LEADNorth.CDAProfiler.Sections.CCDDiagnosis"
	}
	 Else {
        Return "" 
    }
    
    Set xml = "<Worksheet ss:Name="""_reportType_""">"
    Set xml = xml_"<Table>"
    
    Set xml = xml_"<Row>"
    Set xml = xml_"<Cell><Data ss:Type=""String"">Field</Data></Cell>"
    Set xml = xml_"<Cell><Data ss:Type=""String"">Value</Data></Cell>"
    Set xml = xml_"<Cell><Data ss:Type=""String"">Occurrences</Data></Cell>"
    Set xml = xml_"<Cell><Data ss:Type=""String"">XPath</Data></Cell>"
    Set xml = xml_"<Cell><Data ss:Type=""String"">SDA Mapping</Data></Cell>"
    Set xml = xml_"</Row>"
    
    For j=1:1:$L(fields,",") {
        Set field = $ZStrip($P(fields,",",j),"*W")
        
        Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences FROM "_tableName_" WHERE ProfileID = ? GROUP BY "_field
        Set statement = ##class(%SQL.Statement).%New()
        Set status = statement.%Prepare(queryString)
        If $$$ISERR(status) {
            Continue
        }
        Set resultSet = statement.%Execute(profileID)
        If $$$ISERR(resultSet) {
            Continue
        }
        While resultSet.%Next() {
            Set value = resultSet.%Get("Value")
            Set occurrences = resultSet.%Get("Occurrences")
            
            Set xPath = $classmethod(className, "GetXPath", field)
            
            Set sdaMapping = "<SDAPATH>"
            
            Set xml = xml_"<Row>"
            Set xml = xml_"<Cell><Data ss:Type=""String"">"_..EncodeXML(field)_"</Data></Cell>"
            Set xml = xml_"<Cell><Data ss:Type=""String"">"_..EncodeXML(value)_"</Data></Cell>"
            Set xml = xml_"<Cell><Data ss:Type=""Number"">"_occurrences_"</Data></Cell>"
            Set xml = xml_"<Cell><Data ss:Type=""String"">""</Data></Cell>"
            Set xml = xml_"<Cell><Data ss:Type=""String"">"_..EncodeXML(sdaMapping)_"</Data></Cell>"
            Set xml = xml_"</Row>"
        }
    }
    
    Set xml = xml_"</Table></Worksheet>"
    Return xml
]]></Implementation>
</Method>

<Method name="EncodeXML">
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set value = $Replace(value, "&", "&amp;")
    Set value = $Replace(value, "<", "&lt;")
    Set value = $Replace(value, ">", "&gt;")
    Set value = $Replace(value, """", "&quot;")
    Set value = $Replace(value, "'", "&apos;")
    Quit value
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var urlParams = new URLSearchParams(window.location.search);
    var profileID = urlParams.get('profileID');
    zenPage.populateReports();
    zenPage.viewReport();
    if (profileID) {
            document.getElementById('reportSelect').value = profileID;
            zenPage.viewReport();
        }
]]></Implementation>
</Method>

<Method name="populateReports">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var reportNames = zenPage.GetDistinctProfileIDs();
	//console.log(reportNames);
	document.getElementById("reportSelect").innerHTML = reportNames;
]]></Implementation>
</Method>

<Method name="GetDistinctProfileIDs">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set query = "SELECT DISTINCT ProfileID FROM LEADNorth_CDAProfiler_Sections.CCDDocument"
    
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)
    
    If $$$ISERR(status) {
        Return "Error preparing statement: "_$System.Status.GetErrorText(status)
    }
    
    Set resultSet = statement.%Execute()
    
    Set html = ""
    
    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set html = html _ "<option value='"_profileID_"'>" _ profileID _ "</option>"
    }
    
    Return html
]]></Implementation>
</Method>

<Method name="viewReport">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[    zenPage.displayReportData();
]]></Implementation>
</Method>

<Method name="displayReportData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var selectedProfileID = document.getElementById("reportSelect").value;

    var htmlEncounters = zenPage.QS("encounters", selectedProfileID);
    var htmlVitalSigns = zenPage.QS("vitalSigns", selectedProfileID);
    var htmlAllergy = zenPage.QS("allergy", selectedProfileID);
    var htmlProcedures = zenPage.QS("procedures", selectedProfileID);
    var htmlSocialHistory = zenPage.QS("socialHistory", selectedProfileID);
    var htmlResults = zenPage.QS("results", selectedProfileID);
    var htmlProblems = zenPage.QS("problems", selectedProfileID);
    var htmlPlanOfCare = zenPage.QS("planOfCare", selectedProfileID);
    var htmlPayer = zenPage.QS("payer", selectedProfileID);
    var htmlPatient = zenPage.QS("patient", selectedProfileID);
    var htmlMedications = zenPage.QS("medications", selectedProfileID);
    var htmlImmunizations = zenPage.QS("immunizations", selectedProfileID);
    var htmlFunctionalStatus = zenPage.QS("functionalStatus", selectedProfileID);
    var htmlFamilyHistory = zenPage.QS("familyHistory", selectedProfileID);
    var htmlDocuments = zenPage.QS("documents", selectedProfileID);
    var htmlAdvanceDirective = zenPage.QS("advanceDirective", selectedProfileID);
    var htmlGoals = zenPage.QS("goals", selectedProfileID);
    var htmlImplants = zenPage.QS("implants", selectedProfileID);
    var htmlDiagnosis = zenPage.QS("diagnosis", selectedProfileID);
    var htmlEncompassingEncounter = zenPage.QS("encompassingEncounter", selectedProfileID);

    // Replace backslashes in the HTML content
    htmlGoals = htmlGoals.replace(/\\/g, "");
    htmlImplants = htmlImplants.replace(/\\/g, "");
    htmlDiagnosis = htmlDiagnosis.replace(/\\/g, "");
    htmlEncompassingEncounter = htmlEncompassingEncounter.replace(/\\/g, "");
    htmlEncounters = htmlEncounters.replace(/\\/g, "");
    htmlVitalSigns = htmlVitalSigns.replace(/\\/g, "");
    htmlAllergy = htmlAllergy.replace(/\\/g, "");
    htmlProcedures = htmlProcedures.replace(/\\/g, "");
    htmlSocialHistory = htmlSocialHistory.replace(/\\/g, "");
    htmlResults = htmlResults.replace(/\\/g, "");
    htmlProblems = htmlProblems.replace(/\\/g, "");
    htmlPlanOfCare = htmlPlanOfCare.replace(/\\/g, "");
    htmlPayer = htmlPayer.replace(/\\/g, "");
    htmlPatient = htmlPatient.replace(/\\/g, "");
    htmlMedications = htmlMedications.replace(/\\/g, "");
    htmlImmunizations = htmlImmunizations.replace(/\\/g, "");
    htmlFunctionalStatus = htmlFunctionalStatus.replace(/\\/g, "");
    htmlFamilyHistory = htmlFamilyHistory.replace(/\\/g, "");
    htmlDocuments = htmlDocuments.replace(/\\/g, "");
    htmlAdvanceDirective = htmlAdvanceDirective.replace(/\\/g, ""); 

    document.getElementById("goalsReportBody").innerHTML = htmlGoals;
    document.getElementById("implantsReportBody").innerHTML = htmlImplants;
    document.getElementById("diagnosisReportBody").innerHTML = htmlDiagnosis;
    document.getElementById("encompassingEncounterReportBody").innerHTML = htmlEncompassingEncounter;
    document.getElementById("encounterReportBody").innerHTML = htmlEncounters;
    document.getElementById("vitalSignsReportBody").innerHTML = htmlVitalSigns;
    document.getElementById("allergyReportBody").innerHTML = htmlAllergy;
    document.getElementById("procedureReportBody").innerHTML = htmlProcedures;
    document.getElementById("socialHistoryReportBody").innerHTML = htmlSocialHistory;
    document.getElementById("resultsReportBody").innerHTML = htmlResults;
    document.getElementById("problemReportBody").innerHTML = htmlProblems;
    document.getElementById("planOfCareReportBody").innerHTML = htmlPlanOfCare;
    document.getElementById("payerReportBody").innerHTML = htmlPayer;
    document.getElementById("patientReportBody").innerHTML = htmlPatient;
    document.getElementById("medicationReportBody").innerHTML = htmlMedications;
    document.getElementById("immunizationReportBody").innerHTML = htmlImmunizations;
    document.getElementById("functionalStatusReportBody").innerHTML = htmlFunctionalStatus;
    document.getElementById("familyHistoryReportBody").innerHTML = htmlFamilyHistory;
    document.getElementById("documentsReportBody").innerHTML = htmlDocuments;
    document.getElementById("advanceDirectiveReportBody").innerHTML = htmlAdvanceDirective;
]]></Implementation>
</Method>

<Method name="toggleCollapsible">
<FormalSpec>button</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    button.classList.toggle("active");
    var content = button.nextElementSibling;
    if (content.style.display === "block") {
        content.style.display = "none";
    } else {
        content.style.display = "block";
    }
]]></Implementation>
</Method>

<Method name="QS">
<ClassMethod>1</ClassMethod>
<FormalSpec>reportType:%String,profileID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    If reportType = "encounters" {
        Set fields = "EncounterNumber,ReasonForVisit,VisitDescription,DischargeDisposition,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StatusCode,StartDateTime,EndDateTime,FacilityName,FacilityIDAAName,FacilityIDExtension,FacilityIDRoot,PerformerID,PerformerAddress,PerformerTelecom,PerformerName,AuthorTime,LocationID,LocationAddress,LocationTelecom,LocationName"
    } ElseIf reportType = "vitalSigns" {
        Set fields = "Value,Unit,Description,xDate,AuthorTime,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,ObservationIDRoot,ObservationIDExtension,OrganizerCode,OrganizerCodeSystem,OrganizerEffectiveTimeLow,OrganizerEffectiveTimeHigh,OrganizerClassCode,OrganizerMoodCode,OrganizerDisplayName,OrganizerStatusCode"
    } ElseIf reportType = "allergy" {
        Set fields = "AllergyCode,AllergyCodeSystem,AllergyCodeSystemName,AllergyDisplayName,CategoryCode,CategoryCodeSystem,CategoryCodeSystemName,CategoryDisplayName,ReactionCode,ReactionCodeSystem,ReactionCodeSystemName,ReactionDisplayName,SeverityCode,SeverityCodeSystem,SeverityCodeName,SeverityDisplayName,StatusCode,StatusCodeSystem,StatusCodeSystemName,StatusDisplayName,EffectiveTimeLow,EffectiveTimeHigh,ObservationCode,ObservationCodeSystem,ObservationDisplayName,ObservationStatusCode,ObservationEffectiveTimeLow,ObservationEffectiveTimeHigh,RepresentedOrganization,ActIdExtension,ActIdRoot,ActClassCode,ActMoodCode,ActStatusCode,ReferenceAllergyId,ReferenceReactionId,ReferenceSeverityId,ReferenceStatusId"
    } ElseIf reportType = "procedures" {
        Set fields = "ProcedureCode,CodeSystem,CodeSystemName,CodeDisplayName,AuthorTime,Status,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerName,PerformerOrganization,PerformerAddress,ProcedureClassCode,MoodCode"
    } ElseIf reportType = "socialHistory" {
        Set fields = "SocialHistoryID,ConceptDescription,ObservationCode,ObservationCodeSystem,ObservationCodeSystemName,ObservationDisplayName,ValueCode,ValueCodeSystem,ValueCodeSystemName,ValueDisplayName,Units,AuthorTime,StatusCode,EffectiveTimeLow,EffectiveTimeHigh"
    } ElseIf reportType = "results" {
        Set fields = "TestValue,Units,ReferenceRange,StatusCode,ObservationCode,ObservationCodeDisplayName,ObservationCodeSystem,ObservationCodeSystemName,AuthorTime,OrganizerID,OrganizerName,EffectiveTimeLow,EffectiveTimeHigh,MoodCode"
    } ElseIf reportType = "problems" {
        Set fields = "ValueCode,ValueDisplayName,CodeSystem,CodeSystemName,AuthorTime,Author,ProblemTypeCode,ProblemTypeName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,ProblemClassCode,MoodCode"
    } ElseIf reportType = "planOfCare" {
        Set fields = "PlanOfCareID,EncounterID,EncounterExtension,DisplayName,StatusCode,EffectiveTimeLow,EffectiveTimeHigh,PerformerID,PerformerOrganization,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,AuthorTime"
    } ElseIf reportType = "payer" {
        Set fields = "PayerID,PayerName,PolicyNumber,MemberID,CoveredParty,PayerCode,PayerCodeSystem,PayerCodeSystemName,PayerStatusCode,EffectiveTimeLow,EffectiveTimeHigh,AuthorTime,PerformerIDs,PerformerAddress,PerformerTelecom,PerformerName,LocationAddress,LocationTelecom,LocationName,ParticipantRoleID,ParticipantRoleCode,ParticipantRoleCodeSystem,ParticipantRoleCodeSystemName"
    } ElseIf reportType = "patient" {
        Set fields = "PatientMRN,FirstName,LastName,DOB,GenderCode,GenderDisplay,GenderSystem,Address,City,State,ZipCode,Country,PhoneNumber,Email,LanguageCode,MaritalStatusCode,MaritalStatusDisplay,MaritalStatusSystem,RaceCode,RaceDisplay,RaceSystem,EthnicityCode,EthnicityDisplay,EthnicitySystem"
    } ElseIf reportType = "medications" {
        Set fields = "MedicationID,DrugName,GenericName,Dose,DoseUnits,Frequency,Route,Site,StartDate,EndDate,Provider,NDC,RxNormCode,GPI,Status"
    } ElseIf reportType = "immunizations" {
        Set fields = "ImmunizationID,Route,Dose,DoseUnit,Vaccine,VaccineCode,VaccineCodeSystem,VaccineCodeSystemName,LotNumber,StartDate,EndDate,PerformerID,PerformerAddress,PerformerCity,PerformerState,PerformerPostalCode,StatusCode"
    } ElseIf reportType = "functionalStatus" {
        Set fields = "FunctionalStatusID,Status,xDate,Description,StatusCode,ObservationCode,ObservationSystem,EffectiveTime"
    } ElseIf reportType = "familyHistory" {
        Set fields = "RelativePerson,RelativeCode,RelativeCodeSystem,OnsetAge,StatusCode,ObservationCode,ObservationDisplayName,ObservationSystem,ObservationID,ObservationIDOid"
    } ElseIf reportType = "documents" { // Documents report fields
        Set fields = "DocumentID,PatientID,DocumentDate,CreatedAt"
    } ElseIf reportType = "advanceDirective" {
        Set fields = "AdvanceDirectiveID,DirectiveType,DateSigned,StatusCode,DirectiveID"  // Fields for Advance Directive
    } ElseIf reportType = "goals" {
        Set fields = "GoalID,GoalDescription,GoalCode,GoalCodeSystem,GoalCodeSystemName,GoalStatus,StartDate,EndDate,AuthorTime,AuthorName"
    } ElseIf reportType = "implants" {
        Set fields = "ImplantID,DeviceName,DeviceCode,DeviceCodeSystem,DeviceCodeSystemName,ManufacturerModelName,SerialNumber,ImplantStatus,ImplantDate,RemovalDate,AuthorTime"
    } ElseIf reportType = "encompassingEncounter" {
        Set fields = "EncounterID,EncounterTypeDisplayName,EncounterTypeCode,EncounterTypeCodeSystem,EncounterTypeCodeSystemName,StartDateTime,EndDateTime,DischargeDisposition,LocationID,LocationName,LocationAddress,LocationTelecom"
    } ElseIf reportType = "diagnosis" {
        Set fields = "DiagnosisID,DiagnosisTypeCode,DiagnosisTypeCodeSystem,DiagnosisTypeCodeSystemName,DiagnosisTypeDisplayName,DiagnosisEffectiveTimeLow,DiagnosisEffectiveTimeHigh,DiagnosisCode,DiagnosisCodeSystem,DiagnosisCodeSystemName,DiagnosisCodeDisplayName,DiagnosisStatusCode,DiagnosisEncounterNumber"
    }

    Set html = ""

    For i=1:1:$Length(fields, ",") {
        Set field = $ZStrip($Piece(fields, ",", i), "*W") 

        Set html = html _ "<button class='collapsible' onclick='zenPage.toggleCollapsible(this)'>" _ field _ "</button>"
        Set html = html _ "<div class='content'>"
        Set html = html _ "<table class='report-table'><tr><th>Value</th><th>Occurrences</th><th>XPath</th><th>SDA Mapping</th></tr>"

        If reportType = "encounters" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDEncounter WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "vitalSigns" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "allergy" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDAllergy WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "procedures" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDProcedure WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "socialHistory" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "results" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDResult WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "problems" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDProblem WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "planOfCare" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "payer" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPayer WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "patient" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDPatient WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "medications" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDMedication WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "immunizations" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDImmunization WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "functionalStatus" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "familyHistory" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "documents" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "advanceDirective" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "goals" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDGoals WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        }  ElseIf reportType = "encompassingEncounter" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } ElseIf reportType = "implants" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDImplants WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        }  ElseIf reportType = "diagnosis" {
            Set queryString = "SELECT "_field_" AS Value, COUNT(*) AS Occurrences, XPath " _
                              "FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis WHERE ProfileID = ? " _
                              "GROUP BY "_field_", XPath"
        } 

        Set statement = ##class(%SQL.Statement).%New()
        Set status = statement.%Prepare(queryString)
        If $$$ISERR(status) {
	        write queryString
            Quit
        }

        Set resultSet = statement.%Execute(profileID)
        If $$$ISERR(resultSet) {
            Quit
        }

        While resultSet.%Next() {
            Set value = ..EncodeHTML(resultSet.%Get("Value"))
            Set occurrences = ..EncodeHTML(resultSet.%Get("Occurrences"))
            Set xPath = ""

            If reportType = "encounters" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "EncounterXSLT")
            } ElseIf reportType = "vitalSigns" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "VitalSignsXSLT")
            } ElseIf reportType = "procedures" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ProceduresXSLT")
            } ElseIf reportType = "socialHistory" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "SocialHistoryXSLT")
            } ElseIf reportType = "results" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ResultsXSLT")
            } ElseIf reportType = "problems" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ProblemsXSLT")
            } ElseIf reportType = "planOfCare" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PlanOfCareXSLT")
            } ElseIf reportType = "payer" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PayerXSLT")
            } ElseIf reportType = "patient" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "PatientXSLT")
            } ElseIf reportType = "medications" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "MedicationsXSLT")
            } ElseIf reportType = "immunizations" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ImmunizationsXSLT")
            } ElseIf reportType = "functionalStatus" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "FunctionalStatusXSLT")
            } ElseIf reportType = "familyHistory" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "FamilyHistoryXSLT")
            } ElseIf reportType = "documents" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "MetadataXSLT")
            } ElseIf reportType = "advanceDirective" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "AdvanceDirectiveXSLT")
            } ElseIf reportType = "allergy" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "AllergyXSLT")
            } ElseIf reportType = "diagnosis" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "DiagnosisXSLT")
            } ElseIf reportType = "encompassingEncounter" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "EncompassingEncounterXSLT")
            } ElseIf reportType = "goals" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "GoalsXSLT")
            } ElseIf reportType = "implants" {
                Set xPath = ##class(LEADNorth.CDAProfiler.Utils.Mappings).GetXPathForProperty(field, "ImplantsXSLT")
            } 

            Set html = html _ "<tr><td>" _ value _ "</td><td>" _ occurrences _ "</td><td>" _ xPath _ "</td><td>" _ "<SDAPATH>" _ "</td></tr>"
        }

        Set html = html _ "</table></div>"  
    }

    Quit html
]]></Implementation>
</Method>

<Method name="EncodeHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set value = $Replace(value, "&", "&amp;")
    Set value = $Replace(value, "<", "&lt;")
    Set value = $Replace(value, ">", "&gt;")
    Set value = $Replace(value, """", "&quot;")
    Set value = $Replace(value, "'", "&#39;")
    Quit value
]]></Implementation>
</Method>
</Class>


<Class name="LEADNorth.UI.Settings">
<Super>%ZEN.Component.page</Super>
<TimeChanged>67290,37066.6175967</TimeChanged>
<TimeCreated>67080,56235.0959484</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Settings</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>LEADNorth.CDAProfiler</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
  body {
    font-family: var(--font_8);
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
  }
  .navbar {
    background-color: #2c3e50;
    color: white;
    padding: 15px;
    font-size: 18px;
  }
  .navbar a {
    color: white;
    text-decoration: none;
    padding: 0 15px;
  }
  .navbar a:hover {
    background-color: #34495e;
    border-radius: 4px;
  }
  .section {
    margin-bottom: 30px;
  }
  .section h2 {
    color: #2c3e50;
    margin-bottom: 10px;
  }
  .container {
    padding: 20px;
    padding-bottom: 80px;
  }
  .footer {
    background-color: #2c3e50;
    color: white;
    text-align: center;
    padding: 15px;
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 50px;
  }
  .form-group {
    margin-bottom: 15px;
  }
  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }
  .form-group select, .form-group button, .form-group input[type="file"] {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    margin-top: 5px;
  }
  .editable-div {
    width: 100%;
    min-height: 150px;
    border: 1px solid #ccc;
    padding: 10px;
    font-size: 16px;
    white-space: pre-wrap;
    overflow-wrap: break-word;
    background-color: #fff;
  }
  .response-box {
    width: 100%;
    min-height: 150px;
    border: 1px solid #2c3e50;
    background-color: #e8f5e9;
    padding: 10px;
    font-size: 16px;
    color: #2c3e50;
    overflow-y: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  #chatInput {
	width: 50%;
    min-height: 25px;
    border: 1px solid #2c3e50;
    background-color: white;
    padding: 10px;
    font-size: 16px;
    color: #2c3e50;
    overflow-y: auto;
    white-space: pre-wrap;
    word-wrap: break-word;
  }
  #submitQuestion {
	  width: 25%;
  }
  .loader {
  border: 16px solid #f3f3f3; 
  border-top: 16px solid #3498db;
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
  margin: 0 auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

#successBanner {
	display: none;
  position: fixed;
  bottom: 50%;
    left: 37.5%;
    width: 25%;
  background-color: #4CAF50;
  color: white;
  text-align: center;
  padding: 15px;
  font-size: 18px;
  transition: bottom 0.5s ease-in-out; 
}

#successBanner.show {
  display: block;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Settings">
  <html>

    <div class="navbar">
      <a href="LEADNorth.UI.Index.cls">Dashboard</a>
      <a href="LEADNorth.UI.DataImporter.cls">Import Data</a>
      <a href="LEADNorth.UI.Reports.cls">Reports</a>
      <a href="LEADNorth.UI.Settings.cls">Settings</a>
      <a href="LEADNorth.UI.Help.cls">Help</a>
    </div>

    <div class="container">
      <h1>Settings</h1>
      
      <div class="section" id="xslt-editor">
        <h2>Edit XSLT XPath Expressions</h2>
        <div class="form-group">
          <label for="xsltBlock">Select XSLT Block:</label>
          <select id="xsltBlock" name="xsltBlock" onchange="zenPage.loadXSLTContent()">
            <option value="MetadataXSLT">MetadataXSLT</option>
            <option value="AllergyXSLT">AllergyXSLT</option>
            <option value="MedicationsXSLT">MedicationsXSLT</option>
            <option value="ProblemsXSLT">ProblemsXSLT</option>
            <option value="ProceduresXSLT">ProceduresXSLT</option>
            <option value="ResultsXSLT">ResultsXSLT</option>
            <option value="VitalSignsXSLT">VitalSignsXSLT</option>
            <option value="ImmunizationsXSLT">ImmunizationsXSLT</option>
            <option value="PlanOfCareXSLT">PlanOfCareXSLT</option>
            <option value="SocialHistoryXSLT">SocialHistoryXSLT</option>
            <option value="FunctionalStatusXSLT">FunctionalStatusXSLT</option>
            <option value="FamilyHistoryXSLT">FamilyHistoryXSLT</option>
            <option value="AdvanceDirectiveXSLT">AdvanceDirectiveXSLT</option>
            <option value="EncounterXSLT">EncounterXSLT</option>
            <option value="PayerXSLT">PayerXSLT</option>
            <option value="PatientXSLT">PatientXSLT</option>
            <option value="DiagnosisXSLT">DiagnosisXSLT</option>
            <option value="ImplantsXSLT">ImplantsXSLT</option>
            <option value="GoalsXSLT">GoalsXSLT</option>
            <option value="EncompassingEncounterXSLT">EncompassingEncounterXSLT</option>
          </select>
        </div>
        <div class="form-group">
          <label for="xpathContent">Edit XPath Expressions:</label>
          <div id="xpathContent" class="editable-div" contenteditable="true"></div>
        </div>
        
        <div class="form-group">
          <button type="button" onclick="zenPage.saveXPaths()">Save XPaths</button>
        </div>
        <div class="form-group">
          <label for="sampleData">Path to CCD:</label>
          <input id="sampleData" name="sampleData" onchange=""/>
        </div>
        <div class="form-group">
          <button type="button" onclick="zenPage.applyXSLT()">Apply XSLT</button>
        </div>
        <div class="form-group">
          <label for="transformedOutput">Transformed Output:</label>
          <div id="transformedOutput" class="response-box"></div>
        </div>
      <!--<div class="section" id="chatgpt-section">
        <h2>Chat with ChatGPT</h2>
        <div class="form-group">
          <label for="chatInput">Ask anything to ChatGPT:</label>
          <input id="chatInput" placeholder="Type your question here..."></input>
          <button id="submitQuestion" type="button" onclick="zenPage.askChatGPT()">Submit</button>
        </div>
        <div class="form-group">
          <label for="chatResponse">Response from ChatGPT:</label>
          <div id="chatResponse" class="response-box"></div>
        </div>
      </div>-->
        <div class="form-group">
          <label for="profileIDSelect">Select ProfileID to Delete Data:</label>
          <select id="profileIDSelect" name="profileIDSelect">
            <option value="" >Select Profile ID</option>
          </select>
        </div>
        <div class="form-group">
          <button type="button" onclick="zenPage.deleteProfileData()">Delete Data for Selected ProfileID</button>
        </div>

        <div class="form-group">
          <button type="button" onclick="zenPage.deleteAllData()">Delete All Data</button>
        </div>
      
      </div>
      <div id="successBanner">XSLT file saved successfully!</div>
    </div>


    <div class="footer">
      <p>2024 by LEAD North LLC</p>
    </div>

  </html>
</page>
]]></Data>
</XData>

<Method name="deleteProfileData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var profileID = document.getElementById('profileIDSelect').value;

    if (!profileID) {
        alert('Please select a Profile ID.');
        return;
    }

    profileID = encodeURIComponent(profileID);

    var confirmation = confirm("Are you sure you want to delete all data for Profile ID " + decodeURIComponent(profileID) + "? This action cannot be undone.");
    
    if (confirmation) {
        var response = zenPage.DeleteDataByProfile(profileID);
        alert(response);
    }
    var profileIDOptions = zenPage.PopulateProfileIDs();
    document.getElementById("profileIDSelect").innerHTML = profileIDOptions;
]]></Implementation>
</Method>

<Method name="deleteAllData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var confirmation = confirm("Are you sure you want to delete all data? This action cannot be undone.");
    if (confirmation) {
        var response = zenPage.DeleteAllData2();
        alert(response);
    }
    var profileIDOptions = zenPage.PopulateProfileIDs();
    document.getElementById("profileIDSelect").innerHTML = profileIDOptions;
]]></Implementation>
</Method>

<Method name="DeleteDataByProfile">
<ClassMethod>1</ClassMethod>
<FormalSpec>profileID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Try {
        Set profileID = $Replace(profileID, "'", "''")

        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDocument WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncounter WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProcedure WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDResult WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProblem WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPayer WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPatient WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDMedication WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImmunization WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDGoals WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImplants WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAllergy WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective WHERE ProfileID = :profileID)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis WHERE ProfileID = :profileID)

        Return "Data successfully deleted for ProfileID: "_profileID
    } Catch ex {
        Return "Error deleting data for ProfileID: "_profileID_" - "_ex.DisplayString()
    }
]]></Implementation>
</Method>

<Method name="DeleteAllData2">
<Description>
Server-side method to delete all data.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Try {
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDocument)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncounter)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDVitalSign)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProcedure)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDSocialHistory)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDResult)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDProblem)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPlanOfCare)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPayer)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDPatient)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDMedication)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImmunization)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFunctionalStatus)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDFamilyHistory)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDGoals)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDImplants)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDEncompassingEncounter)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAllergy)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDAdvanceDirective)
        &sql(DELETE FROM LEADNorth_CDAProfiler_Sections.CCDDiagnosis)

        Return "All data successfully deleted."
    } Catch ex {
        Return "Error deleting all data: "_ex.DisplayString()
    }
]]></Implementation>
</Method>

<Method name="PopulateProfileIDs">
<Description>
Server-side method to populate ProfileIDs in the dropdown.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set query = "SELECT DISTINCT ProfileID FROM LEADNorth_CDAProfiler_Sections.CCDDocument"
    Set statement = ##class(%SQL.Statement).%New()
    Set status = statement.%Prepare(query)
    
    If $$$ISERR(status) {
        Return "Error: Could not retrieve ProfileIDs."
    }
    
    Set resultSet = statement.%Execute()
    Set html = ""
    
    While resultSet.%Next() {
        Set profileID = resultSet.%Get("ProfileID")
        Set html = html _ "<option value='"_profileID_"'>" _ profileID _ "</option>"
    }
    
    Return html
]]></Implementation>
</Method>

<Method name="applyXSLT">
<Description>
Client-side JavaScript methods for handling content.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var ccdPath = document.getElementById('sampleData').value;
    var xsltBlock = document.getElementById('xsltBlock').value;
	ccdPath = ccdPath.replace(/"/g, '');
	var response = zenPage.ApplyXSLTToCCD(ccdPath, xsltBlock);
	document.getElementById('transformedOutput').innerText = response;
]]></Implementation>
</Method>

<Method name="ApplyXSLTToCCD">
<ClassMethod>1</ClassMethod>
<FormalSpec>ccdFilePath:%String,xsltBlock:%String</FormalSpec>
<ReturnType>%Stream.GlobalCharacter</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set ccdStream = ##class(LEADNorth.CDAProfiler.CCDProcessor).FileToStream(ccdFilePath, xsltBlock)
    
    If ccdStream = "" {
        Quit "Error: Failed to load CCD file or apply XSLT."
    }
    
    Set transformedOutput = ccdStream.Read()
    While 'ccdStream.AtEnd {
        Set transformedOutput = transformedOutput _ ccdStream.Read()
    }
    
    Quit transformedOutput
]]></Implementation>
</Method>

<Method name="loadXSLTContent">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var xsltBlock = document.getElementById('xsltBlock').value; 
    var response = zenPage.GetXSLTContent(xsltBlock)
        document.getElementById('xpathContent').innerText = response;
]]></Implementation>
</Method>

<Method name="saveXPaths">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var xsltBlock = document.getElementById('xsltBlock').value;
    var xpathContent = document.getElementById('xpathContent').innerText;

    var confirmation = confirm("Are you sure you want to overwrite the XSLT content for block " + xsltBlock + "? This action cannot be undone.");

    if (confirmation) {
        var response = zenPage.SaveXSLTContent(xsltBlock, xpathContent) 
            //alert(response);
            zenPage.showSuccessBanner();
            
    } else {
        alert("Save action canceled.");
    }
]]></Implementation>
</Method>

<Method name="showSuccessBanner">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var banner = document.getElementById("successBanner");
    banner.classList.add("show");

    setTimeout(function() {
        banner.classList.remove("show");
    }, 3000);
]]></Implementation>
</Method>

<Method name="onloadHandler">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
    var profileIDOptions = zenPage.PopulateProfileIDs();
    document.getElementById("profileIDSelect").innerHTML = profileIDOptions;
    zenPage.loadXSLTContent();
]]></Implementation>
</Method>

<Method name="GetXSLTContent">
<Description>
Server-side method to retrieve XSLT content for the selected block.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>xsltBlock:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set className = "LEADNorth.CDAProfiler.XSLT.CDAParser" // Target class name
    Set xdata = ##class(%Dictionary.XDataDefinition).IDKEYOpen(className, xsltBlock)
    If xdata = $$$NULLOREF {
        Quit "XData block not found!"
    }
    Quit xdata.Data.Read()
]]></Implementation>
</Method>

<Method name="SaveXSLTContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>xsltBlock:%String,xpathContent:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
    Set className = "LEADNorth.CDAProfiler.XSLT.CDAParser" // Target class name
    Set xdata = ##class(%Dictionary.XDataDefinition).IDKEYOpen(className, xsltBlock)
    If xdata = $$$NULLOREF {
        Quit "XData block not found!"
    }

    Do xdata.Data.Clear()
    Do xdata.Data.Write(xpathContent)
    Set status = xdata.%Save()
    
    If $$$ISERR(status) {
        Quit "Failed to save XData!"
    }

    Set sc = $SYSTEM.Status.OK()
    Set tInitIO = ##class(%Library.Device).ReDirectIO(1) 
    Try {
        $$$THROWONERROR(sc, $SYSTEM.OBJ.Compile(className, "ck"))
    } Catch(ex) {
        Set sc = ex.AsStatus()
    }

    Do ##class(%Library.Device).ReDirectIO(0)
    Use tInitIO

    If $$$ISERR(sc) {
        Quit "Failed to recompile the class! Error: "_$SYSTEM.Status.GetErrorText(sc)
    }

    Quit "XData block successfully updated and class recompiled."
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClientMethod askChatGPT() [ Language = javascript ]
{
    document.getElementById('chatResponse').innerHTML = '<div class="loader"></div>';

    setTimeout(function() {
        var question = document.getElementById('chatInput').value;
        var answer = null;
        var xSLT = document.getElementById('xpathContent').innerText;

        var answer = zenPage.ChatGPTAPI(question, xSLT);

        try {
            var jsonResponse = JSON.parse(answer);

            if (jsonResponse.choices && jsonResponse.choices.length > 0) {
                answer = jsonResponse.choices[0].message.content;
            } else {
                answer = "Error: No valid response from ChatGPT.";
            }
        } catch (e) {
            answer = "Error parsing response: " + answer;
        }

        console.log(answer);

        answer = answer.replace(/```xml/g, "").replace(/```/g, "");

        document.getElementById('chatResponse').innerText = answer;

    }, 100);
}

ClassMethod ChatGPTAPI(question As %String, xSLT As %String) As %String [ ZenMethod ]
{
    Set apiKey = "your key"
    Set apiUrl = "https://api.openai.com/v1/chat/completions"
    Set request = ##class(%Net.HttpRequest).%New()
    Set request.Server = "api.openai.com"
    Set request.SSLConfiguration = "ChatGPT"  
    Set request.Https = 1  // Use HTTPS
    Set request.ContentType = "application/json"
    Set request.Timeout = "60"
    Do request.SetHeader("Authorization", "Bearer "_apiKey)
    

    Set prompt = "The user asks: "_question_"For your own reference, this is the XSLT the user is viewing, if relevant to their question:"_xSLT_". Be sure to use the correct prefix. And do not omit any code. Write out the full responses."

    Set jsonRequest = ##class(%DynamicObject).%New()
    Set jsonRequest.model = "gpt-4"

    Set messagesArray = ##class(%DynamicArray).%New()
    
    Set systemMessage = ##class(%DynamicObject).%New()
    Set systemMessage.role = "system"
    Set systemMessage.content = "You are a helpful assistant."
    Do messagesArray.%Push(systemMessage)

    Set userMessage = ##class(%DynamicObject).%New()
    Set userMessage.role = "user"
    Set userMessage.content = prompt
    Do messagesArray.%Push(userMessage)

    Set jsonRequest.messages = messagesArray

    Do request.EntityBody.Write(jsonRequest.%ToJSON())

    Set status = request.Post("/v1/chat/completions")
    If $$$ISERR(status) {
        Return "Error sending request to ChatGPT API: "_$System.Status.GetErrorText(status)
    }

    Set responseBody = request.HttpResponse.Data.Read()
    

    Try {
	    Return responseBody
        Set responseJSON = {}.%FromJSON(responseBody)

        If $IsObject(responseJSON.choices) {
            Set chatResponse = responseJSON.choices.GetAt(1).message.content
            Write "ChatGPT response: "_chatResponse
        } Else {
            Write "Error: Invalid response format from ChatGPT."
        }
    } Catch ex {
        Write "Error: Invalid JSON format received from ChatGPT. Raw response: "_responseBody
    }
}
*/
]]></Content>
</UDLText>
</Class>
</Export>
